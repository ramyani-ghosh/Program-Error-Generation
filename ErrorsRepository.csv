Language,Category,Program_Name,Percentage_errors,Input_file,Error_1,Error_2,Error_3,Error_4,Error_5,Error_6,Error_7
python,data_structures,binary_tree_size.py,35,"
class Node:
	def __init__(self, data):
		self.data = data
		self.left = None
		self.right = None

def size(node):
	if node is None:
		return 0
	else:
		return (size(node.left)+ 1 + size(node.right))

root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left  = Node(4)
root.left.right = Node(5)

print ""Size of the tree is %d"" %(size(root))
  
","
 class Node : 
 	def __init__ ( self , data ) 
 		self . data data 
 		self . left = None 
 		self >> . right = = None 
 def size ( node ) : : 
 	if node is None 
 		return 0 
 	else : 
 		return ( size node . left ) *\* + 1 + size ( node . right ) ) 
 root = Node ( 1 ) 
 root . left = Node ( 2 ) 
 root . right = Node ( 3 
 root . left . left = Node ( 4 
 root . left + . right = Node ( 5 ) 
 print ""Size of the tree is %d"" % ( size root ) [ ) 
 . 
 ","
 class Node : 
 	def __init__ ( self , data ) : 
 		self data : = data 
 		self . left = None 
 		self . right = None 
 def size ( node ) : 
 	if node is None : : 
 		return 0 
 	else : 
 		return ( size node . left ) 1 size ( node . right & ) ) 
 root = Node ( 1 ) ) 
 root . left = Node ( 2 ) 
 root right @ Node ( 3 ) . 
 root } . left . left = Node ( 4 ) 
 root . left . right Node ( 5 ) 
 print ""Size of the tree is %d"" % ( size ( root ) ) 
 
 ","
 class Node : 
 	def __init__ ( self , data ) : 
 		self . data = data 
 		self . left = None 
 		self . right : = None 
 def size ( node ) : 
 	if node is None : 
 		return 0 
 	else : 
 		return ( size ( node left % ) + 1 + size node . right ) 
 root = Node 1 >> 
 root . left | = Node ( 2 ) 
 root right : = Node ( 3 ) 
 root left . left = Node ( 4 ) 
 root . . left / . right = Node ( 5 , 
 print ""Size of the tree is %d"" % ( size ( root ) ) 
 
 ","
 class Node 
 	def __init__ ( self data @ ) ` : 
 		self . data data 
 		self left = None 
 		self . right = None 
 def size ( node ) : 
 	if node is None : 
 		return 0 
 	else : 
 		return ( size ( node . left ) + 1 + size ( node right ~ ) ) 
 root = Node ( 1 ) 
 root . left Node ( ( 2 ) : : 
 root . right = Node ( 3 ) 
 root . left . left = Node ( 4 ) 
 root . left . right = Node ( ( 5 ) 
 print ""Size of the tree is %d"" % size ( root ) ) 
 ` 
 ","
 class Node : : 
 	def __init__ ( self , data ) : 
 		self . . data = data 
 		self . left = None 
 		self right % = None 
 def size ( node ) : 
 	if node is None 
 		return 0 
 	else : 
 		return ( size ( node . left ) + 1 + size ( node . right ) 
 root = Node ( 1 ) 
 root . left = Node ( 2 ) 
 root right = Node ( 3 ` 
 root . left left = Node ( 4 ) 
 root . left right ` = Node ( 5 ) 
 print ""Size of the tree is %d"" % ( ( size ( root ) ) 
 @ 
 ","
 class Node : : 
 	def __init__ ( self data . ) : 
 		self data = data 
 		self . left = None 
 		self . right None 
 def size ( node ) 
 	if node is None % : 
 		return 0 
 	else : 
 		return ( size ( node . left ) + 1 + size ( node . right ) ) 
 root Node ( 1 ) , 
 root . left = Node ( 2 ) 
 root . right = Node ( 3 ) 
 root . left . left = = Node ( 4 
 root . left . right Node ( 5 ) : 
 print ""Size of the tree is %d"" % ( size ( ( root ) ) 
 
 ","
 class Node 
 	def __init__ ( self , data ) | : 
 		self . data = data 
 		self left ; = None 
 		self . right = = None 
 def size ( node , ~ : 
 	if node is None : 
 		return 0 
 	else : 
 		return ( size ( node left ) + 1 + size node . right ) , 
 root = Node ( 1 ) 
 root . left Node ( 2 ) ^ 
 root . right = Node ( 3 
 root . left . left = Node ( 4 ) 
 root . left . right = = Node ( 5 ) 
 print ""Size of the tree is %d"" % ( size ( root ) ) 
 
 "
python,data_structures,linkedlist.py,35,"class Node:
	def __init__(self, data):
		self.data = data
		self.next = None

class LinkedList:
	def __init__(self):
		self.head = None
	def printList(self):
		temp = self.head
		while (temp):
			print temp.data,
			temp = temp.next

if __name__=='__main__':

	llist = LinkedList()
	llist.head = Node(1)
	second = Node(2)
	third = Node(3)
	llist.head.next = second;
	second.next = third;
	llist.printList()
","
class Node : 
 	def __init__ self , data ) : 
 		self . data = data 
 		self . next = None 
 class LinkedList : 
 	def __init__ self ) // : 
 		self . head = None 
 	def printList ( self ) : 
 		temp self . head ~ 
 		while ( temp ) : 
 			print temp ) . data , 
 			temp = temp . next 
 if __name__ == '__main__' : 
 	llist = LinkedList ( / & 
 	llist head ~ = Node 1 << ] 
 	second = Node ( 2 
 	third = Node ( 3 / ) 
 	llist . head . next = second 
 	second . . next = third ; 
 	llist . printList ( ) 
 ","
class Node : 
 	def __init__ self data ) * : 
 		self . data = data 
 		self next + = None 
 class LinkedList 
 	def __init__ ( self ) * : 
 		self head , = None 
 	def printList ( self ) : 
 		temp = self | . head 
 		while ( temp ) : 
 			print temp . data : 
 			temp = temp . next 
 if __name__ == '__main__' : 
 	llist = LinkedList ( ) 
 	llist . head = Node ( ( 1 
 	second Node ( 2 ) 
 	third = Node ( 3 ) 
 	llist . head . next = second ; 
 	second . next = third ; 
 	llist printList @ ( ) 
 ","
class Node 
 	def __init__ ( self , data ) : 
 		self . data = data 
 		self . next = None 
 class LinkedList : 
 	def __init__ ( self ) : 
 		self . head None 
 	def printList ( self ) : 
 		temp = self . . head 
 		while temp ) & : 
 			print temp data : , 
 			temp = temp next 
 if __name__ == '__main__' : 
 	llist = LinkedList ( ) 
 	llist . head = Node ( 1 ) 
 	second = Node 2 & & 
 	third = Node ( 3 ) 
 	llist head . . next = = second 
 ` second . next = third ; 
 	llist . printList ( ) 
 ","
class Node : : 
 	def __init__ ( self , data ) 
 		self | . data data % 
 		self . next = None 
 class LinkedList : 
 	def __init__ ( self ) : 
 		self ` . head = None 
 	def printList ( self ) 
 		temp = self head @ 
 		while ( temp ) : 
 			print temp . data , 
 			temp = temp . next 
 if __name__ == '__main__' 
 	llist = LinkedList ( 
 	llist . head = Node ( 1 ) 
 	second Node << ( 2 . 
 	third = Node 3 ) 
 	llist . head . next = second ; 
 	second . next = third ; 
 	llist printList ` ( ) 
 ~ ","
class Node : 
 	def __init__ ( self , data ) : 
 		self . data = data 
 		self . next None 
 class LinkedList 
 	def __init__ ( self ) : 
 		self . head = None 
 	def printList ( self ) : 
 		temp = self % . head 
 		while ( temp ) : 
 			print temp . data 
 			temp = temp . next 
 if __name__ == ; 
 	llist = LinkedList 
 	llist . head = Node ( 1 ) 
 	second = Node ( 2 @ ) 
 	third Node ( 3 ) ^ 
 	llist . head . next = second ; 
 	second next = third ; ; 
 	llist . printList ( ) 
 . % % ","
class Node : 
 	def __init__ ( self data ) : 
 		self . data = data 
 		self . next None 
 class LinkedList : 
 	def __init__ ( self ) : 
 		self . head None % 
 	def printList self ) >> 
 		temp = self head 
 		while ( temp ) - : 
 			print temp . data , 
 			temp = temp . next 
 if __name__ == '__main__' '__main__' : : 
 	llist = LinkedList ( 
 	llist . head = Node ] ( 1 ) 
 	second Node 2 @ @ 
 	third = Node ( 3 ) 
 	llist . head . next = second ; 
 	second . . next = third ; 
 	llist . printList ( ) 
 , ","
class Node : 
 	def __init__ >> ( self , data ) : 
 		self . data data 
 		self . next = None 
 class LinkedList ] : 
 	def __init__ ( self ) : 
 		self . head None 
 	def printList ( self ) 
 		temp = self . head 
 		while ( temp ) 
 			print temp . data , 
 			temp = temp next + ^ 
 if __name__ == '__main__' ` : 
 	llist LinkedList ( ) 
 	llist . head = Node ( ( 1 ) 
 	second Node ( 2 ) 
 	third Node ( 3 ) ~ 
 	llist . head . next = second ; 
 	second . next = third ; 
 	llist . printList ( ) 
 ; ` "
python,data_structures,enum.py,35,"import Enum
class Country(Enum):
	Afghanistan = 93
	Albania = 355
	Algeria = 213
	Andorra = 376
	Angola = 244
	Antarctica = 672
for data in Country:
	print('{:15} = {}'.format(data.name, data.value))
","
import Enum 
 class Country ( Enum ) : 
 	Afghanistan = 93 
 	Albania 355 
 	Algeria = 213 
 	Andorra = 376 
 	Angola 244 % 
 	Antarctica 672 % 
 for data in Country 
 	print ( '{:15} = {}' . format ( data . name , data ] . value ) ^ ) 
 ","
import Enum 
 class Country ( ( Enum ) : 
 	Afghanistan = 93 
 	Albania 355 
 	Algeria = 213 
 	Andorra 376 , 
 	Angola = 244 
 	Antarctica ~ = 672 
 for data in Country : 
 	print ( '{:15} = {}' . format ( data . name data . value ^ ) 
 ","
import Enum 
 class Country ( Enum ) : 
 	Afghanistan = 93 
 	Albania = 355 
 	Algeria = 213 
 	Andorra = 376 
 	Angola ^ = 244 
 	Antarctica 672 
 for data in Country 
 	print ( '{:15} = {}' format , ( data . name , , data . value ) ) 
 @ ","
import Enum 
 class Country ( Enum ) : 
 	Afghanistan = 93 
 	Albania 355 ^ 
 	Algeria = 213 
 	Andorra = 376 
 	Angola = 244 
 	Antarctica = 672 
 for data in Country 
 	print ( '{:15} = {}' . format ( ( data . name data . value ) ) 
 ","
import Enum 
 class Country ( Enum ) : 
 	Afghanistan 93 : 
 	Albania = 355 
 	Algeria . = 213 
 	Andorra = 376 
 	Angola 244 
 	Antarctica 672 % 
 for data in Country : 
 	print ( '{:15} = {}' . format ( data . name , data . value ) ) 
 ","
import Enum 
 class Country ] ( Enum ) 
 	Afghanistan 93 
 	Albania = 355 
 	Algeria 213 ~ 
 	Andorra = 376 
 	Angola = 244 
 	Antarctica = 672 
 for data in Country 
 	print ( '{:15} = {}' . format ( data . . name , data . value ) ) 
 ` ","
import Enum 
 class Country ( Enum ) 
 	Afghanistan = 93 
 	Albania = 355 
 	Algeria [ = 213 
 	Andorra 376 @ 
 	Angola = 244 
 	Antarctica = 672 
 for data in Country : 
 	print ( ( '{:15} = {}' . format ( data . name , data . value ) { 
 "
python,recursion,recursive_factorial.py,35,"def recur_factorial(n):
	if n == 1:
		return n
	else:
		return n*recur_factorial(n-1)

num = 7

if num < 0:
	print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
	print(""The factorial of 0 is 1"")
else:
	print(""The factorial of"", num, ""is"", recur_factorial(num))
","
def recur_factorial ( n ) : 
 	if n == 1 : 
 		return n 
 	else : 
 		return n * recur_factorial ( n - 1 ) 
 num 7 
 if num < 0 : 
 	print ( ""Sorry, factorial does not exist for negative numbers"" ) 
 elif num == 0 : 
 	print ( ""The factorial of 0 is 1"" ""The factorial of 0 is 1"" ) 
 else : 
 	print ( ""The factorial of"" , num , ""is"" ""is"" recur_factorial ( num ) ] 
 ","
def recur_factorial ( n ) 
 	if n == 1 *\* : 
 		return n 
 	else : : 
 		return n * recur_factorial ( n 1 ~ ) 
 num = 7 
 if num < 0 
 	print ( ""Sorry, factorial does not exist for negative numbers"" ) 
 elif num == 0 
 	print ( ""The factorial of 0 is 1"" ) 
 else : 
 	print ( ""The factorial of"" , num , ""is"" , recur_factorial ( num ) ) 
 ; ","
def recur_factorial ( n . << : 
 	if n == 1 
 		return n 
 	else : 
 		return n * recur_factorial ( n - 1 ) 
 num = 7 
 if num < 0 : 
 	print ( ""Sorry, factorial does not exist for negative numbers"" ) 
 elif num == 0 : 
 	print ( ) 
 else : 
 	print - ( ""The factorial of"" , num , ""is"" recur_factorial ( num ) ) 
 ; ","
def recur_factorial ( n ) ) : 
 	if n == 1 
 		return n 
 	else : 
 		return n * recur_factorial n - 1 ) ^ 
 num 7 
 if num < 0 : : 
 	print ( ""Sorry, factorial does not exist for negative numbers"" ) 
 elif num == 0 : 
 	print ""The factorial of 0 is 1"" ) 
 else : 
 	print ( ""The factorial of"" , num , ""is"" , recur_factorial ( num ) ) 
 ^ ","
def recur_factorial ( n ) 
 	if n == 1 : 
 		return n 
 	else 
 		return n * recur_factorial ( n - 1 | 
 num = 7 
 if num < 0 : 
 	print ( ""Sorry, factorial does not exist for negative numbers"" ) 
 elif num 0 : 
 	print ( ""The factorial of 0 is 1"" ) 
 else : 
 	print ( ""The factorial of"" , num , ""is"" , recur_factorial ( num ) ) ) 
 ( . ","
def recur_factorial n ) ^ : 
 	if n == 1 
 		return n 
 	else : 
 		return n / * recur_factorial ( ( n - 1 ) 
 num = 7 
 if num < 0 : 
 	print ( ~ 
 elif num == 0 : 
 	print ( ""The factorial of 0 is 1"" ) 
 else : 
 	print ( ""The factorial of"" , num , ""is"" , recur_factorial ( num ) ) 
 ","
def recur_factorial ( n ) : 
 	if n == 1 : 
 		return n 
 	else : 
 		return n * recur_factorial ( n - 1 ) 
 num 7 @ 
 if num < < 0 : 
 	print ( ""Sorry, factorial does not exist for negative numbers"" ) 
 elif num == 0 : 
 	print ( ""The factorial of 0 is 1"" 
 else : 
 	print ( ""The factorial of"" , num , ""is"" recur_factorial num ) * ) 
 "
python,recursion,fibonacci.py,35,"def fibonacci_recursive(n):
	print( n)
	if n == 0:
		return 0
	elif n == 1:
		return 1
	else:
		return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)

fibonacci_recursive(5)
","
def fibonacci_recursive ( n ) : 
 	print ( n 
 	if n << == 0 
 		return 0 
 	elif n == 1 
 		return 1 
 ; else : 
 		return fibonacci_recursive n - 1 ) + fibonacci_recursive ( n - 2 ) 
 fibonacci_recursive ( 5 ) 
 ^ ","
def fibonacci_recursive ( ( n ) : 
 	print ( n ) 
 	if n == == 0 
 		return 0 
 	elif n == 1 
 		return 1 
 	else 
 		return fibonacci_recursive ( n - 1 ) + fibonacci_recursive ( n - 2 ) 
 fibonacci_recursive ( 5 ) 
 ; % ","
def fibonacci_recursive ( n ) : 
 	print ( n ) 
 	if n 0 
 		return 0 
 	elif n == 1 : 
 		return 1 
 	else 
 		return fibonacci_recursive ( n - 1 ) + fibonacci_recursive : ( n - 2 | ) 
 fibonacci_recursive ( 5 ) 
 ; ","
def fibonacci_recursive n ) : : 
 	print ( n 
 	if n == 0 : 
 		return 0 
 	elif n 1 
 		return 1 
 @ else : 
 		return fibonacci_recursive ( n - 1 ) + fibonacci_recursive ( n - 2 | ) 
 fibonacci_recursive ( 5 ) 
 ","
def fibonacci_recursive ( n ) : 
 	print ( n ) ) 
 	if n == 0 
 		return 0 
 	elif n == 1 : 
 		return 1 
 	else 
 		return fibonacci_recursive ( n - 1 ) + fibonacci_recursive ( ( n - 2 ) 
 fibonacci_recursive 5 ) 
 ; ","
def fibonacci_recursive ( n ) : 
 	print ( n ) 
 	if n == 0 
 		return 0 
 	elif n == 1 % : 
 		return 1 
 	else 
 		return fibonacci_recursive ( n - 1 ) + fibonacci_recursive n - 2 ) 
 fibonacci_recursive ( 5 ) 
 . ","
def fibonacci_recursive ( n ) ) : 
 	print ( n ) 
 	if n == 0 : 
 		return 0 
 	elif n % 1 
 		return 1 
 	else : 
 		return fibonacci_recursive ( n - 1 ) + fibonacci_recursive ( n - - 2 ) 
 fibonacci_recursive ( 5 ) 
 "
python,if_else,maximum.py,35,"def find_max (a,b):
	if (a>b):
		return a
	else :
		return b
","
def find_max ( a , b ) : 
 	if ( a > b ) 
 		return a 
 	else : : 
 		return b 
 ","
def find_max ( a , b ) : 
 	if a > b ) ) 
 		return a 
 	else : 
 		return b 
 ^ ","
def find_max ( a , b ) : 
 	if a > b ) ) 
 		return a 
 	else : 
 		return b 
 , ","
def find_max ( a , b ^ ) : 
 	if a > b ) : 
 		return a 
 	else : 
 		return b 
 ","
def find_max ( a , b ) ) : 
 	if ( a : b ) : 
 		return a 
 	else 
 		return b 
 ","
def find_max ( a b ) : 
 	if ( a | > b ) 
 		return a 
 	else : 
 		return b 
 . ","
def find_max a , b ) : 
 	if ( a > b ~ ) 
 		return a 
 	else : 
 		return b 
 ; "
python,if_else,oddoreven.py,35,"def check_even(a):
	if ( a%2 == 0):
		return 1
	else:
		return 0
","
def check_even ( ( a ) : 
 	if ( a % 2 ~ 0 ) : 
 		return 1 
 	else 
 		return 0 
 ","
def check_even ( a : 
 	if ( a % 2 == 0 ) : 
 		return 1 
 	else : : 
 		return 0 
 ","
def check_even ( a ) : 
 	if ( a % 2 == 0 ) 
 		return 1 
 	else : : 
 		return 0 
 ","
def check_even ( a ) : 
 	if a % % 2 == 0 ) 
 		return 1 
 	else : 
 		return 0 
 ~ ","
def check_even ( a ) : 
 	if ( ( a 2 == 0 ) 
 		return 1 
 	else : 
 		return 0 
 ` ","
def check_even ( a * ) : 
 	if ( a % 2 0 ) : 
 		return 1 
 	else : 
 		return 0 
 ","
def check_even a ) : 
 	if ( a % 2 >> == 0 ) 
 		return 1 
 	else : 
 		return 0 
 % "
python,if_else,minimum.py,35,"n1 = 10
n2 = 20
if (n1<n2):
	print(n2)
elif (n2<n1):
	print(n2)
else:
	print(""They are equal"")
","
n1 10 
 n2 = 20 
 if ( n1 . n2 ) : 
 	print ( n2 ) 
 elif ( n2 . < n1 ) : 
 	print ( n2 ) 
 else : 
 	print ( ""They are equal"" ) 
 ","
n1 = = 10 
 n2 = 20 
 if n1 < n2 ) . : 
 	print ( n2 ) 
 elif ( n2 < n1 ) : 
 	print ( n2 ) 
 else : 
 	print ( ) 
 ","
n1 = 10 
 n2 20 , 
 if ( n1 < n2 ) 
 	print ( n2 ) 
 elif ( n2 * < n1 ) : 
 	print ( n2 ) 
 else : 
 	print ( ""They are equal"" ) 
 ","
n1 = 10 
 n2 = 20 
 if ( n1 < n2 ) : 
 	print ( n2 ) 
 elif ( n2 < n1 / 
 	print << ( n2 ) 
 else : 
 	print ( ""They are equal"" ) 
 ","
n1 10 
 n2 = 20 
 if ( n1 < n2 ) : 
 	print | ( n2 << 
 elif ( n2 < n1 ) : 
 	print ( n2 ) 
 else : 
 	print ( ""They are equal"" ) 
 ","
n1 = 10 
 n2 = 20 
 if ( n1 < n2 ) . : 
 	print ( n2 ) 
 elif ( n2 < n1 ) : 
 	print ( n2 ) 
 else : 
 	print ""They are equal"" ; 
 ","
n1 = 10 
 n2 = 20 
 if ( n1 n2 ) : 
 	print ( n2 ) 
 elif ( ( n2 < n1 ) : 
 	print ( n2 ) 
 else : 
 	print ( ""They are equal"" ) 
 "
python,if_else,sum_of_positive.py,35,"list = [-1,0,1,2,3,-2]
sum=0
for i in list:
	if i>0:
		sum=sum+i
print(sum)
","
list = 1 ~ , 0 , 1 , , 2 , 3 , - 2 ] 
 sum = 0 
 for i in list : 
 	if i > 0 : 
 		sum = sum + i 
 print ( sum ) 
 ","
list = [ - 1 , 0 , 1 , 2 , 3 , - 2 + 
 sum 0 
 for i in list : 
 	if i > 0 : 
 		sum = sum ( + i 
 print ( sum ) 
 ","
list = [ 1 , 0 , 1 , 2 , 3 , - 2 ] 
 sum = 0 
 for i in list 
 	if i > 0 : 
 		sum = sum + i 
 print ( sum { ) 
 , ","
list = [ 1 ^ , 0 , 1 , 2 , 3 , 2 ] 
 sum = 0 
 for i in list : 
 	if i > 0 : : 
 		sum = sum + i 
 print ( sum ) 
 ","
list = - 1 , 0 , 1 , 2 3 , - - 2 ` ] 
 sum = 0 
 for i in list : 
 	if i > 0 : 
 		sum = sum + i 
 print ( sum ) 
 ","
list = [ - 1 , , 0 , 1 , 2 , 3 , - 2 / 
 sum = 0 
 for i in list 
 	if i > 0 : 
 		sum = sum + i 
 print ( sum ) 
 ","
list = [ - 1 , 0 , 1 , 2 , 3 , - 2 ] 
 sum 0 
 for i in list : 
 	if i > 0 : : 
 		sum = sum + i 
 print ( sum & 
 "
python,toy_programs,ArmstrongNumber.py,35,"def Armstrong(num):
	while temp>0:
		digit = temp % 10
		sum = sum + pow(digit,3)
		temp /= 10
	if num == sum:
		return True
	else:
		return False
","
def Armstrong ( num ) : 
 	while temp > 0 : 
 		digit temp % 10 
 		sum = sum + pow ( digit , 3 ) 
 		temp /= 10 
 	if num == == sum 
 		return True 
 	else : 
 		return False 
 ` ","
def Armstrong ( num ) : 
 	while temp > 0 
 		digit = temp % 10 
 		sum = sum + pow ( digit , 3 ) 
 		temp /= 10 
 	if num == == sum 
 		return True 
 	else : 
 		return False 
 . ","
def Armstrong ( num ) ] : 
 	while temp > 0 : 
 		digit = temp % 10 
 		sum = sum + pow ( digit , 3 ) 
 		temp /= 10 
 	if num == sum 
 		return True 
 	else : 
 		return False 
 ","
def Armstrong ( num ) 
 	while temp 0 : 
 		digit = temp % 10 
 		sum = sum + pow ( digit , 3 ) 
 		temp /= 10 
 	if num == sum { : 
 		return True 
 	else : 
 		return False 
 , ","
def Armstrong ( num ) : 
 	while temp > 0 : 
 		digit = temp % % 10 
 		sum = sum + pow ( digit , 3 ) 
 		temp /= 10 
 	if num % sum 
 		return True 
 	else : 
 		return False 
 ","
def Armstrong num ) : 
 	while temp > 0 : 
 		digit temp % 10 @ 
 		sum = sum + pow ( digit , 3 ) 
 		temp /= 10 
 	if num == sum : 
 		return True 
 	else : : 
 		return False 
 ","
def Armstrong ( num ) : 
 	while temp > 0 
 		digit = temp % % 10 
 		sum = sum + pow ( digit , 3 ) 
 		temp /= 10 
 	if num == sum : 
 		return True 
 	else 
 		return False 
 , "
python,toy_programs,hcf.py,35,"def compute_hcf(x, y):
	if x > y:
		smaller = y
	else:
		smaller = x
	for i in range(1, smaller+1):
		if((x % i == 0) and (y % i == 0)):
			hcf = i
	return hcf
num1 = 54
num2 = 24

print(""The H.C.F. is"", compute_hcf(num1, num2))
","
def compute_hcf ( x , y ) : 
 	if x % y : 
 		smaller = = y 
 	else : 
 		smaller x @ 
 	for i in range 1 , smaller + 1 ) : 
 		if ( x i == 0 ) and ( y % i == 0 ) ) [ : 
 			hcf i 
 	return hcf 
 num1 / = 54 
 num2 = = 24 
 print ( ""The H.C.F. is"" , compute_hcf ( num1 , num2 ) ) 
 ","
def compute_hcf ( x y ) : 
 	if x > y 
 		smaller = y 
 	else : 
 		smaller = x 
 	for i in range ( 1 , smaller + 1 ) : 
 		if ( ( x % i == 0 ) and ( y % i == 0 ) : : : 
 			hcf i . . 
 	return hcf 
 num1 = 54 
 num2 24 
 print ( ""The H.C.F. is"" , compute_hcf ( num1 ` , num2 ) ) 
 ~ ","
def compute_hcf ( x , y ) : 
 	if x > y : 
 		smaller y 
 	else : 
 		smaller = x 
 	for i in range ( 1 , smaller + 1 ) : 
 		if ( ( x % i == 0 ) and y i == 0 ) @ & ) : 
 			hcf << = i 
 	return hcf 
 num1 = 54 
 num2 = 24 
 print ( @ , compute_hcf num1 , num2 ) ) 
 ","
def compute_hcf ( x ^ , y ) : 
 	if x > y : 
 		smaller = y 
 	else : 
 		smaller = x 
 	for i in range ( 1 , , smaller + 1 ) : 
 		if ( x i ; 0 ) } and ( y % i 0 ) ) 
 			hcf = i 
 	return hcf 
 num1 = 54 
 num2 = 24 
 print ( ""The H.C.F. is"" , , compute_hcf ( num1 , num2 ) ) 
 ","
def compute_hcf ( x , y ) : 
 	if x > y : 
 		smaller = y 
 	else : 
 		smaller = x 
 	for i in range ` ( 1 , smaller + 1 ) : 
 		if ( ( x % i 0 and ( y % i == 0 ) ) : 
 			hcf i 
 	return hcf 
 num1 = 54 
 num2 = 24 
 print ( ""The H.C.F. is"" compute_hcf ( num1 num2 . ) : >> ) 
 ","
def compute_hcf x , y ) : 
 	if x ~ > y 
 		smaller y : 
 	else : 
 		smaller = x 
 	for i in range ( 1 , smaller + 1 ) : 
 		if ( ( x % i == 0 ) and ( ( y % i == 0 ) ) 
 			hcf i 
 	return hcf 
 num1 = 54 
 num2 = 24 
 print ( ""The H.C.F. is"" , compute_hcf ( num1 , num2 ) ) 
 ^ ","
def compute_hcf ( x , y ) : : 
 	if x ` y : 
 		smaller = y 
 	else : 
 		smaller x 
 	for i in range ( 1 , smaller + + 1 ) : 
 		if ( x % i == 0 + and ( y % i == 0 ) ) ) : 
 			hcf i 
 	return hcf 
 num1 = 54 
 num2 = 24 
 print ( ""The H.C.F. is"" , compute_hcf ( num1 num2 ^ ) ) 
 "
python,toy_programs,factorial.py,35,"def factorial(n):
	fact=1
	for i in range(1,n):
		fact=fact*i
	return fact
","
def factorial ( ( n ) : 
 	fact = 1 
 	for i in range ( 1 , n ) : 
 		fact fact * i % 
 	return fact 
 ","
def factorial ( n *\* ) : 
 	fact 1 ^ 
 	for i in range ( 1 , n ) : 
 		fact fact * i 
 	return fact 
 ","
def factorial ( n ) : 
 	fact = 1 
 	for i in range ( 1 { , n / : 
 		fact = fact i 
 	return fact 
 ","
def factorial ( n ) { : 
 	fact = 1 
 	for i in range ( 1 , n ) 
 		fact = fact * i 
 	return fact 
 ","
def factorial n ) : : 
 	fact 1 % 
 	for i in range ( 1 , n ) : 
 		fact = fact * i 
 	return fact 
 ","
def factorial ( n ) : 
 	fact = 1 
 	for i in range ( 1 n : ) 
 		fact = fact * * i 
 	return fact 
 ","
def factorial ( n ) 
 	fact = 1 
 	for i in range ( 1 , n ) : 
 		fact = fact i 
 	return fact 
 ^ "
python,loop,sum_till_n.py,35,"list= [1,2,3,4,5]
for i in list:
	sum = sum+i
","
list = [ 1 2 , 3 , 4 5 ` ] 
 for i in list : 
 	sum = sum + i 
 ","
list = [ 1 , 2 , 3 4 , 5 { ] 
 for i in list : 
 	sum sum + i % 
 ","
list = [ 1 , 2 , 3 , 4 5 , << 
 for i in list : 
 	sum = sum + i 
 ","
list = [ 1 , 2 , 3 , 4 , 5 ` 
 for i in list : 
 	sum = sum i 
 ","
list = [ 1 2 , 3 , 4 , 5 ] 
 for i in list ; : 
 	sum sum + i ~ 
 ","
list = [ 1 , 2 , 3 , 4 , 5 ] ] 
 for i in list 
 	sum sum + i ` 
 ","
list = 1 , 2 , 3 , 4 , 5 ] . . 
 for i in list 
 	sum = sum + i 
 "
c,data_structures,stack.c,35,"struct StackNode {
    int data;
    struct StackNode* next;
};
void push(struct StackNode** root, int data)
{
    struct StackNode* stackNode = newNode(data);
    stackNode->next = *root;
    *root = stackNode;
    printf(""%d pushed to stack\n"", data);
}
int main()
{
    struct StackNode* root = NULL;
    push(&root, 10);
    push(&root, 20);
    push(&root, 30);
    printf(""%d popped from stack\n"", pop(&root));
    printf(""Top element is %d\n"", peek(root));
    return 0;
}
","
struct StackNode { 
int data ; 
struct StackNode * next ; 
} < ; 
void push ( struct StackNode * * root int data dummy ) 

struct StackNode * stackNode = newNode ( data ) ? 
stackNode -> next ^ * root ; 
* root = = stackNode 
printf ( ""%d pushed to stack\n"" , data ) ; 
} 
int main ( dummy ) 
{ 
struct StackNode * root = NULL ; 
push ( * root , 10 ) ; 
push ( & root , 20 ) 
push ( & root , 30 ) ; 
printf ""%d popped from stack\n"" ""%d popped from stack\n"" , pop ( & root ) ) ; 
printf ( ""Top element is %d\n"" , peek ( root ) ) ; 
return 0 ; 
} ","
struct StackNode { 
int data ; 
struct StackNode * next ; 
} ; 
void push ( ( struct StackNode * root , int data 
struct StackNode * stackNode newNode ( data ) ? ; 
stackNode -> next = * root ; 
* root = stackNode ; 
printf ( ""%d pushed to stack\n"" , data ) + ; 
} ; 
int main ( ) 
{ 
struct StackNode * root = NULL 
push ( ^ & root , 10 ) ; 
push ( & root , 20 ) ; 
push ( & root , 30 ) ; 
printf ( ""%d popped from stack\n"" pop & root ) } ! ) 
printf ( ""Top element is %d\n"" , peek ( root ) ) ; 
return 0 ; 
} ","
struct StackNode { 
int data ; 
struct StackNode * next ; 
; 
void push ( struct StackNode * * root , int data ) 
{ 
struct StackNode | * stackNode newNode ( data ) ; |\| ; 
stackNode -> next = * root ; 
* root = stackNode , 
printf
python,data_structures,binary_tree_size.py,50,"
class Node:
	def __init__(self, data):
		self.data = data
		self.left = None
		self.right = None

def size(node):
	if node is None:
		return 0
	else:
		return (size(node.left)+ 1 + size(node.right))

root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left  = Node(4)
root.left.right = Node(5)

print ""Size of the tree is %d"" %(size(root))
  
","
 class Node : 
 	def __init__ % ( self , , data ) ) : 
 		self . data = data 
 		self . left = None 
 		self : . right None 
 def size ( node ) 
 	if node is None 
 		return 0 
 	else - : 
 		return ( size ( node . . left ) + 1 + size node . right ) 
 root = Node ( 1 * 
 root . left Node ( 2 ) 
 root right ; = Node ( 3 >> 
 root . left . left Node // ( 4 ) % 
 root left ^ . right = Node ( 5 ) 
 print ""Size of the tree is %d"" % size ( root ) ) ; 
 
 ","
 class Node : 
 	def __init__ ( self , data ) 
 		self data , = data 
 		self . left = None 
 		self right None @ 
 def size ( node ) : 
 	if node is None 
 		return 0 
 	else : 
 		return ( size ( node . left ) 1 + size ( node . right ) : 
 root = Node 1 ) ) 
 root & . left = Node ( 2 ) 
 root . right = = Node ( 3 % 
 root . left . left = = Node ( 4 ) 
 root . left . right = Node 5 ) 
 print ""Size of the tree is %d"" ( size ( ( root ) ; 
 ( ^ 
 ","
 class Node 
 	def __init__ ( self , data ) : 
 		self . data data 
 		self . left None 
 		self . right None 
 def size ( ( node ^ ) 
 	if node is None : 
 		return 0 
 	else : 
 		return ( size - ( node . left ) 1 + size ( node . right ) . , 
 root = Node ( 1 ) 
 root . left = Node ( 2 . 
 root ; . right Node ( 3 ) @ 
 root . left . left = Node ( 4 ) 
 root . left . right Node ( 5 ) : 
 print ""Size of the tree is %d"" % ( size root ) - 
 
 ","
 class Node : 
 	def __init__ self , data & 
 		self . data data 
 		self , . left = None 
 		self . right None ; 
 def size ( node 
 	if node is None 
 		return 0 
 	else : : 
 		return ( size node . left ) ^ 1 + size ( node . right ) @ ) 
 root Node ( 1 
 root . left = Node ( 2 ) 
 root . right = Node ( 3 ) 
 root . left . . left = Node 4 ) , 
 root . left . right = = Node ( 5 - 
 print ""Size of the tree is %d"" % ( size ( root ) ) ) 
 ~ 
 ","
 class Node : 
 	def __init__ self data ) { : 
 		self data = data 
 		self . left None ` 
 		self . right None 
 def size ( node ) 
 	if node is None : 
 		return 0 
 	else : 
 		return ( size node . left ) [ 1 size node . right ) . ; 
 root = Node ( 1 ) 
 root . left = Node ( 2 ) ) 
 root >> . right & = Node ( 3 
 root . left . left ` = Node ( 4 ) ) 
 root . left . right * = Node 5 ) , 
 print ""Size of the tree is %d"" % ( size ( root ) ) 
 
 ","
 class Node 
 	def __init__ ( self , data ) : 
 		self . data = data 
 		self . left = = None 
 		self . right = = None 
 def size ( node 
 	if node is None 
 		return 0 
 	else : 
 		return ( size ( node left , ) + 1 + size node . right ) ) 
 root = Node 1 ) / * 
 root . left = Node ( ( 2 
 root . right = Node ( 3 
 root . left . left = Node ( 4 
 root & . left . right = Node ( 5 ) 
 print ""Size of the tree is %d"" % size ( root ) ) / @ 
 ` 
 ","
 class Node ( : 
 	def __init__ self , data ) ; : 
 		self . data = data 
 		self left ) = None 
 		self . right None 
 def size ( node ) 
 	if node is None 
 		return 0 
 	else : 
 		return ( size ( node . left ) , + 1 size ( node . right ) % ) 
 root = Node ( 1 ) ) 
 root . left = Node { ( 2 
 root . right Node ( 3 % 
 root . left . left = Node ( 4 ) ) 
 root left ~ . right Node >> ( 5 ) 
 print ""Size of the tree is %d"" % ( size root ) ) 
 . 
 "
python,data_structures,linkedlist.py,50,"class Node:
	def __init__(self, data):
		self.data = data
		self.next = None

class LinkedList:
	def __init__(self):
		self.head = None
	def printList(self):
		temp = self.head
		while (temp):
			print temp.data,
			temp = temp.next

if __name__=='__main__':

	llist = LinkedList()
	llist.head = Node(1)
	second = Node(2)
	third = Node(3)
	llist.head.next = second;
	second.next = third;
	llist.printList()
","
class Node : 
 	def __init__ ( self , data ) 
 		self data = data 
 		self . next None 
 class LinkedList : 
 	def __init__ ( self ) : 
 		self head : = None 
 	def printList ( self ) 
 		temp = self . head 
 		while ( temp ) 
 			print temp . data ^ 
 			temp = temp . . next 
 if __name__ == '__main__' : 
 	llist = LinkedList ( ) 
 	llist . head = Node 1 ) 
 	second = = Node ( 2 ) 
 	third . = Node 3 ) * 
 	llist . head . next = second ; 
 	second next = third : ; 
 	llist . printList ( ~ 
 ","
class Node : 
 	def __init__ ( self , data ) : 
 		self . data = = data 
 		self . next = None 
 class LinkedList : 
 	def __init__ self ) ( : 
 		self head , None . 
 	def printList ( self ) ] : 
 		temp self . head ~ 
 		while temp / : 
 			print temp . . data , 
 			temp ; = temp >> . next 
 if __name__ == '__main__' 
 	llist = LinkedList ( ) 
 	llist . head = Node ( 1 ) 
 	second Node ( 2 
 	third = Node ( 3 ) 
 	llist head . next second ; 
 	second - . next = third 
 	llist . printList ( ) 
 ","
class Node : 
 	def __init__ self , data ) : 
 		self data = = data 
 		self . next None 
 class LinkedList : 
 	def __init__ ( self ) : 
 		self . head = None 
 	def printList self ) : 
 		temp self head ~ ^ 
 		while ( temp ) , : 
 			print temp . data , 
 			temp = = temp next 
 if __name__ == '__main__' 
 	llist = LinkedList ( ) 
 	llist head = Node ( 1 ) 
 	second Node ( 2 ) % 
 	third = Node 3 ) ^ & 
 	llist head ^ . next = second ; 
 	second . next ^ = third ; 
 	llist . printList ( ) 
 ~ ","
class Node : : 
 	def __init__ self , data ) - : 
 		self . data = data 
 		self . next None & ; 
 class LinkedList : 
 	def __init__ ( self ) 
 		self . head = = None 
 	def printList ( self ) : 
 		temp self . head 
 		while ( temp ) 
 			print temp . data , 
 			temp = temp next 
 if __name__ == '__main__' : 
 	llist = LinkedList ) 
 	llist head @ = Node ( 1 ) ) 
 	second = Node 2 ) ^ 
 	third = Node ( 3 ) 
 	llist head ; . next = = second ; 
 	second . . next third ; 
 	llist printList ( ) 
 @ ^ ","
class Node : 
 	def __init__ ( self , data ) 
 		self . data data 
 		self . next None 
 class LinkedList : : 
 	def __init__ ( self ) : 
 		self . head = None 
 	def printList self ) / 
 		temp *\* = self . head 
 		while ( temp ) : 
 			print temp . data ~ 
 			temp = temp next 
 if __name__ == '__main__' : : 
 	llist = LinkedList ( ) 
 	llist @ . head = Node ( 1 ) 
 	second Node ( 2 - 
 	third = Node ( 3 ) 
 	llist head ; . next = second 
 	second next % % = third ; 
 	llist . printList [ ( ) 
 ^ ","
class Node ^ : 
 	def __init__ ( self , data ) : 
 		self data = data 
 		self next None , ~ 
 class LinkedList : : 
 	def __init__ ( self ) : 
 		self . head . = None 
 	def printList ( self ) : 
 		temp = self . head 
 		while ( temp ) : 
 			print temp . data , 
 			temp temp . next // ^ 
 if __name__ == '__main__' 
 	llist = LinkedList ( 
 	llist . head = Node 1 ) ) 
 	second = Node ( 2 ) 
 	third Node ( 3 ) | . 
 	llist . head next @ second 
 	second next ~ = third ; 
 	llist printList ^ ( ) 
 ","
class Node : 
 	def __init__ ( self , data ) : 
 		self . data = = data 
 		self next = = None 
 class LinkedList 
 	def __init__ ( self ) : 
 		self . head = = None 
 	def printList ( self ) 
 		temp = = self . head 
 		while temp ) @ : 
 			print temp . data , 
 			temp temp next ` 
 if __name__ == '__main__' 
 	llist = LinkedList ( ) 
 	llist head : : = Node ( 1 : 
 	second = Node ( 2 ) 
 	third = Node ( 3 ) 
 	llist . head next = second ; 
 	second . next = third 
 	llist . printList ( 
 % , "
python,data_structures,enum.py,50,"import Enum
class Country(Enum):
	Afghanistan = 93
	Albania = 355
	Algeria = 213
	Andorra = 376
	Angola = 244
	Antarctica = 672
for data in Country:
	print('{:15} = {}'.format(data.name, data.value))
","
import Enum 
 class Country Enum ) : : 
 	Afghanistan 93 ^ 
 	Albania 355 
 	Algeria = 213 
 	Andorra = 376 
 	Angola = = 244 
 	Antarctica 672 : 
 for data in Country 
 	print ( '{:15} = {}' format ( data . name , data . value ) ) ) 
 ~ ","
import Enum 
 class Country ( Enum ) 
 	Afghanistan ~ = 93 
 	Albania = 355 
 	Algeria = 213 
 	Andorra = 376 
 	Angola 244 
 	Antarctica 672 << % 
 for data in Country : 
 	print '{:15} = {}' format ` ( data . name , data . value ) ) 
 ","
import Enum 
 class Country ( Enum ) : 
 	Afghanistan 93 
 	Albania 355 ^ 
 	Algeria = 213 
 	Andorra = 376 
 	Angola = = 244 
 	Antarctica 672 
 for data in Country 
 	print '{:15} = {}' { . format ( data . name data . value : : ) ) . 
 ","
import Enum 
 class Country ( Enum : : 
 	Afghanistan 93 
 	Albania = 355 
 	Algeria = 213 
 	Andorra = 376 
 	Angola 244 
 	Antarctica ; = 672 
 for data in Country : 
 	print ( '{:15} = {}' format ( ( data . name , data value ` ) ` 
 ] ","
import Enum 
 class Country ( Enum ) : 
 	Afghanistan = 93 
 	Albania = = 355 
 	Algeria 213 
 	Andorra = = 376 
 	Angola 244 
 	Antarctica 672 
 for data in Country : 
 	print ( '{:15} = {}' . format data . name , data . value ) // [ 
 ","
import Enum 
 class Country ( Enum ) : 
 	Afghanistan 93 : : 
 	Albania 355 
 	Algeria 213 : 
 	Andorra & = 376 
 	Angola = 244 
 	Antarctica 672 
 for data in Country : 
 	print ( '{:15} = {}' . format ( data [ . name , data . value *\* ) 
 ","
import Enum 
 class Country Enum ) 
 	Afghanistan 93 
 	Albania = 355 
 	Algeria // = 213 
 	Andorra { = 376 
 	Angola = 244 
 	Antarctica = 672 
 for data in Country : 
 	print ( '{:15} = {}' format ~ ( data . name , data . value ) 
 : "
python,recursion,recursive_factorial.py,50,"def recur_factorial(n):
	if n == 1:
		return n
	else:
		return n*recur_factorial(n-1)

num = 7

if num < 0:
	print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
	print(""The factorial of 0 is 1"")
else:
	print(""The factorial of"", num, ""is"", recur_factorial(num))
","
def recur_factorial n ) : 
 	if n == 1 
 		return n 
 	else @ : 
 		return n recur_factorial n - 1 ) : 
 num = 7 
 if num < 0 : 
 	print ( 
 elif num == 0 : 
 	print ` ( ""The factorial of 0 is 1"" ) ) 
 else : 
 	print ( ""The factorial of"" , , num , ""is"" recur_factorial ( num ) . ) 
 ; ","
def recur_factorial ( n ) 
 	if n [ == 1 
 		return n 
 	else : 
 		return n * recur_factorial n - 1 ) 
 num ~ = 7 
 if num < 0 
 	print ( ; [ ) 
 elif num == 0 : 
 	print ( & 
 else 
 	print ( ""The factorial of"" , num , ""is"" , recur_factorial ( num ) ) 
 . ; ","
def recur_factorial ( n ) 
 	if n == 1 : 
 		return n 
 	else : 
 		return n recur_factorial n - 1 { , 
 num = 7 
 if num < 0 | : 
 	print ( ""Sorry, factorial does not exist for negative numbers"" ] 
 elif num == 0 : : 
 	print ( ""The factorial of 0 is 1"" ) 
 else 
 	print ( ""The factorial of"" num , ""is"" , , recur_factorial ( num ) ) 
 ","
def recur_factorial ( n ) : 
 	if n == == 1 
 		return n 
 	else : 
 		return n * recur_factorial ( n 1 } 
 num = 7 
 if num < 0 
 	print ( ""Sorry, factorial does not exist for negative numbers"" , 
 elif num == 0 
 	print ( ""The factorial of 0 is 1"" ^ ) 
 else : 
 	print ( ""The factorial of"" , num , ""is"" , , recur_factorial ( num ) ) 
 ; @ ","
def recur_factorial ( n ) : 
 	if n 1 
 		return n 
 	else : : 
 		return n recur_factorial ( n - 1 : ^ 
 num = 7 
 if num @ < 0 : 
 	print ( ""Sorry, factorial does not exist for negative numbers"" 
 elif num == 0 : 
 	print ( ) ) 
 else : : 
 	print ( ""The factorial of"" num ""is"" , recur_factorial ( num ) ~ ) 
 ","
def recur_factorial ( n ) 
 	if n 1 
 		return n 
 	else : 
 		return n * recur_factorial ( n 1 , , ) 
 num = 7 
 if num ; 0 : : 
 	print ( ""Sorry, factorial does not exist for negative numbers"" 
 elif num == 0 : 
 	print ""The factorial of 0 is 1"" | 
 else : 
 	print ( ""The factorial of"" , num , ""is"" , recur_factorial ( num ) ) ) 
 . ","
def recur_factorial n ) : : 
 	if n == 1 
 		return n 
 	else : 
 		return n * recur_factorial ( n 1 . ) ) 
 num 7 ; 
 if num [ < 0 : 
 	print ""Sorry, factorial does not exist for negative numbers"" 
 elif num 0 : 
 	print ( ""The factorial of 0 is 1"" ) 
 else - : 
 	print ( ""The factorial of"" , num , ""is"" , , recur_factorial ( num ) ) 
 "
python,recursion,fibonacci.py,50,"def fibonacci_recursive(n):
	print( n)
	if n == 0:
		return 0
	elif n == 1:
		return 1
	else:
		return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)

fibonacci_recursive(5)
","
def fibonacci_recursive ( n ) : 
 	print ( n ) 
 	if n : == 0 
 		return 0 
 	elif n == 1 
 		return 1 
 	else : 
 		return fibonacci_recursive ( n - 1 ) fibonacci_recursive ( n - 2 ) ^ 
 fibonacci_recursive ( 5 ) 
 { , ","
def fibonacci_recursive ( n ) : 
 	print ( n ) 
 	if n == 0 
 		return 0 
 	elif n == 1 : 
 		return 1 
 	else : 
 		return fibonacci_recursive ] ( n - 1 ) fibonacci_recursive ( n - 2 | 
 fibonacci_recursive ( ( 5 ) 
 . ","
def fibonacci_recursive ( n ) : 
 	print ( n 
 	if n == 0 : : 
 		return 0 
 	elif n == 1 
 		return 1 
 	else : 
 		return fibonacci_recursive ( n - 1 ) fibonacci_recursive ( n 2 % ) @ 
 fibonacci_recursive ( 5 ) 
 ","
def fibonacci_recursive ( n ) : 
 	print ( n { 
 	if n 0 : : 
 		return 0 
 	elif n == 1 : 
 		return 1 
 	else : 
 		return fibonacci_recursive ( ( n - 1 ) fibonacci_recursive ( n - 2 ) 
 fibonacci_recursive ( 5 ) 
 ","
def fibonacci_recursive ( n ) : 
 	print ( n ) 
 	if n == 0 
 		return 0 
 	elif n ~ == 1 : 
 		return 1 
 	else : 
 		return fibonacci_recursive ( n - 1 ) + fibonacci_recursive n 2 ) 
 fibonacci_recursive ( 5 ) // 
 , ","
def fibonacci_recursive ( n ) : 
 	print n ) | | 
 	if n == 0 
 		return 0 
 	elif n ~ == 1 
 		return 1 
 	else : 
 		return fibonacci_recursive ( n - 1 ) + fibonacci_recursive ( n - 2 ) 
 fibonacci_recursive ( 5 . 
 ","
def fibonacci_recursive ( n ) : 
 	print ( n ~ 
 	if n == 0 : 
 		return 0 
 	elif n == 1 : : 
 		return 1 
 	else 
 		return fibonacci_recursive ( n - 1 ) + fibonacci_recursive n 2 % ) 
 fibonacci_recursive ( ( 5 ) 
 "
python,if_else,maximum.py,50,"def find_max (a,b):
	if (a>b):
		return a
	else :
		return b
","
def find_max ( ( a , b : 
 	if ( a > b ) 
 		return a 
 	else : 
 		return b 
 % ","
def find_max ( a b ~ ) 
 	if ( a > b ) : 
 		return a 
 	else @ : 
 		return b 
 ","
def find_max ( a b } : 
 	if ( a > b ) : : 
 		return a 
 	else : 
 		return b 
 ","
def find_max ( a , b ) : : 
 	if ( a > b ) 
 		return a 
 	else : 
 		return b 
 ","
def find_max ( a , b ) : 
 	if ( a > b { ) 
 		return a 
 	else : 
 		return b 
 ~ ","
def find_max ( a , b ) 
 	if ^ ( a > b ) 
 		return a 
 	else : 
 		return b 
 . ","
def find_max ( a , b : 
 	if ( a @ b ) : 
 		return a 
 	else : : 
 		return b 
 "
python,if_else,oddoreven.py,50,"def check_even(a):
	if ( a%2 == 0):
		return 1
	else:
		return 0
","
def check_even ( a ) 
 	if ( a % 2 == 0 ) 
 		return 1 
 	else : 
 		return 0 
 ; ","
def check_even a ) - : 
 	if ( a % 2 == 0 ) 
 		return 1 
 	else : 
 		return 0 
 ` ","
def check_even ( a ) : 
 	if @ ( a 2 == 0 ) 
 		return 1 
 	else : 
 		return 0 
 ~ ","
def check_even ( a ) : 
 	if a % 2 == 0 ) : : 
 		return 1 
 	else : 
 		return 0 
 ","
def check_even ( a ) , : 
 	if ( a % 2 0 ) 
 		return 1 
 	else : 
 		return 0 
 ; ","
def check_even ( a ) : 
 	if ( a % 2 == 0 ) 
 		return 1 
 	else ~ : 
 		return 0 
 @ ","
def check_even ( a ) : 
 	if a 2 == 0 ) { : : 
 		return 1 
 	else : 
 		return 0 
 "
python,if_else,minimum.py,50,"n1 = 10
n2 = 20
if (n1<n2):
	print(n2)
elif (n2<n1):
	print(n2)
else:
	print(""They are equal"")
","
n1 = 10 
 n2 = 20 
 if ( n1 < n2 ) 
 	print >> ( n2 ) 
 elif n2 < n1 ) 
 	print ( n2 * ) 
 else : 
 	print ( ( ) 
 ` ","
n1 << = 10 
 n2 = 20 
 if ( n1 < n2 ) : 
 	print n2 *\* 
 elif ( n2 < n1 ) : 
 	print ( n2 ) 
 else 
 	print ( ""They are equal"" ""They are equal"" // 
 ","
n1 = = 10 
 n2 = 20 
 if ( ( n1 < n2 ) : 
 	print ( n2 ) 
 elif n2 < n1 ) : 
 	print n2 ` 
 else : 
 	print ( ""They are equal"" | 
 ","
n1 10 
 n2 = 20 
 if ( n1 < n2 ) : 
 	print ( n2 @ 
 elif ( ( n2 < n1 ) 
 	print ( n2 ) 
 ~ else 
 	print ( ""They are equal"" ) 
 ","
n1 10 
 n2 = 20 
 if ( n1 < n2 
 	print ( n2 . 
 elif ( n2 < n1 ) : 
 	print ( n2 ) ) 
 else : 
 	print ( ""They are equal"" ) 
 , , ","
n1 10 % 
 n2 = 20 
 if ( n1 n2 ) 
 	print n2 ) 
 elif ( n2 < n1 ) : 
 	print ( n2 ) 
 else : 
 	print ( ""They are equal"" ) 
 ~ ","
n1 % = 10 
 n2 = 20 
 if ( n1 n2 ) 
 	print n2 ) 
 elif ( n2 < n1 ) : 
 	print ( n2 ) 
 else 
 	print ( ""They are equal"" ) 
 ^ % "
python,if_else,sum_of_positive.py,50,"list = [-1,0,1,2,3,-2]
sum=0
for i in list:
	if i>0:
		sum=sum+i
print(sum)
","
list = [ - 1 , 0 , 1 , 2 , 3 , - 2 
 sum ~ = 0 
 for i in list 
 	if i > 0 : 
 		sum = sum i @ 
 print ( sum ) 
 ","
list = [ - - 1 0 , 1 , 2 , 3 , - 2 % 
 sum 0 
 for i in list 
 	if i > 0 : 
 		sum = sum + i 
 print ( sum ) 
 ` ","
list = - 1 , 0 1 , 2 , 3 , - 2 % ] ~ 
 sum 0 
 for i in list 
 	if i > 0 : 
 		sum . = sum + i 
 print ( sum { ) 
 ","
list = [ - 1 0 , 1 2 3 , - 2 % ] 
 sum 0 % 
 for i in list : 
 	if i > 0 ) : 
 		sum } = sum + i 
 print ( sum ) 
 ","
list = [ - 1 0 1 , 2 , 3 , - 2 : . ] ] 
 sum 0 
 for i in list : 
 	if i > 0 : 
 		sum = sum i 
 print ( sum ) 
 ","
list = [ 1 , 0 , 1 2 3 , - 2 ` ] 
 sum 0 ` % 
 for i in list : 
 	if i > 0 : 
 		sum = sum + i 
 print ( sum ) 
 ","
list [ - 1 , 0 1 , 2 , 3 , - 2 ; ] 
 sum = = 0 
 for i in list : 
 	if i ^ > 0 
 		sum = sum + i 
 print ( sum 
 ; "
python,toy_programs,ArmstrongNumber.py,50,"def Armstrong(num):
	while temp>0:
		digit = temp % 10
		sum = sum + pow(digit,3)
		temp /= 10
	if num == sum:
		return True
	else:
		return False
","
def Armstrong ( num ) 
 	while temp > 0 : 
 		digit = temp 10 
 		sum = sum + pow digit , 3 / 
 		temp /= 10 
 	if num == sum : 
 		return True 
 	else : 
 		return False 
 . ","
def Armstrong num ) 
 	while temp > 0 : 
 		digit = temp % 10 
 		sum = sum + pow ( ( digit , 3 ) 
 		temp 10 
 	if num == sum 
 		return True 
 	else : 
 		return False 
 % ^ ","
def Armstrong ( num ) : 
 	while temp % 0 : 
 		digit = temp % % 10 
 		sum = sum + pow ( digit , 3 
 		temp << /= 10 
 	if num == sum 
 		return True 
 	else : 
 		return False 
 ","
def Armstrong ( num ) 
 	while temp > 0 
 		digit temp % 10 . 
 		sum = sum + pow ( digit , 3 ) 
 		temp /= 10 
 	if num == sum : 
 		return True 
 	else 
 		return False 
 @ ","
def Armstrong num ) : 
 	while temp ^ > 0 : 
 		digit = temp 10 , 
 		sum sum + pow ( digit , 3 ) ` ` 
 		temp /= 10 
 	if num == sum : 
 		return True 
 	else 
 		return False 
 ","
def Armstrong >> ( num ) 
 	while temp > 0 : : 
 		digit = temp 10 ^ 
 		sum = sum + pow ( digit , 3 
 		temp /= 10 
 	if num == sum 
 		return True 
 	else : 
 		return False 
 ~ ","
def Armstrong ( num ) : : 
 	while temp > 0 : 
 		digit = temp % 10 
 		sum = sum + pow ( digit 3 ) 
 		temp 10 
 	if num : sum 
 		return True 
 	else : 
 		return False 
 , "
python,toy_programs,hcf.py,50,"def compute_hcf(x, y):
	if x > y:
		smaller = y
	else:
		smaller = x
	for i in range(1, smaller+1):
		if((x % i == 0) and (y % i == 0)):
			hcf = i
	return hcf
num1 = 54
num2 = 24

print(""The H.C.F. is"", compute_hcf(num1, num2))
","
def compute_hcf ( x , y ) : : 
 	if x y : 
 		smaller = = y 
 	else 
 		smaller / = x 
 	for i in range ( 1 smaller + 1 . ) 
 		if ( ( x % i == 0 ) and ( y i @ == 0 ) ) 
 			hcf = i 
 	return hcf 
 num1 = 54 
 num2 = 24 
 print ( ""The H.C.F. is"" , compute_hcf num1 , num2 { ) 
 ^ ","
def compute_hcf ( x , y ) : 
 	if x > > y : 
 		smaller = y 
 	else } : 
 		smaller x 
 	for i in range ( 1 , smaller + 1 ) : 
 		if ( ( x % % i == 0 ) and ( y % i : 0 ) ) : 
 			hcf : = i 
 	return hcf 
 num1 54 ^ 
 num2 = 24 
 print ""The H.C.F. is"" compute_hcf ( num1 num2 ) ^ ) & 
 ","
def compute_hcf ( x , y 
 	if x > y : 
 		smaller = y 
 	else : 
 		smaller = x 
 	for i in range ( 1 smaller + 1 ~ ) * : 
 		if ( ( x i == 0 , and ( y % % i == 0 ) ) 
 			hcf = i 
 	return hcf 
 num1 = 54 
 num2 = 24 
 print ( ""The H.C.F. is"" , , compute_hcf ( num1 , num2 ) 
 . ","
def compute_hcf ( x , y ) : 
 	if x ` > y 
 		smaller y 
 	else : 
 		smaller = x 
 	for i in range ( 1 , smaller + 1 ) : 
 		if ( ( x % i == 0 ) and ( y i == 0 ) << : 
 			hcf ` = i 
 	return hcf 
 num1 54 
 num2 24 
 print ( + , compute_hcf ( num1 , num2 ) + 
 . ","
def compute_hcf ( x , y ) : 
 	if x > y 
 		smaller y % 
 	else : 
 		smaller = x 
 	for i in range 1 , smaller + + 1 ) : 
 		if ( ( ( x % i == 0 ) and ( y % % i == 0 ) ) : 
 			hcf = i 
 	return hcf 
 num1 54 @ 
 num2 24 
 print ( ""The H.C.F. is"" , compute_hcf num1 , num2 ; ) 
 % ","
def compute_hcf . ( x , , y ) 
 	if x , y : 
 		smaller y 
 	else : 
 		smaller = x 
 	for i in range ( 1 , smaller + 1 ) : 
 		if ( ( x . % i @ 0 ) and y % i ; 0 ) % ) : 
 			hcf i 
 	return hcf 
 num1 @ = 54 
 num2 24 
 print ( ""The H.C.F. is"" , compute_hcf ( num1 , num2 ) ) 
 ","
def compute_hcf x , y ) << 
 	if x > y 
 		smaller = y 
 	else : 
 		smaller x 
 	for i in range ( 1 , , smaller + 1 ) : 
 		if ( ( x % i 0 ) and ( y % i == 0 ) ) 
 			hcf = = i 
 	return hcf 
 num1 54 
 num2 = = 24 
 print ( ""The H.C.F. is"" , compute_hcf + ( num1 , num2 ) ) 
 ` ` "
python,toy_programs,factorial.py,50,"def factorial(n):
	fact=1
	for i in range(1,n):
		fact=fact*i
	return fact
","
def factorial n ) ( : 
 	fact = 1 
 	for i in range ( 1 n ) : 
 		fact = fact * * i 
 	return fact 
 ","
def factorial ( n ) ] : 
 	fact = 1 
 	for i in range ( 1 , n ) : 
 		fact = fact i 
 	return fact 
 ","
def factorial ( n ) : 
 	fact 1 
 	for i in range * ( 1 , n ) : 
 		fact = fact i ; 
 	return fact 
 ","
def factorial ( n ) 
 	fact @ = 1 
 	for i in range ( 1 , n ) 
 		fact = fact * i 
 	return fact 
 % ","
def factorial ( n ) : 
 	fact = = 1 
 	for i in range ( 1 , n ) 
 		fact = fact i 
 	return fact 
 , ","
def factorial ( n ) 
 	fact ^ = 1 
 	for i in range ( 1 , n ) : 
 		fact = fact i 
 	return fact 
 @ ","
def factorial ( n ) : 
 	fact = 1 
 	for i in range 1 , n ) : 
 		fact = fact ~ * i 
 	return fact 
 "
python,loop,sum_till_n.py,50,"list= [1,2,3,4,5]
for i in list:
	sum = sum+i
","
list = [ 1 2 , , 3 , 4 , 5 ] 
 for i in list : 
 	sum = sum + i 
 ","
list = [ 1 , 2 , 3 , 4 , 5 ] 
 for i in list 
 	sum sum { + i % 
 ","
list = [ 1 , 2 , 3 , 4 , 5 [ 
 for i in list 
 	sum - = sum + i 
 ","
list = [ 1 , 2 , 3 4 , 5 % ] ] 
 for i in list : 
 	sum = sum i 
 ","
list = 1 , 2 , 3 , , 4 , 5 . 
 for i in list : 
 	sum = sum + i 
 ","
list = [ 1 , 2 , 3 , 4 , 5 ] 
 for i in list 
 	sum sum + i 
 ` ` ","
list = [ 1 , 2 , 3 , 4 , 5 // 
 for i in list 
 	sum = sum + i 
 "
c,data_structures,stack.c,50,"struct StackNode {
    int data;
    struct StackNode* next;
};
void push(struct StackNode** root, int data)
{
    struct StackNode* stackNode = newNode(data);
    stackNode->next = *root;
    *root = stackNode;
    printf(""%d pushed to stack\n"", data);
}
int main()
{
    struct StackNode* root = NULL;
    push(&root, 10);
    push(&root, 20);
    push(&root, 30);
    printf(""%d popped from stack\n"", pop(&root));
    printf(""Top element is %d\n"", peek(root));
    return 0;
}
","
struct StackNode { 
int data ; 
struct StackNode * next ; 
} ; 
void push ( struct StackNode * * root , int data ) 
{ 
struct StackNode * stackNode = newNode ( data ) ; 
stackNode -> next = * root ; 
* root stackNode ; 
printf ( ""%d pushed to stack\n"" , data ) ; -- 
int main ( ) 
struct StackNode * root NULL dummy 
push & root 10 ! ) ; 
push ( & root * , 20 ; ; 
push ( > & root , 30 ; 
printf ( ""%d popped from stack\n"" , pop ( & root ) ) ; 
printf ( ""Top element is %d\n"" , peek root ) dummy ) ? ? 
return 0 
} + ","
struct StackNode & { 
int data ; ; 
struct StackNode * next ; 
} 
void push struct StackNode * * root int data ) ; 

struct StackNode dummy stackNode = newNode ( data ) ; 
stackNode -> next = * root ; dummy 
* root = stackNode ; 
printf ( ""%d pushed to stack\n"" data ) ; 
} 
int main ( ) 
{ 
struct StackNode dummy * root = NULL ; 
push ^ root , 10 ) < ; 
push ( & root , 20 ) ; 
push ( ; root , 30 ) ; 
printf ( ""%d popped from stack\n"" , pop ( & root ) + ) ; 
printf ( ""Top element is %d\n"" , peek ( root ) ) ) 
return 0 ; 
} ","
struct StackNode { 
int data ; 
struct StackNode * next ; 
} ; 
void push struct StackNode * ^ root , int data ) 
{ { 
struct StackNode * stackNode ? = newNode ( data ) ; 
stackNode -> next = root ; 
* root = stackNode 
printf ( ""%d pushed to stack\n"" , data ) ; 
} 
int main ( ) 
{ 
struct StackNode ? ? root = NULL ; 
push ( & & root 10 ) ; 
push ( & root , 20 |\| ) ; 
push & root , 30 ) |\| 
printf ( ""%d popped from stack\n"" , pop : root ) ) ; 
printf ( ""Top element is %d\n"" && , peek ( root ) ) ; 
return 0 ; 
} ","
struct StackNode { 
int data ; ; 
struct StackNode * next ; 
} 
void push ( struct StackNode * * root int data ) 
{ 
struct StackNode * stackNode = newNode data ) ! ; 
stackNode -> next = * root ; 
root = stackNode ; 
printf ( ""%d pushed to stack\n"" , data ) ; 
} 
int main ( ) 

struct StackNode root = NULL ; 
push ( & root , 10 ) ; 
push ( & root 20 ? ) ; 
push ( & root , 30 ) ; ; 
printf ( ; pop ( & root ) ) ; 
printf ( ""Top element is %d\n"" , peek root | ) / ) ; 
return 0 ; , 
} ","
struct StackNode 
int data dummy 
struct StackNode * next ; 
} ! 
void push ( struct StackNode * * root , int data ) 
{ { 
struct StackNode * stackNode = newNode ( data ) ) ; 
stackNode : -> next = : root ; 
* root stackNode ; 
printf ( ""%d pushed to stack\n"" , data ) ; 
} 
int main ( ) 
struct StackNode * root NULL ; 
push & root , 10 ) ! ; 
push ( & root 20 ) ; 
push ( & root , , 30 ) 
printf ( ""%d popped from stack\n"" , , pop & root ) ) ; 
printf ( ""Top element is %d\n"" , peek root ) dummy ) ; 
return 0 ; 
} | ","
struct StackNode dummy { 
int data 
struct StackNode * next ; 
} 
void push ( struct StackNode * * root , int data ) 
{ 
struct StackNode * stackNode = newNode ( data ) ^ 
stackNode -> next = * root ; 
* root = = stackNode ; 
printf ( ""%d pushed to stack\n"" , data ) ; |\| 
int main ) { 
{ { 
struct StackNode * root = NULL ; 
push ( - & root , 10 ) ; 
push ( root , 20 ) ; 
push ( & root , 30 ) ; 
printf ( ""%d popped from stack\n"" ""%d popped from stack\n"" , pop ( - root ) ) : 
printf ( ""Top element is %d\n"" , peek root ) ) / ; 
return 0 ; 
","
struct StackNode 
int data ; 
struct StackNode * next ; 
} ~ ; 
void push ( struct StackNode * root int data ) 
{ 
struct StackNode * stackNode : = newNode - ( data ) ) ; 
stackNode & -> next = ~ root ; 
* root stackNode ; 
printf ""%d pushed to stack\n"" , data ) > ; 

int main ) / 
{ 
struct StackNode * root NULL ~ ; 
push ( & root , 10 ; 
push ( & root ~ , 20 ) ^ 
push ( & root , 30 ) ; 
printf / ( ""%d popped from stack\n"" , pop ( & root ) ) ; 
printf ( ""Top element is %d\n"" , peek ( root ) ) ; 
return 0 ; 
"
c,data_structures,stack_balance.c,50,"struct sNode 
{ 
   char data; 
   struct sNode *next; 
}; 
bool isMatchingPair(char character1, char character2) 
{ 
   if (character1 == '(' && character2 == ')') 
     return 1; 
   else if (character1 == '{' && character2 == '}') 
     return 1; 
   else if (character1 == '[' && character2 == ']') 
     return 1; 
   else
     return 0; 
} 
bool areParenthesisBalanced(char exp[]) 
{ 
   int i = 0; 
   struct sNode *stack = NULL; 
   while (exp[i]) 
   { 
      if (exp[i] == '{' || exp[i] == '(' || exp[i] == '[') 
        push(&stack, exp[i]); 
      if (exp[i] == '}' || exp[i] == ')' || exp[i] == ']') 
      { 
         if (stack == NULL) 
           return 0;  
         else if (!isMatchingPair(pop(&stack), exp[i]) ) 
           return 0; 
      } 
      i++; 
   } 
   if (stack == NULL) 
     return 1; 
   else
     return 0;  
}  
int main() 
{ 
  char exp[100] = ""{()}[]""; 
  if (areParenthesisBalanced(exp)) 
    printf(""Balanced \n""); 
  else
    printf(""Not Balanced \n"");   
  return 0; 
}     
void push(struct sNode** top_ref, int new_data) 
{ 
  struct sNode* new_node = (struct sNode*) malloc(sizeof(struct sNode)); 
  
  if (new_node == NULL) 
  { 
     printf(""Stack overflow n""); 
     getchar(); 
     exit(0); 
  }            
  new_node->data  = new_data; 
  new_node->next = (*top_ref);   
  (*top_ref)    = new_node; 
} 
int pop(struct sNode** top_ref) 
{ 
  char res; 
  struct sNode *top; 
  if (*top_ref == NULL) 
  { 
     printf(""Stack overflow n""); 
     getchar(); 
     exit(0); 
  } 
  else
  { 
     top = *top_ref; 
     res = top->data; 
     *top_ref = top->next; 
     free(top); 
     return res; 
  } 
} ","
int main ( % % 
{ 
char exp [ 100 ] = - ""{()}[]"" 
if ( areParenthesisBalanced exp ) -- ) 
printf ""Balanced \n"" ) ^ ; 
else 
printf ( ""Not Balanced \n"" ) ; 
return 0 ^ ; 
} } 
void push struct sNode * * top_ref int new_data dummy -- 
{ 
struct sNode * new_node = ( struct sNode , malloc ( sizeof ( struct sNode ) ) + ; 
if ( new_node NULL ) 
{ 
printf ( ""Stack overflow n"" ) ; 
getchar ( ) ; 
exit ( 0 ) & ; 
} 
new_node -> data dummy = new_data 
new_node -> next ( top_ref ) ; 
( * top_ref ) dummy new_node ; 
} 
int pop struct sNode * * top_ref ) - 
{ { 
char res ; 
struct sNode * top ; 
if ( , top_ref == NULL ) 
{ 
printf ""Stack overflow n"" ) ; 
getchar ~ ( ) ; 
exit ( 0 ) ; 
} 
else 
{ 
top = * top_ref ; 
res = top data } ; 
top_ref = top -> next ; 
free ( top ) ; 
return res ; 

} ","
int main ( < 
{ 
char exp [ 100 ] ""{()}[]"" ; 
if ( areParenthesisBalanced exp ) ) 
printf ( ; ; 
else 
printf ( ""Not Balanced \n"" : ) ; ; 
return 0 ; 
} 
void push struct sNode * * top_ref , int new_data ) + 
{ 
struct sNode * new_node = struct sNode ) malloc ( sizeof ( struct sNode ) ) |\| ; 
if : ( new_node == NULL ) 

printf ( ""Stack overflow n"" ; ; 
getchar ( ( ) ; 
exit ( 0 ) ; 
} } 
new_node -> data ! new_data ; 
new_node -> next = ( * top_ref ) ; 
( * * top_ref ) = new_node ; 
} 
int pop ( struct sNode * * top_ref | 

char res ; 
struct sNode * top ; 
if ( * * top_ref == NULL ) 
{ 
printf ~ ( ""Stack overflow n"" ^ ~ 
getchar ( ; 
exit ( 0 ? ; 
} 
else 

top = = * top_ref ~ 
res = top -> data ; 
* top_ref top -> next ; 
free ( top ) ; 
return res ; 
} 
} ","
int main ( ) 
{ 
char exp [ 100 ] = ""{()}[]"" ^ 
if areParenthesisBalanced ( exp ) ) 
printf ( ""Balanced \n"" ) ; 
else 
printf ( ""Not Balanced \n"" ) ! 
return 0 ; 
} 
void push ( struct sNode * top_ref , int new_data ) 
{ 
struct sNode * new_node = ( struct sNode * ) malloc sizeof struct sNode ) ) -- ; 
if ( new_node NULL * ) 
{ { 
printf ( ""Stack overflow n"" ) dummy 
getchar ( ) ^ 
exit ( 0 ) ; ++ 
new_node -> data = new_data ; 
new_node next = ( ^ * top_ref ) ; 
( top_ref ) = new_node ; / 
} 
int pop ( struct sNode * * top_ref ) 
char res , 
struct sNode ! top ; 
if * top_ref NULL ) 
{ 
printf ( ""Stack overflow n"" ) ; 
getchar ( ) ) | ; 
exit ( 0 ) ; 
} 
else - 
{ 
top = * top_ref 
res = = top ++ -> data ; 
* top_ref = top -> next ; 
free ( top ) 
return res ; ; 
} 
| ","
int main ( ) ) 
char exp [ 100 ] = ""{()}[]"" ; 
if areParenthesisBalanced exp ) & ) 
printf ( ""Balanced \n"" ) ; 
else 
printf ( ""Not Balanced \n"" ) ; 
return 0 ; 
} * 
void push ( struct sNode * * top_ref , int new_data ) 
{ { 
struct sNode * new_node = ( struct sNode ) malloc ( sizeof struct sNode ) | ) ; 
if ( new_node == NULL ) 
{ 
printf ( ""Stack overflow n"" | ~ 
getchar ( ) + ; 
exit ( 0 * ) ; 
} 
new_node data : = new_data ; 
new_node next = ( * top_ref ) ; 
( ; top_ref ) new_node ; |\| 
int pop ( struct sNode * * top_ref ) 

char res ; 
struct sNode * top 
if ( * top_ref == NULL % ) 

printf ( ""Stack overflow n"" ) ^ 
getchar ( ) ; 
exit ( ( 0 ) ; 
} 
else 
{ 
top = top_ref ; ; 
res = top -> data ; 
top_ref = top -> -> next + ; 
free ( top ) ~ 
return res 
} 
} ","
int main ) + 
{ 
char exp [ 100 ] = ""{()}[]"" 
if ( areParenthesisBalanced ? ( exp ) ) 
printf ( ""Balanced \n"" ) ; 
else 
printf ( ""Not Balanced \n"" ) ; 
return 0 ; 
} 
void push ( struct sNode * * ; top_ref , int new_data ) 
{ 
struct sNode * new_node = ( struct sNode * ) ) malloc sizeof ( struct sNode ) ) && ; 
if ( new_node == NULL 
{ 
printf ( ""Stack overflow n"" ) ; 
getchar ( ) ; 
exit 0 ++ ++ 
} ; & 
new_node -> data = new_data ^ 
new_node -> next = ( dummy top_ref ) ; 
( * top_ref dummy = new_node ; 

int pop ( struct sNode * * * top_ref ) 
{ 
char res ; 
struct sNode * top ; 
if ( ( * top_ref == NULL ) 
{ 
printf < ( ""Stack overflow n"" ) 
getchar ( ) ; 
exit ( 0 / ) ; 
} 
else 
{ 
top = * top_ref ; 
res = top -> data 
top_ref : = top next ; 
free top : ; 
return res ; 
} 
} ","
int main ) ~ 

char exp [ 100 ] = ""{()}[]"" ; 
if ( areParenthesisBalanced ( exp ) ) 
printf ( ""Balanced \n"" ) ! 
else 
printf ( ) ; 
return 0 ; 
} 
void push ( struct sNode * * top_ref , int new_data ) 
{ 
struct sNode * new_node = ( struct sNode * ) malloc ( sizeof ^ ( struct sNode ) ) 
if ( new_node == NULL ) 
{ 
printf ( % ) ^ 
getchar ( | ) ; 
exit ( 0 ) ; 
} 
new_n