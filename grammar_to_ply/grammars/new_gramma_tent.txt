reserved :=  void int float bool char double else if while do for auto break case char const continue default goto enum extern long register return short signed sizeof static struct typedef switch union unsigned volatile
eqoperator := t_EQUALS=\= 
symbol := t_COMMA=\, t_COLON=\: 
bracket := t_LPAREN=\( t_RPAREN=\) t_TAB=\t t_ELLIPSIS=\... t_SCOLON=\; t_IDENTIFIER=[a-zA-Z_][a-zA-Z0-9_]* t_NUMBER=\d+ 
arithoperator := t_PLUS=\+ t_MINUS=\- t_DIVIDES=\/ t_TIMES=\* t_MODULUS=\% 
booloperator := t_GT_OP=\> t_LT_OP=\< t_LSQUARE=\[ t_RSQUARE=\] t_LFPAREN=\{ t_RFPAREN=\} 
token := t_DOT=\. t_AMP=\& t_NOT=\! t_TER=\? t_TILDE=\~ t_XOR=\^ t_OR=\| t_QMARK=\? t_ALIGNAS=_Alignas t_ALIGNOF=_Alignof t_ATOMIC=_Atomic t_COMPLEX=_Complex t_GENERIC=_Generic t_IMAGINARY=_Imaginary t_NORETURN=_Noreturn t_STATIC_ASSERT=_Static_assert t_THREAD_LOCAL=_Thread_local t_FUNC_NAME=__func__ t_RIGHT_ASSIGN=\>>= t_LEFT_ASSIGN=\<<= t_ADD_ASSIGN=\+= t_SUB_ASSIGN=\-= t_MUL_ASSIGN=\*= t_DIV_ASSIGN=\/= t_MOD_ASSIGN=\%= t_AND_ASSIGN=\&= t_XOR_ASSIGN=\^= t_OR_ASSIGN=\|= t_RIGHT_OP=>> t_LEFT_OP=<< t_INC_OP=\++ t_DEC_OP=\-- t_PTR_OP=\-> t_AND_OP=\&& t_OR_OP=\|\| t_LE_OP=\<= t_GE_OP=\>= t_EQ_OP=\== t_NE_OP=\!=
t_NUMBER := \d+
t_IDENTIFIER := [a-zA-Z_][a-zA-Z0-9_]*
t_STRING_LITERAL := \"(\\.|[^"\\])*\"
t_I_CONSTANT := {(0[xX])}{[a-fA-F0-9]}+{(((u|U)(l|[a-zA-Z_]|ll|[a-zA-Z_][a-zA-Z_])?)|((l|[a-zA-Z_]|ll|[a-zA-Z_][a-zA-Z_])(u|U)?))}? | {[1-9]}{[0-9]}*{(((u|U)(l|[a-zA-Z_]|ll|[a-zA-Z_][a-zA-Z_])?)|((l|[a-zA-Z_]|ll|[a-zA-Z_][a-zA-Z_])(u|U)?))}? | "0"{[0-7]}*{(((u|U)(l|[a-zA-Z_]|ll|[a-zA-Z_][a-zA-Z_])?)|((l|[a-zA-Z_]|ll|[a-zA-Z_][a-zA-Z_])(u|U)?))}? | {(u|U|[a-zA-Z_])}?"\'"([^\'\\\n]|{(\\([\'"\?\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))})+"\'"
t_F_CONSTANT := {[0-9]}+{([Ee][+-]?{[0-9]}+)}{(f|F|l|[a-zA-Z_])}? | {[0-9]}*"."{[0-9]}+{([Ee][+-]?{[0-9]}+)}?{(f|F|l|[a-zA-Z_])}? | {[0-9]}+"."{([Ee][+-]?{[0-9]}+)}?{(f|F|l|[a-zA-Z_])}? | {(0[xX])}{[a-fA-F0-9]}+{([Pp][+-]?{[0-9]}+)}{(f|F|l|[a-zA-Z_])}? | {(0[xX])}{[a-fA-F0-9]}*"."{[a-fA-F0-9]}+{([Pp][+-]?{[0-9]}+)}{(f|F|l|[a-zA-Z_])}? | {(0[xX])}{[a-fA-F0-9]}+"."{([Pp][+-]?{[0-9]}+)}{(f|F|l|[a-zA-Z_])}?
start := translation_unit
translation_unit := external_declaration| translation_unit external_declaration
external_declaration := function_definition| declaration
function_definition := declaration_specifiers declarator declaration_list compound_statement| declaration_specifiers declarator compound_statement
declaration_list := declaration| declaration_list declaration
primary_expression:= IDENTIFIER| constant | string | LPAREN expression RPAREN| generic_selection | NUMBER
constant := I_CONSTANT | F_CONSTANT
enumeration_constant:= IDENTIFIER
string:= STRING_LITERAL| FUNC_NAME
generic_selection:= GENERIC LPAREN assignment_expression COMMA generic_assoc_list RPAREN
generic_assoc_list:= generic_association| generic_assoc_list COMMA generic_association
generic_association:= type_name COLON assignment_expression| DEFAULT COLON assignment_expression
postfix_expression:= primary_expression| postfix_expression RSQUARE expression LSQUARE| postfix_expression LPAREN RPAREN| postfix_expression LPAREN argument_expression_list RPAREN| postfix_expression DOT IDENTIFIER| postfix_expression PTR_OP IDENTIFIER| postfix_expression INC_OP| postfix_expression DEC_OP| LPAREN type_name RPAREN LFPAREN initializer_list RFPAREN LPAREN type_name RPAREN LFPAREN initializer_list COMMA RFPAREN
argument_expression_list:= assignment_expression| argument_expression_list COMMA assignment_expression
unary_expression:= postfix_expression| INC_OP unary_expression| DEC_OP unary_expression| unary_oper cast_expression| SIZEOF unary_expression| SIZEOF LPAREN type_name RPAREN| ALIGNOF LPAREN type_name RPAREN
unary_oper:= AMP| TIMES| PLUS| MINUS| TILDE| NOT
cast_expression:= unary_expression| LPAREN type_name RPAREN cast_expression
multiplicative_expression:= cast_expression| multiplicative_expression TIMES cast_expression| multiplicative_expression DIVIDES cast_expression| multiplicative_expression MODULUS cast_expression
additive_expression:= multiplicative_expression| additive_expression PLUS multiplicative_expression| additive_expression MINUS multiplicative_expression
shift_expression:= additive_expression| shift_expression LEFT_OP additive_expression| shift_expression RIGHT_OP additive_expression
relational_expression:= shift_expression| relational_expression LT_OP shift_expression| relational_expression GT_OP shift_expression| relational_expression LE_OP shift_expression| relational_expression GE_OP shift_expression
equality_expression:= relational_expression| equality_expression EQ_OP relational_expression| equality_expression NE_OP relational_expression
and_expression:= equality_expression| and_expression AMP equality_expression
exclusive_or_expression	:= and_expression| exclusive_or_expression XOR and_expression
inclusive_or_expression:= exclusive_or_expression| inclusive_or_expression OR exclusive_or_expression
logical_and_expression:= inclusive_or_expression| logical_and_expression AND_OP inclusive_or_expression
logical_or_expression:= logical_and_expression| logical_or_expression OR_OP logical_and_expression
conditional_expression:= logical_or_expression| logical_or_expression QMARK expression COLON conditional_expression
assignment_expression:= conditional_expression| unary_expression assignment_oper assignment_expression
assignment_oper:= EQUALS| MUL_ASSIGN| DIV_ASSIGN| MOD_ASSIGN| ADD_ASSIGN| SUB_ASSIGN| LEFT_ASSIGN| RIGHT_ASSIGN| AND_ASSIGN| XOR_ASSIGN| OR_ASSIGN
expression:= assignment_expression| expression COMMA assignment_expression
constant_expression:= conditional_expression	
declaration:= declaration_specifiers SCOLON| declaration_specifiers init_declarator_list SCOLON| static_assert_declaration 
declaration_specifiers:= storage_class_specifier declaration_specifiers| storage_class_specifier| type_specifier declaration_specifiers| type_specifier| type_qualifier declaration_specifiers| type_qualifier| function_specifier declaration_specifiers| function_specifier| alignment_specifier declaration_specifiers| alignment_specifier |
init_declarator_list:= init_declarator| init_declarator_list COMMA init_declarator
init_declarator:= declarator EQUALS initializer| declarator
storage_class_specifier:= TYPEDEF| EXTERN| STATIC| THREAD_LOCAL| AUTO| REGISTER
type_specifier:= VOID| CHAR| SHORT| INT| LONG| FLOAT| DOUBLE| SIGNED| UNSIGNED| BOOL| COMPLEX| IMAGINARY| atomic_type_specifier| struct_or_union_specifier| enum_specifier
struct_or_union_specifier:= struct_or_union LFPAREN struct_declaration_list RFPAREN| struct_or_union IDENTIFIER LFPAREN struct_declaration_list RFPAREN| struct_or_union IDENTIFIER
struct_or_union:= STRUCT| UNION
struct_declaration_list:= struct_declaration| struct_declaration_list struct_declaration
struct_declaration:= specifier_qualifier_list SCOLON| specifier_qualifier_list struct_declarator_list SCOLON| static_assert_declaration
specifier_qualifier_list:= type_specifier specifier_qualifier_list| type_specifier| type_qualifier specifier_qualifier_list| type_qualifier
struct_declarator_list:= struct_declarator| struct_declarator_list COMMA struct_declarator
struct_declarator:= COLON constant_expression| declarator COLON constant_expression| declarator
enum_specifier:= ENUM LFPAREN enumerator_list RFPAREN| ENUM LFPAREN enumerator_list COMMA RFPAREN| ENUM IDENTIFIER LFPAREN enumerator_list RFPAREN| ENUM IDENTIFIER LFPAREN enumerator_list COMMA RFPAREN| ENUM IDENTIFIER
enumerator_list:= enumerator| enumerator_list COMMA enumerator
enumerator	:= enumeration_constant EQUALS constant_expression| enumeration_constant
atomic_type_specifier:= ATOMIC LPAREN type_name RPAREN
type_qualifier:= CONST| VOLATILE| ATOMIC
function_specifier:=  NORETURN
alignment_specifier:= ALIGNAS LPAREN type_name RPAREN| ALIGNAS LPAREN constant_expression RPAREN
declarator:= pointer direct_declarator| direct_declarator
direct_declarator := IDENTIFIER | IDENTIFIER LSQUARE NUMBER RSQUARE | LPAREN declarator RPAREN | direct_declarator RSQUARE LSQUARE | direct_declarator RSQUARE TIMES LSQUARE | direct_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE | direct_declarator RSQUARE STATIC assignment_expression LSQUARE | direct_declarator RSQUARE type_qualifier_list TIMES LSQUARE| direct_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE | direct_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE | direct_declarator RSQUARE type_qualifier_list LSQUARE| direct_declarator RSQUARE assignment_expression LSQUARE | direct_declarator LPAREN parameter_type_list RPAREN | direct_declarator LPAREN RPAREN | direct_declarator LPAREN identifier_list RPAREN
pointer:= TIMES type_qualifier_list pointer| TIMES type_qualifier_list| TIMES pointer| TIMES
type_qualifier_list:= type_qualifier| type_qualifier_list type_qualifier
parameter_type_list:= parameter_list COMMA ELLIPSIS| parameter_list
parameter_list:= parameter_declaration| parameter_list COMMA parameter_declaration
parameter_declaration:= declaration_specifiers declarator| declaration_specifiers abstract_declarator| declaration_specifiers
identifier_list:= IDENTIFIER| identifier_list COMMA IDENTIFIER
type_name:= specifier_qualifier_list abstract_declarator| specifier_qualifier_list
abstract_declarator:= pointer direct_abstract_declarator| pointer| direct_abstract_declarator
direct_abstract_declarator:= LPAREN abstract_declarator RPAREN| RSQUARE LSQUARE| RSQUARE TIMES LSQUARE| RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE| RSQUARE STATIC assignment_expression LSQUARE| RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE| RSQUARE type_qualifier_list assignment_expression LSQUARE| RSQUARE type_qualifier_list LSQUARE | RSQUARE assignment_expression LSQUARE| direct_abstract_declarator RSQUARE LSQUARE| direct_abstract_declarator RSQUARE TIMES LSQUARE| direct_abstract_declarator RSQUARE STATIC type_qualifier_list assignment_expression LSQUARE| direct_abstract_declarator RSQUARE STATIC assignment_expression LSQUARE| direct_abstract_declarator RSQUARE type_qualifier_list assignment_expression LSQUARE| direct_abstract_declarator RSQUARE type_qualifier_list STATIC assignment_expression LSQUARE| direct_abstract_declarator RSQUARE type_qualifier_list LSQUARE| direct_abstract_declarator RSQUARE assignment_expression LSQUARE| LPAREN RPAREN| LPAREN parameter_type_list RPAREN| direct_abstract_declarator LPAREN RPAREN| direct_abstract_declarator LPAREN parameter_type_list RPAREN
initializer:= LFPAREN initializer_list RFPAREN| LFPAREN initializer_list COMMA RFPAREN| assignment_expression
initializer_list:= designation initializer| initializer| initializer_list COMMA designation initializer| initializer_list COMMA initializer
designation:= designator_list EQUALS
designator_list:= designator| designator_list designator
designator:= RSQUARE constant_expression LSQUARE| DOT IDENTIFIER
static_assert_declaration:= STATIC_ASSERT LPAREN constant_expression COMMA STRING_LITERAL RPAREN SCOLON
statement:= labeled_statement| compound_statement| expression_statement| selection_statement| iteration_statement| jump_statement
labeled_statement:= IDENTIFIER COLON statement| CASE constant_expression COLON statement | DEFAULT COLON statement
compound_statement:= LFPAREN RFPAREN| LFPAREN  block_item_list RFPAREN
block_item_list:= block_item| block_item_list block_item
block_item:= declaration| statement
expression_statement:= SCOLON| expression SCOLON
selection_statement:= IF LPAREN expression RPAREN statement ELSE statement| IF LPAREN expression RPAREN statement| SWITCH LPAREN expression RPAREN statement
iteration_statement:= WHILE LPAREN expression RPAREN statement| DO statement WHILE LPAREN expression RPAREN SCOLON| FOR LPAREN expression_statement expression_statement RPAREN statement| FOR LPAREN expression_statement expression_statement expression RPAREN statement| FOR LPAREN declaration expression_statement RPAREN statement| FOR LPAREN declaration expression_statement expression RPAREN statement
jump_statement:= GOTO IDENTIFIER SCOLON| CONTINUE SCOLON| BREAK SCOLON| RETURN SCOLON| RETURN expression SCOLON