reserved := and as assert break class continue def del elif else except exec finally for from global if import in is lambda not or pass print raise return try while with yield
tokens := t_EQEQUAL=\== t_NOTEQUAL=\!= t_LESSEQUAL=\<= t_LEFTSHIFT=\<< t_GREATEREQUAL=\>= t_RIGHTSHIFT=\>> t_PLUSEQUAL=\\+= t_MINEQUAL=\-= t_STAREQUAL=\\*= t_SLASHEQUAL=\/= t_PERCENTEQUAL=\%= t_STARSTAR=\*\* t_SLASHSLASH=\// t_STARSTAREQUAL=\*\*= t_SLASHSLASHEQUAL=\//= t_COLON=\: t_COMMA=\, t_SEMI=\; t_PLUS=\+ t_MINUS=\- t_STAR=\* t_SLASH=\/ t_VBAR=\| t_AMPER=\& t_LESS=\< t_GREATER=\> t_EQUAL=\= t_DOT=\. t_PERCENT=\% t_BACKQUOTE=\` t_CIRCUMFLEX=\^ t_TILDE=\~ t_AT=\@ t_LPAREN=\( t_RPAREN=\) t_LBRACE=\{ t_RBRACE=\} t_LSQB=\[ t_RSQB=\] t_continueLine=\\(\n)+ t_NEWLINE=\n+
t_NUMBER := \d+
t_TRIPLESTRING := "{3}([\s\S]*?"{3}) | \'{3}([\s\S]*?\'{3})
t_STRING := (\"(\\.|[^\"\n]|(\\\n))*\") | (\'(\\.|[^\'\n]|(\\\n))*\')
t_RAWSTRING := [rR](\"(\\.|[^\"\n]|(\\\n))*\") | [rR](\'(\\.|[^\'\n]|(\\\n))*\')
t_UNICODESTRING := [uU](\"(\\.|[^\"\n]|(\\\n))*\") | [uU](\'(\\.|[^\'\n]|(\\\n))*\')
t_BINARYNUMBER := 0[bB]([0-1]+)
t_OCTALNUMBER := 0[oO]([0-7]+)
t_HEXADECIMALNUMBER := 0[xX]([0-9a-fA-F]+)
t_NAME := [a-zA-Z_][a-zA-Z0-9_]*
start := file_input
file_input :=single_stmt 
single_stmt:=single_stmt NEWLINE | single_stmt stmt |
funcdef := DEF NAME parameters COLON suite
parameters := LPAREN varargslist RPAREN
varargslist := | fpdef EQUAL test fpdeflist COMMA | fpdef EQUAL test fpdeflist | fpdef fpdeflist COMMA | fpdef fpdeflist    
fpdeflist := | fpdeflist COMMA fpdef | fpdeflist COMMA fpdef EQUAL test
fpdef := NAME  | LPAREN fplist RPAREN
fplist := fpdef fplist1 COMMA | fpdef fplist1
fplist1 := | fplist1 COMMA fpdef
stmt := simple_stmt | compound_stmt
simple_stmt := small_stmts NEWLINE | small_stmts SEMI NEWLINE
small_stmts := small_stmts SEMI small_stmt | small_stmt
small_stmt := flow_stmt | expr_stmt | print_stmt | pass_stmt | import_stmt | global_stmt | assert_stmt
expr_stmt := testlist augassign testlist | testlist eqtestlist
eqtestlist := | eqtestlist EQUAL testlist
augassign := PLUSEQUAL  | MINEQUAL  | STAREQUAL  | SLASHEQUAL  | PERCENTEQUAL  | STARSTAREQUAL  | SLASHSLASHEQUAL 
print_stmt :=PRINT | PRINT testlist
pass_stmt := PASS
flow_stmt := break_stmt | continue_stmt | return_stmt
break_stmt := BREAK
continue_stmt := CONTINUE
return_stmt := RETURN  | RETURN testlist
import_stmt := IMPORT NAME | IMPORT NAME AS NAME
global_stmt := GLOBAL NAME namelist
namelist :=  | COMMA NAME namelist
assert_stmt := ASSERT testlist
compound_stmt := if_stmt | for_stmt | while_stmt | funcdef | classdef
if_stmt :=IF test COLON suite elif_list | IF test COLON suite elif_list ELSE COLON suite
elif_list := | ELIF test COLON suite elif_list
while_stmt :=WHILE test COLON suite  | WHILE test COLON suite ELSE COLON suite
for_stmt :=FOR exprlist IN testlist COLON suite | FOR exprlist IN testlist COLON suite ELSE COLON suite
suite := simple_stmt | NEWLINE stmts
test := or_test | or_test IF or_test ELSE test
or_test := and_test ortestlist
ortestlist := | OR and_test ortestlist
and_test := not_test andtestlist
andtestlist := | AND not_test andtestlist
not_test := NOT not_test | comparison
comparison := expr compexprlist
compexprlist := | comp_op expr compexprlist
comp_op := LESS | GREATER | EQEQUAL | GREATEREQUAL | LESSEQUAL | NOTEQUAL | IN | NOT IN | IS | IS NOT
expr := xor_expr xorexprlist
xorexprlist := | VBAR xor_expr xorexprlist
xor_expr := and_expr andexprlist
andexprlist := | CIRCUMFLEX and_expr andexprlist
and_expr := shift_expr shiftexprlist
shiftexprlist := | AMPER shift_expr shiftexprlist
shift_expr := arith_expr arithexprlist
arithexprlist := | LEFTSHIFT arith_expr arithexprlist | RIGHTSHIFT arith_expr arithexprlist
arith_expr :=term termlist
termlist := | PLUS term termlist | MINUS term termlist
term :=factor factorlist
factorlist := | STAR factor factorlist | SLASH factor factorlist | PERCENT factor factorlist | SLASHSLASH factor factorlist
factor := power | PLUS factor | MINUS factor | TILDE factor
power := atom trailerlist | atom trailerlist STARSTAR factor
trailerlist :=  | trailer trailerlist
atom := LPAREN RPAREN | LPAREN testlist_comp RPAREN | LSQB RSQB | LSQB listmaker RSQB | LBRACE RBRACE | LBRACE dictorsetmaker RBRACE | BACKQUOTE testlist1 BACKQUOTE | NAME | NUMBER | stringlist
stringlist := STRING  | STRING stringlist | TRIPLESTRING | TRIPLESTRING stringlist
listmaker := testlist
testlist_comp := testlist
trailer := LPAREN RPAREN | LPAREN arglist RPAREN | LSQB subscriptlist RSQB | DOT NAME
subscriptlist := subscript | subscript COMMA | subscript COMMA subscriptlist
subscript := DOT DOT DOT | test | test COLON test sliceop | COLON test sliceop | test COLON sliceop | test COLON test | test COLON | COLON test | COLON sliceop | COLON
sliceop := COLON | COLON test
exprlist := expr | expr COMMA | expr COMMA exprlist
testlist := test | test COMMA | test COMMA testlist
dictorsetmaker := testcolonlist | testlist
testcolonlist := test COLON test | test COLON test COMMA | test COLON test COMMA testcolonlist
classdef := CLASS NAME COLON suite | CLASS NAME LPAREN RPAREN COLON suite | CLASS NAME LPAREN testlist RPAREN COLON suite
arglist := argument | argument COMMA | argument COMMA arglist
argument := test | test EQUAL test
testlist1 := test | test COMMA testlist1
stmts := stmts stmt | stmt