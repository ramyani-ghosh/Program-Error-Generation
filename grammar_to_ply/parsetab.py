
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOL CHAR COLON COMMA DIVIDES DO ELSE EQUALEQUAL EQUALS FOR GREATEQ GREATERTHAN IF INT LESSEQ LESSTHAN LFPAREN LPAREN LSQUARE MINUS MODULUS NAME NUMBER PLUS RFPAREN RPAREN RSQUARE SCOLON STRING TAB TIMES VOID WHILEstart : declarationListdeclarationList : declaration \n\t| declarationList declarationdeclaration : varDeclaration \n\t| funcdefvarDeclaration : typeSpecifier NAME SCOLON \n\t| typeSpecifier NAME EQUALS NAME \n\t| typeSpecifier NAME EQUALS NUMBERtypeSpecifier : INT \n\t| BOOL \n\t| CHARfuncdef : VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN\n\t| INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPARENparameters : typeSpecifier NAME \n\t| typeSpecifier NAME COMMA parameters \n\t| emptyfuncbody : statement \n\t|  statement funcbody\n\t|  statement SCOLON funcbodyblockitemlist : blockitem\n\t| blockitemlist blockitemblockitem : statement\n\t| varDeclarationcstatement : LFPAREN RFPAREN\n\t| LFPAREN blockitemlist RFPARENstatement : cstatement\n\t| selectionStmt\n\t| iterationStmt\n\t| NAME SCOLON\n\t| NAME statement\n\t| varDeclaration statement\n\t| expressionStmt SCOLON statement\n\t| expressionStmt SCOLONexpressionStmt : NAME PLUS NAME\n\t|  NAME MINUS NAME\n\t| NAME TIMES NAME\n\t| NAME DIVIDES NAME\n\t| NAME EQUALS NAME\n\t| NAME GREATERTHAN NAME\n\t| NAME LESSTHAN NAME\n\t| NAME GREATEQ NAME\n\t| NAME LESSEQ NAME\n\t| NAME EQUALS expressionStmtselectionStmt : IF LPAREN simpleexpression RPAREN statement ELSE statement\n\t| IF LPAREN simpleexpression RPAREN statementiterationStmt : WHILE LPAREN simpleexpression RPAREN statement \n\t|  DO statement WHILE LPAREN simpleexpression RPAREN SCOLON\n\t| FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statementforcondition : NAME EQUALS NAME\n\t| NAME GREATERTHAN NAME\n\t| NAME LESSTHAN NAME\n\t| NAME GREATEQ NAME\n\t| NAME LESSEQ NAMEforchange : NAME PLUS PLUS\n\t| NAME MINUS MINUS\n\t| expressionStmtsimpleexpression : NAMEempty :'
    
_lr_action_items = {'VOID':([0,2,3,4,5,11,15,19,20,63,72,],[7,7,-2,-4,-5,-3,-6,-7,-8,-12,-13,]),'INT':([0,2,3,4,5,11,15,17,18,19,20,29,30,31,32,33,35,36,37,38,39,43,47,48,58,59,60,61,62,63,65,66,67,71,72,83,84,86,92,93,96,97,101,109,110,119,122,],[8,8,-2,-4,-5,-3,-6,24,24,-7,-8,24,24,24,24,24,24,-26,-27,-28,24,24,-29,-30,-24,24,-20,-22,24,-12,24,-31,24,24,-13,-25,-21,-32,24,24,-45,-46,24,-44,-47,24,-48,]),'BOOL':([0,2,3,4,5,11,15,17,18,19,20,29,30,31,32,33,35,36,37,38,39,43,47,48,58,59,60,61,62,63,65,66,67,71,72,83,84,86,92,93,96,97,101,109,110,119,122,],[9,9,-2,-4,-5,-3,-6,9,9,-7,-8,9,9,9,9,9,9,-26,-27,-28,9,9,-29,-30,-24,9,-20,-22,9,-12,9,-31,9,9,-13,-25,-21,-32,9,9,-45,-46,9,-44,-47,9,-48,]),'CHAR':([0,2,3,4,5,11,15,17,18,19,20,29,30,31,32,33,35,36,37,38,39,43,47,48,58,59,60,61,62,63,65,66,67,71,72,83,84,86,92,93,96,97,101,109,110,119,122,],[10,10,-2,-4,-5,-3,-6,10,10,-7,-8,10,10,10,10,10,10,-26,-27,-28,10,10,-29,-30,-24,10,-20,-22,10,-12,10,-31,10,10,-13,-25,-21,-32,10,10,-45,-46,10,-44,-47,10,-48,]),'$end':([1,2,3,4,5,11,15,19,20,63,72,],[0,-1,-2,-4,-5,-3,-6,-7,-8,-12,-13,]),'NAME':([6,7,8,9,10,15,16,19,20,22,24,29,31,32,33,35,36,37,38,39,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,65,66,67,68,69,83,84,86,92,93,94,95,96,97,101,103,104,105,106,107,108,109,110,119,120,121,122,],[12,13,14,-10,-11,-6,19,-7,-8,27,-9,32,32,32,32,32,-26,-27,-28,32,32,-29,-30,73,74,75,76,77,79,80,81,82,-24,32,-20,-22,32,32,-31,32,88,88,-25,-21,-32,32,32,88,100,-45,-46,32,112,114,115,116,117,118,-44,-47,32,73,74,-48,]),'SCOLON':([12,15,19,20,32,35,36,37,38,40,47,48,58,66,67,73,74,75,76,77,78,79,80,81,82,83,86,91,96,97,99,102,109,110,114,115,116,117,118,122,],[15,-6,-7,-8,47,65,-26,-27,-28,67,-29,-30,-24,-31,-33,-34,-35,-36,-37,-38,-43,-39,-40,-41,-42,-25,-32,95,-45,-46,103,110,-44,-47,-49,-50,-51,-52,-53,-48,]),'EQUALS':([12,32,77,100,112,],[16,53,53,104,53,]),'LPAREN':([13,14,41,42,44,90,],[17,18,68,69,71,94,]),'LFPAREN':([15,19,20,26,28,29,31,32,33,35,36,37,38,39,43,47,48,58,59,60,61,62,65,66,67,83,84,86,92,93,96,97,101,109,110,119,122,],[-6,-7,-8,29,31,33,33,33,33,33,-26,-27,-28,33,33,-29,-30,-24,33,-20,-22,33,33,-31,33,-25,-21,-32,33,33,-45,-46,33,-44,-47,33,-48,]),'IF':([15,19,20,29,31,32,33,35,36,37,38,39,43,47,48,58,59,60,61,62,65,66,67,83,84,86,92,93,96,97,101,109,110,119,122,],[-6,-7,-8,41,41,41,41,41,-26,-27,-28,41,41,-29,-30,-24,41,-20,-22,41,41,-31,41,-25,-21,-32,41,41,-45,-46,41,-44,-47,41,-48,]),'WHILE':([15,19,20,29,31,32,33,35,36,37,38,39,43,47,48,58,59,60,61,62,65,66,67,70,83,84,86,92,93,96,97,101,109,110,119,122,],[-6,-7,-8,42,42,42,42,42,-26,-27,-28,42,42,-29,-30,-24,42,-20,-22,42,42,-31,42,90,-25,-21,-32,42,42,-45,-46,42,-44,-47,42,-48,]),'DO':([15,19,20,29,31,32,33,35,36,37,38,39,43,47,48,58,59,60,61,62,65,66,67,83,84,86,92,93,96,97,101,109,110,119,122,],[-6,-7,-8,43,43,43,43,43,-26,-27,-28,43,43,-29,-30,-24,43,-20,-22,43,43,-31,43,-25,-21,-32,43,43,-45,-46,43,-44,-47,43,-48,]),'FOR':([15,19,20,29,31,32,33,35,36,37,38,39,43,47,48,58,59,60,61,62,65,66,67,83,84,86,92,93,96,97,101,109,110,119,122,],[-6,-7,-8,44,44,44,44,44,-26,-27,-28,44,44,-29,-30,-24,44,-20,-22,44,44,-31,44,-25,-21,-32,44,44,-45,-46,44,-44,-47,44,-48,]),'RFPAREN':([15,19,20,33,34,35,36,37,38,46,47,48,58,59,60,61,62,64,66,67,83,84,85,86,96,97,109,110,122,],[-6,-7,-8,58,63,-17,-26,-27,-28,72,-29,-30,-24,83,-20,-22,-23,-18,-31,-33,-25,-21,-19,-32,-45,-46,-44,-47,-48,]),'NUMBER':([16,],[20,]),'RPAREN':([17,18,21,23,25,27,30,45,73,74,75,76,77,78,79,80,81,82,87,88,89,98,111,113,123,124,],[-58,-58,26,-16,28,-14,-58,-15,-34,-35,-36,-37,-38,-43,-39,-40,-41,-42,92,-57,93,102,119,-56,-54,-55,]),'COMMA':([27,],[30,]),'PLUS':([32,77,112,120,],[49,49,120,123,]),'MINUS':([32,77,112,121,],[50,50,121,124,]),'TIMES':([32,77,112,],[51,51,51,]),'DIVIDES':([32,77,112,],[52,52,52,]),'GREATERTHAN':([32,77,100,112,],[54,54,105,54,]),'LESSTHAN':([32,77,100,112,],[55,55,106,55,]),'GREATEQ':([32,77,100,112,],[56,56,107,56,]),'LESSEQ':([32,77,100,112,],[57,57,108,57,]),'ELSE':([36,37,38,47,48,58,66,67,83,86,96,97,109,110,122,],[-26,-27,-28,-29,-30,-24,-31,-33,-25,-32,101,-46,-44,-47,-48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'declarationList':([0,],[2,]),'declaration':([0,2,],[3,11,]),'varDeclaration':([0,2,29,31,32,33,35,39,43,59,62,65,67,71,92,93,101,119,],[4,4,39,39,39,62,39,39,39,62,39,39,39,91,39,39,39,39,]),'funcdef':([0,2,],[5,5,]),'typeSpecifier':([0,2,17,18,29,30,31,32,33,35,39,43,59,62,65,67,71,92,93,101,119,],[6,6,22,22,6,22,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'parameters':([17,18,30,],[21,25,45,]),'empty':([17,18,30,],[23,23,23,]),'funcbody':([29,31,35,65,],[34,46,64,85,]),'statement':([29,31,32,33,35,39,43,59,62,65,67,92,93,101,119,],[35,35,48,61,35,66,70,61,66,35,86,96,97,109,122,]),'cstatement':([29,31,32,33,35,39,43,59,62,65,67,92,93,101,119,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'selectionStmt':([29,31,32,33,35,39,43,59,62,65,67,92,93,101,119,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'iterationStmt':([29,31,32,33,35,39,43,59,62,65,67,92,93,101,119,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'expressionStmt':([29,31,32,33,35,39,43,53,59,62,65,67,92,93,101,103,119,],[40,40,40,40,40,40,40,78,40,40,40,40,40,40,40,113,40,]),'blockitemlist':([33,],[59,]),'blockitem':([33,59,],[60,84,]),'simpleexpression':([68,69,94,],[87,89,98,]),'forcondition':([95,],[99,]),'forchange':([103,],[111,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> declarationList','start',1,'p_start','ply_program.py',148),
  ('declarationList -> declaration','declarationList',1,'p_declarationList','ply_program.py',153),
  ('declarationList -> declarationList declaration','declarationList',2,'p_declarationList','ply_program.py',154),
  ('declaration -> varDeclaration','declaration',1,'p_declaration','ply_program.py',159),
  ('declaration -> funcdef','declaration',1,'p_declaration','ply_program.py',160),
  ('varDeclaration -> typeSpecifier NAME SCOLON','varDeclaration',3,'p_varDeclaration','ply_program.py',165),
  ('varDeclaration -> typeSpecifier NAME EQUALS NAME','varDeclaration',4,'p_varDeclaration','ply_program.py',166),
  ('varDeclaration -> typeSpecifier NAME EQUALS NUMBER','varDeclaration',4,'p_varDeclaration','ply_program.py',167),
  ('typeSpecifier -> INT','typeSpecifier',1,'p_typeSpecifier','ply_program.py',172),
  ('typeSpecifier -> BOOL','typeSpecifier',1,'p_typeSpecifier','ply_program.py',173),
  ('typeSpecifier -> CHAR','typeSpecifier',1,'p_typeSpecifier','ply_program.py',174),
  ('funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN','funcdef',8,'p_funcdef','ply_program.py',179),
  ('funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN','funcdef',8,'p_funcdef','ply_program.py',180),
  ('parameters -> typeSpecifier NAME','parameters',2,'p_parameters','ply_program.py',185),
  ('parameters -> typeSpecifier NAME COMMA parameters','parameters',4,'p_parameters','ply_program.py',186),
  ('parameters -> empty','parameters',1,'p_parameters','ply_program.py',187),
  ('funcbody -> statement','funcbody',1,'p_funcbody','ply_program.py',192),
  ('funcbody -> statement funcbody','funcbody',2,'p_funcbody','ply_program.py',193),
  ('funcbody -> statement SCOLON funcbody','funcbody',3,'p_funcbody','ply_program.py',194),
  ('blockitemlist -> blockitem','blockitemlist',1,'p_blockitemlist','ply_program.py',199),
  ('blockitemlist -> blockitemlist blockitem','blockitemlist',2,'p_blockitemlist','ply_program.py',200),
  ('blockitem -> statement','blockitem',1,'p_blockitem','ply_program.py',205),
  ('blockitem -> varDeclaration','blockitem',1,'p_blockitem','ply_program.py',206),
  ('cstatement -> LFPAREN RFPAREN','cstatement',2,'p_cstatement','ply_program.py',211),
  ('cstatement -> LFPAREN blockitemlist RFPAREN','cstatement',3,'p_cstatement','ply_program.py',212),
  ('statement -> cstatement','statement',1,'p_statement','ply_program.py',217),
  ('statement -> selectionStmt','statement',1,'p_statement','ply_program.py',218),
  ('statement -> iterationStmt','statement',1,'p_statement','ply_program.py',219),
  ('statement -> NAME SCOLON','statement',2,'p_statement','ply_program.py',220),
  ('statement -> NAME statement','statement',2,'p_statement','ply_program.py',221),
  ('statement -> varDeclaration statement','statement',2,'p_statement','ply_program.py',222),
  ('statement -> expressionStmt SCOLON statement','statement',3,'p_statement','ply_program.py',223),
  ('statement -> expressionStmt SCOLON','statement',2,'p_statement','ply_program.py',224),
  ('expressionStmt -> NAME PLUS NAME','expressionStmt',3,'p_expressionStmt','ply_program.py',229),
  ('expressionStmt -> NAME MINUS NAME','expressionStmt',3,'p_expressionStmt','ply_program.py',230),
  ('expressionStmt -> NAME TIMES NAME','expressionStmt',3,'p_expressionStmt','ply_program.py',231),
  ('expressionStmt -> NAME DIVIDES NAME','expressionStmt',3,'p_expressionStmt','ply_program.py',232),
  ('expressionStmt -> NAME EQUALS NAME','expressionStmt',3,'p_expressionStmt','ply_program.py',233),
  ('expressionStmt -> NAME GREATERTHAN NAME','expressionStmt',3,'p_expressionStmt','ply_program.py',234),
  ('expressionStmt -> NAME LESSTHAN NAME','expressionStmt',3,'p_expressionStmt','ply_program.py',235),
  ('expressionStmt -> NAME GREATEQ NAME','expressionStmt',3,'p_expressionStmt','ply_program.py',236),
  ('expressionStmt -> NAME LESSEQ NAME','expressionStmt',3,'p_expressionStmt','ply_program.py',237),
  ('expressionStmt -> NAME EQUALS expressionStmt','expressionStmt',3,'p_expressionStmt','ply_program.py',238),
  ('selectionStmt -> IF LPAREN simpleexpression RPAREN statement ELSE statement','selectionStmt',7,'p_selectionStmt','ply_program.py',243),
  ('selectionStmt -> IF LPAREN simpleexpression RPAREN statement','selectionStmt',5,'p_selectionStmt','ply_program.py',244),
  ('iterationStmt -> WHILE LPAREN simpleexpression RPAREN statement','iterationStmt',5,'p_iterationStmt','ply_program.py',249),
  ('iterationStmt -> DO statement WHILE LPAREN simpleexpression RPAREN SCOLON','iterationStmt',7,'p_iterationStmt','ply_program.py',250),
  ('iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement','iterationStmt',9,'p_iterationStmt','ply_program.py',251),
  ('forcondition -> NAME EQUALS NAME','forcondition',3,'p_forcondition','ply_program.py',256),
  ('forcondition -> NAME GREATERTHAN NAME','forcondition',3,'p_forcondition','ply_program.py',257),
  ('forcondition -> NAME LESSTHAN NAME','forcondition',3,'p_forcondition','ply_program.py',258),
  ('forcondition -> NAME GREATEQ NAME','forcondition',3,'p_forcondition','ply_program.py',259),
  ('forcondition -> NAME LESSEQ NAME','forcondition',3,'p_forcondition','ply_program.py',260),
  ('forchange -> NAME PLUS PLUS','forchange',3,'p_forchange','ply_program.py',265),
  ('forchange -> NAME MINUS MINUS','forchange',3,'p_forchange','ply_program.py',266),
  ('forchange -> expressionStmt','forchange',1,'p_forchange','ply_program.py',267),
  ('simpleexpression -> NAME','simpleexpression',1,'p_simpleexpression','ply_program.py',272),
  ('empty -> <empty>','empty',0,'p_empty','ply_program.py',283),
]
