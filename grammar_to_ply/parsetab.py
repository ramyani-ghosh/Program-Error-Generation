
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'funcdefCOLON COMMA DEF LPAREN NAME RPAREN TABfuncdef : DEF NAME LPAREN parameters RPAREN COLON funcbodyparameters : NAME \n\t| NAME COMMA parameters \n\t| emptyfuncbody : TAB statement  \n\t|  TAB statement funcbodystatement : NAME   \n\t| NAME statementempty :'
    
_lr_action_items = {'DEF':([0,],[2,]),'$end':([1,12,14,15,16,17,],[0,-1,-5,-7,-6,-8,]),'NAME':([2,4,8,13,15,],[3,5,5,15,15,]),'LPAREN':([3,],[4,]),'RPAREN':([4,5,6,7,8,10,],[-9,-2,9,-4,-9,-3,]),'COMMA':([5,],[8,]),'COLON':([9,],[11,]),'TAB':([11,14,15,17,],[13,13,-7,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'funcdef':([0,],[1,]),'parameters':([4,8,],[6,10,]),'empty':([4,8,],[7,7,]),'funcbody':([11,14,],[12,16,]),'statement':([13,15,],[14,17,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> funcdef","S'",1,None,None,None),
  ('funcdef -> DEF NAME LPAREN parameters RPAREN COLON funcbody','funcdef',7,'p_funcdef','interpretgrammar.py',8),
  ('parameters -> NAME','parameters',1,'p_parameters','interpretgrammar.py',11),
  ('parameters -> NAME COMMA parameters','parameters',3,'p_parameters','interpretgrammar.py',12),
  ('parameters -> empty','parameters',1,'p_parameters','interpretgrammar.py',13),
  ('funcbody -> TAB statement','funcbody',2,'p_funcbody','interpretgrammar.py',16),
  ('funcbody -> TAB statement funcbody','funcbody',3,'p_funcbody','interpretgrammar.py',17),
  ('statement -> NAME','statement',1,'p_statement','interpretgrammar.py',20),
  ('statement -> NAME statement','statement',2,'p_statement','interpretgrammar.py',21),
  ('empty -> <empty>','empty',0,'p_empty','interpretgrammar.py',51),
]
