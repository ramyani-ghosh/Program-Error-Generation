
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOL CHAR COLON COMMA DIVIDES DO ELSE EQUALEQUAL EQUALS FLOAT FOR GREATEQ GREATERTHAN IF INT LESSEQ LESSTHAN LFPAREN LPAREN LSQUARE MINUS MODULUS NAME NUMBER PLUS RETURN RFPAREN RPAREN RSQUARE SCOLON STRING TAB TIMES VALUE VOID WHILEstart : declarationListdeclarationList : declaration \n\t| declarationList declarationdeclaration : varDeclaration \n\t| funcdefvarDeclaration : typeSpecifier NAME SCOLON \n\t| typeSpecifier NAME EQUALS NAME \n\t| typeSpecifier NAME EQUALS NUMBERtypeSpecifier : INT \n\t| BOOL \n\t| CHAR \n\t| FLOATfuncdef : VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN\n\t| INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPARENparameters : typeSpecifier NAME \n\t| typeSpecifier NAME COMMA parameters \n\t| emptyfuncbody : statement \n\t|  statement funcbody\n\t|  statement SCOLON funcbodyblockitemlist : blockitem\n\t| blockitemlist blockitemblockitem : statement\n\t| varDeclarationcstatement : LFPAREN RFPAREN\n\t| LFPAREN blockitemlist RFPARENstatement : cstatement\n\t| selectionStmt\n\t| iterationStmt\n\t| NAME SCOLON\n\t| NAME statement\n\t| varDeclaration statement\n\t| expressionStmt SCOLON statement\n\t| expressionStmt SCOLON \n\t| RETURN VALUE SCOLONexpressionStmt : expressionStmt PLUS VALUE\n\t|  expressionStmt MINUS VALUE\n\t| expressionStmt TIMES VALUE\n\t| expressionStmt DIVIDES VALUE\n\t| expressionStmt EQUALS VALUE\n\t| expressionStmt GREATERTHAN VALUE\n\t| expressionStmt LESSTHAN VALUE\n\t| expressionStmt GREATEQ VALUE\n\t| expressionStmt LESSEQ VALUE\n\t| expressionStmt EQUALEQUAL VALUE\n\t| expressionStmt MODULUS VALUE\n\t| VALUEselectionStmt : IF LPAREN expressionStmt RPAREN statement ELSE statement\n\t| IF LPAREN expressionStmt RPAREN statementiterationStmt : WHILE LPAREN expressionStmt RPAREN statement \n\t|  DO statement WHILE LPAREN expressionStmt RPAREN SCOLON\n\t| FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statementforcondition : NAME EQUALS NAME\n\t| NAME GREATERTHAN NAME\n\t| NAME LESSTHAN NAME\n\t| NAME GREATEQ NAME\n\t| NAME LESSEQ NAMEforchange : NAME PLUS PLUS\n\t| NAME MINUS MINUS\n\t| expressionStmtempty :'
    
_lr_action_items = {'VOID':([0,2,3,4,5,12,16,20,21,57,78,],[7,7,-2,-4,-5,-3,-6,-7,-8,-13,-14,]),'INT':([0,2,3,4,5,12,16,18,19,20,21,30,31,32,33,34,36,37,38,39,40,46,50,51,52,53,54,55,56,57,59,60,61,77,78,79,80,82,94,99,100,103,104,108,116,117,126,129,],[8,8,-2,-4,-5,-3,-6,25,25,-7,-8,25,25,25,25,25,25,-27,-28,-29,25,25,-30,-31,-25,25,-21,-23,25,-13,25,-32,25,25,-14,-26,-22,-33,-35,25,25,-49,-50,25,-48,-51,25,-52,]),'BOOL':([0,2,3,4,5,12,16,18,19,20,21,30,31,32,33,34,36,37,38,39,40,46,50,51,52,53,54,55,56,57,59,60,61,77,78,79,80,82,94,99,100,103,104,108,116,117,126,129,],[9,9,-2,-4,-5,-3,-6,9,9,-7,-8,9,9,9,9,9,9,-27,-28,-29,9,9,-30,-31,-25,9,-21,-23,9,-13,9,-32,9,9,-14,-26,-22,-33,-35,9,9,-49,-50,9,-48,-51,9,-52,]),'CHAR':([0,2,3,4,5,12,16,18,19,20,21,30,31,32,33,34,36,37,38,39,40,46,50,51,52,53,54,55,56,57,59,60,61,77,78,79,80,82,94,99,100,103,104,108,116,117,126,129,],[10,10,-2,-4,-5,-3,-6,10,10,-7,-8,10,10,10,10,10,10,-27,-28,-29,10,10,-30,-31,-25,10,-21,-23,10,-13,10,-32,10,10,-14,-26,-22,-33,-35,10,10,-49,-50,10,-48,-51,10,-52,]),'FLOAT':([0,2,3,4,5,12,16,18,19,20,21,30,31,32,33,34,36,37,38,39,40,46,50,51,52,53,54,55,56,57,59,60,61,77,78,79,80,82,94,99,100,103,104,108,116,117,126,129,],[11,11,-2,-4,-5,-3,-6,11,11,-7,-8,11,11,11,11,11,11,-27,-28,-29,11,11,-30,-31,-25,11,-21,-23,11,-13,11,-32,11,11,-14,-26,-22,-33,-35,11,11,-49,-50,11,-48,-51,11,-52,]),'$end':([1,2,3,4,5,12,16,20,21,57,78,],[0,-1,-2,-4,-5,-3,-6,-7,-8,-13,-14,]),'NAME':([6,7,8,9,10,11,16,17,20,21,23,25,30,32,33,34,36,37,38,39,40,46,50,51,52,53,54,55,56,59,60,61,79,80,82,94,99,100,102,103,104,108,110,111,112,113,114,115,116,117,126,129,],[13,14,15,-10,-11,-12,-6,20,-7,-8,28,-9,33,33,33,33,33,-27,-28,-29,33,33,-30,-31,-25,33,-21,-23,33,33,-32,33,-26,-22,-33,-35,33,33,107,-49,-50,33,119,121,122,123,124,125,-48,-51,33,-52,]),'SCOLON':([13,16,20,21,33,36,37,38,39,41,43,50,51,52,60,61,73,79,82,83,84,85,86,87,88,89,90,91,92,93,94,98,103,104,106,109,116,117,121,122,123,124,125,129,],[16,-6,-7,-8,50,59,-27,-28,-29,61,-47,-30,-31,-25,-32,-34,94,-26,-33,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-35,102,-49,-50,110,117,-48,-51,-53,-54,-55,-56,-57,-52,]),'EQUALS':([13,41,43,83,84,85,86,87,88,89,90,91,92,93,95,96,105,107,120,],[17,66,-47,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,66,66,66,111,66,]),'LPAREN':([14,15,44,45,47,97,],[18,19,74,75,77,101,]),'RETURN':([16,20,21,30,32,33,34,36,37,38,39,40,46,50,51,52,53,54,55,56,59,60,61,79,80,82,94,99,100,103,104,108,116,117,126,129,],[-6,-7,-8,42,42,42,42,42,-27,-28,-29,42,42,-30,-31,-25,42,-21,-23,42,42,-32,42,-26,-22,-33,-35,42,42,-49,-50,42,-48,-51,42,-52,]),'LFPAREN':([16,20,21,27,29,30,32,33,34,36,37,38,39,40,46,50,51,52,53,54,55,56,59,60,61,79,80,82,94,99,100,103,104,108,116,117,126,129,],[-6,-7,-8,30,32,34,34,34,34,34,-27,-28,-29,34,34,-30,-31,-25,34,-21,-23,34,34,-32,34,-26,-22,-33,-35,34,34,-49,-50,34,-48,-51,34,-52,]),'IF':([16,20,21,30,32,33,34,36,37,38,39,40,46,50,51,52,53,54,55,56,59,60,61,79,80,82,94,99,100,103,104,108,116,117,126,129,],[-6,-7,-8,44,44,44,44,44,-27,-28,-29,44,44,-30,-31,-25,44,-21,-23,44,44,-32,44,-26,-22,-33,-35,44,44,-49,-50,44,-48,-51,44,-52,]),'WHILE':([16,20,21,30,32,33,34,36,37,38,39,40,46,50,51,52,53,54,55,56,59,60,61,76,79,80,82,94,99,100,103,104,108,116,117,126,129,],[-6,-7,-8,45,45,45,45,45,-27,-28,-29,45,45,-30,-31,-25,45,-21,-23,45,45,-32,45,97,-26,-22,-33,-35,45,45,-49,-50,45,-48,-51,45,-52,]),'DO':([16,20,21,30,32,33,34,36,37,38,39,40,46,50,51,52,53,54,55,56,59,60,61,79,80,82,94,99,100,103,104,108,116,117,126,129,],[-6,-7,-8,46,46,46,46,46,-27,-28,-29,46,46,-30,-31,-25,46,-21,-23,46,46,-32,46,-26,-22,-33,-35,46,46,-49,-50,46,-48,-51,46,-52,]),'FOR':([16,20,21,30,32,33,34,36,37,38,39,40,46,50,51,52,53,54,55,56,59,60,61,79,80,82,94,99,100,103,104,108,116,117,126,129,],[-6,-7,-8,47,47,47,47,47,-27,-28,-29,47,47,-30,-31,-25,47,-21,-23,47,47,-32,47,-26,-22,-33,-35,47,47,-49,-50,47,-48,-51,47,-52,]),'VALUE':([16,20,21,30,32,33,34,36,37,38,39,40,42,46,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,79,80,82,94,99,100,101,103,104,108,110,116,117,126,129,],[-6,-7,-8,43,43,43,43,43,-27,-28,-29,43,73,43,-30,-31,-25,43,-21,-23,43,43,-32,43,83,84,85,86,87,88,89,90,91,92,93,43,43,-26,-22,-33,-35,43,43,43,-49,-50,43,43,-48,-51,43,-52,]),'RFPAREN':([16,20,21,34,35,36,37,38,39,49,50,51,52,53,54,55,56,58,60,61,79,80,81,82,94,103,104,116,117,129,],[-6,-7,-8,52,57,-18,-27,-28,-29,78,-30,-31,-25,79,-21,-23,-24,-19,-32,-34,-26,-22,-20,-33,-35,-49,-50,-48,-51,-52,]),'NUMBER':([17,],[21,]),'RPAREN':([18,19,22,24,26,28,31,43,48,83,84,85,86,87,88,89,90,91,92,93,95,96,105,118,120,130,131,],[-61,-61,27,-17,29,-15,-61,-47,-16,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,99,100,109,126,-60,-58,-59,]),'COMMA':([28,],[31,]),'ELSE':([37,38,39,50,51,52,60,61,79,82,94,103,104,116,117,129,],[-27,-28,-29,-30,-31,-25,-32,-34,-26,-33,-35,108,-50,-48,-51,-52,]),'PLUS':([41,43,83,84,85,86,87,88,89,90,91,92,93,95,96,105,119,120,127,],[62,-47,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,62,62,62,127,62,130,]),'MINUS':([41,43,83,84,85,86,87,88,89,90,91,92,93,95,96,105,119,120,128,],[63,-47,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,63,63,63,128,63,131,]),'TIMES':([41,43,83,84,85,86,87,88,89,90,91,92,93,95,96,105,120,],[64,-47,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,64,64,64,64,]),'DIVIDES':([41,43,83,84,85,86,87,88,89,90,91,92,93,95,96,105,120,],[65,-47,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,65,65,65,65,]),'GREATERTHAN':([41,43,83,84,85,86,87,88,89,90,91,92,93,95,96,105,107,120,],[67,-47,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,67,67,67,112,67,]),'LESSTHAN':([41,43,83,84,85,86,87,88,89,90,91,92,93,95,96,105,107,120,],[68,-47,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,68,68,68,113,68,]),'GREATEQ':([41,43,83,84,85,86,87,88,89,90,91,92,93,95,96,105,107,120,],[69,-47,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,69,69,69,114,69,]),'LESSEQ':([41,43,83,84,85,86,87,88,89,90,91,92,93,95,96,105,107,120,],[70,-47,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,70,70,70,115,70,]),'EQUALEQUAL':([41,43,83,84,85,86,87,88,89,90,91,92,93,95,96,105,120,],[71,-47,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,71,71,71,71,]),'MODULUS':([41,43,83,84,85,86,87,88,89,90,91,92,93,95,96,105,120,],[72,-47,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,72,72,72,72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'declarationList':([0,],[2,]),'declaration':([0,2,],[3,12,]),'varDeclaration':([0,2,30,32,33,34,36,40,46,53,56,59,61,77,99,100,108,126,],[4,4,40,40,40,56,40,40,40,56,40,40,40,98,40,40,40,40,]),'funcdef':([0,2,],[5,5,]),'typeSpecifier':([0,2,18,19,30,31,32,33,34,36,40,46,53,56,59,61,77,99,100,108,126,],[6,6,23,23,6,23,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'parameters':([18,19,31,],[22,26,48,]),'empty':([18,19,31,],[24,24,24,]),'funcbody':([30,32,36,59,],[35,49,58,81,]),'statement':([30,32,33,34,36,40,46,53,56,59,61,99,100,108,126,],[36,36,51,55,36,60,76,55,60,36,82,103,104,116,129,]),'cstatement':([30,32,33,34,36,40,46,53,56,59,61,99,100,108,126,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'selectionStmt':([30,32,33,34,36,40,46,53,56,59,61,99,100,108,126,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'iterationStmt':([30,32,33,34,36,40,46,53,56,59,61,99,100,108,126,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'expressionStmt':([30,32,33,34,36,40,46,53,56,59,61,74,75,99,100,101,108,110,126,],[41,41,41,41,41,41,41,41,41,41,41,95,96,41,41,105,41,120,41,]),'blockitemlist':([34,],[53,]),'blockitem':([34,53,],[54,80,]),'forcondition':([102,],[106,]),'forchange':([110,],[118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> declarationList','start',1,'p_start','ply_program.py',155),
  ('declarationList -> declaration','declarationList',1,'p_declarationList','ply_program.py',160),
  ('declarationList -> declarationList declaration','declarationList',2,'p_declarationList','ply_program.py',161),
  ('declaration -> varDeclaration','declaration',1,'p_declaration','ply_program.py',166),
  ('declaration -> funcdef','declaration',1,'p_declaration','ply_program.py',167),
  ('varDeclaration -> typeSpecifier NAME SCOLON','varDeclaration',3,'p_varDeclaration','ply_program.py',172),
  ('varDeclaration -> typeSpecifier NAME EQUALS NAME','varDeclaration',4,'p_varDeclaration','ply_program.py',173),
  ('varDeclaration -> typeSpecifier NAME EQUALS NUMBER','varDeclaration',4,'p_varDeclaration','ply_program.py',174),
  ('typeSpecifier -> INT','typeSpecifier',1,'p_typeSpecifier','ply_program.py',179),
  ('typeSpecifier -> BOOL','typeSpecifier',1,'p_typeSpecifier','ply_program.py',180),
  ('typeSpecifier -> CHAR','typeSpecifier',1,'p_typeSpecifier','ply_program.py',181),
  ('typeSpecifier -> FLOAT','typeSpecifier',1,'p_typeSpecifier','ply_program.py',182),
  ('funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN','funcdef',8,'p_funcdef','ply_program.py',187),
  ('funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN','funcdef',8,'p_funcdef','ply_program.py',188),
  ('parameters -> typeSpecifier NAME','parameters',2,'p_parameters','ply_program.py',193),
  ('parameters -> typeSpecifier NAME COMMA parameters','parameters',4,'p_parameters','ply_program.py',194),
  ('parameters -> empty','parameters',1,'p_parameters','ply_program.py',195),
  ('funcbody -> statement','funcbody',1,'p_funcbody','ply_program.py',200),
  ('funcbody -> statement funcbody','funcbody',2,'p_funcbody','ply_program.py',201),
  ('funcbody -> statement SCOLON funcbody','funcbody',3,'p_funcbody','ply_program.py',202),
  ('blockitemlist -> blockitem','blockitemlist',1,'p_blockitemlist','ply_program.py',207),
  ('blockitemlist -> blockitemlist blockitem','blockitemlist',2,'p_blockitemlist','ply_program.py',208),
  ('blockitem -> statement','blockitem',1,'p_blockitem','ply_program.py',213),
  ('blockitem -> varDeclaration','blockitem',1,'p_blockitem','ply_program.py',214),
  ('cstatement -> LFPAREN RFPAREN','cstatement',2,'p_cstatement','ply_program.py',219),
  ('cstatement -> LFPAREN blockitemlist RFPAREN','cstatement',3,'p_cstatement','ply_program.py',220),
  ('statement -> cstatement','statement',1,'p_statement','ply_program.py',225),
  ('statement -> selectionStmt','statement',1,'p_statement','ply_program.py',226),
  ('statement -> iterationStmt','statement',1,'p_statement','ply_program.py',227),
  ('statement -> NAME SCOLON','statement',2,'p_statement','ply_program.py',228),
  ('statement -> NAME statement','statement',2,'p_statement','ply_program.py',229),
  ('statement -> varDeclaration statement','statement',2,'p_statement','ply_program.py',230),
  ('statement -> expressionStmt SCOLON statement','statement',3,'p_statement','ply_program.py',231),
  ('statement -> expressionStmt SCOLON','statement',2,'p_statement','ply_program.py',232),
  ('statement -> RETURN VALUE SCOLON','statement',3,'p_statement','ply_program.py',233),
  ('expressionStmt -> expressionStmt PLUS VALUE','expressionStmt',3,'p_expressionStmt','ply_program.py',238),
  ('expressionStmt -> expressionStmt MINUS VALUE','expressionStmt',3,'p_expressionStmt','ply_program.py',239),
  ('expressionStmt -> expressionStmt TIMES VALUE','expressionStmt',3,'p_expressionStmt','ply_program.py',240),
  ('expressionStmt -> expressionStmt DIVIDES VALUE','expressionStmt',3,'p_expressionStmt','ply_program.py',241),
  ('expressionStmt -> expressionStmt EQUALS VALUE','expressionStmt',3,'p_expressionStmt','ply_program.py',242),
  ('expressionStmt -> expressionStmt GREATERTHAN VALUE','expressionStmt',3,'p_expressionStmt','ply_program.py',243),
  ('expressionStmt -> expressionStmt LESSTHAN VALUE','expressionStmt',3,'p_expressionStmt','ply_program.py',244),
  ('expressionStmt -> expressionStmt GREATEQ VALUE','expressionStmt',3,'p_expressionStmt','ply_program.py',245),
  ('expressionStmt -> expressionStmt LESSEQ VALUE','expressionStmt',3,'p_expressionStmt','ply_program.py',246),
  ('expressionStmt -> expressionStmt EQUALEQUAL VALUE','expressionStmt',3,'p_expressionStmt','ply_program.py',247),
  ('expressionStmt -> expressionStmt MODULUS VALUE','expressionStmt',3,'p_expressionStmt','ply_program.py',248),
  ('expressionStmt -> VALUE','expressionStmt',1,'p_expressionStmt','ply_program.py',249),
  ('selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement','selectionStmt',7,'p_selectionStmt','ply_program.py',254),
  ('selectionStmt -> IF LPAREN expressionStmt RPAREN statement','selectionStmt',5,'p_selectionStmt','ply_program.py',255),
  ('iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement','iterationStmt',5,'p_iterationStmt','ply_program.py',260),
  ('iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON','iterationStmt',7,'p_iterationStmt','ply_program.py',261),
  ('iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement','iterationStmt',9,'p_iterationStmt','ply_program.py',262),
  ('forcondition -> NAME EQUALS NAME','forcondition',3,'p_forcondition','ply_program.py',267),
  ('forcondition -> NAME GREATERTHAN NAME','forcondition',3,'p_forcondition','ply_program.py',268),
  ('forcondition -> NAME LESSTHAN NAME','forcondition',3,'p_forcondition','ply_program.py',269),
  ('forcondition -> NAME GREATEQ NAME','forcondition',3,'p_forcondition','ply_program.py',270),
  ('forcondition -> NAME LESSEQ NAME','forcondition',3,'p_forcondition','ply_program.py',271),
  ('forchange -> NAME PLUS PLUS','forchange',3,'p_forchange','ply_program.py',276),
  ('forchange -> NAME MINUS MINUS','forchange',3,'p_forchange','ply_program.py',277),
  ('forchange -> expressionStmt','forchange',1,'p_forchange','ply_program.py',278),
  ('empty -> <empty>','empty',0,'p_empty','ply_program.py',289),
]
