<<<<<<< HEAD
Illegal character '	'
Syntax error at ''c'
'
Illegal character '	'
None
Illegal character '	'
Syntax error at ''c'
'
Illegal character '	'
None
'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				't'
				'statement'
					'declaration_stmt'
						'c'
						'-'
						'atom'
							'literal'
								'2'
				'statement_suite'
					't'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'None'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				't'
				'statement'
					'declaration_stmt'
						'c'
						'-'
						'atom'
							'literal'
								'2'
				'statement_suite'
					't'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'None'

Programs with 1 errors
REMOVE:
def foo ( a , b , c ) : t c - 2 t None 

------------------------------

ADD:
def foo ( a , b , c ) : t c - 2 t errnode return None 

------------------------------

REPLACE:
def foo ( a , b , c ) : t c - 2 t @@@ None 

------------------------------


REMOVE:
def foo ( a , b , c ) t c - 2 t return None 

------------------------------

ADD:
def foo ( a , b , c ) errnode : t c - 2 t return None 

------------------------------

REPLACE:
def foo ( a , b , c ) @@@ t c - 2 t return None 

------------------------------


Programs with 2 errors
REMOVE:
def foo ( a b , c ) : t c - 2 t return 

------------------------------

ADD:
def foo ( a errnode , b , c ) : t c - 2 t return errnode None 

------------------------------

REPLACE:
def foo ( a @@@ b , c ) : t c - 2 t return @@@ 

------------------------------


REMOVE:
def foo ( a , b , ) : t c 2 t return None 

------------------------------

ADD:
def foo ( a , b , errnode c ) : t c errnode - 2 t return None 

------------------------------

REPLACE:
def foo ( a , b , @@@ ) : t c @@@ 2 t return None 

------------------------------


Programs with 3 errors
REMOVE:
def foo a , b , ) : t - 2 t return None 

------------------------------

ADD:
def foo errnode ( a , b , errnode c ) : t errnode c - 2 t return None 

------------------------------

REPLACE:
def foo @@@ a , b , @@@ ) : t @@@ - 2 t return None 

------------------------------


REMOVE:
def ( a , b , c ) : t 2 t return None 

------------------------------

ADD:
def errnode foo ( a , b , c ) : t errnode c errnode - 2 t return None 

------------------------------

REPLACE:
def @@@ ( a , b , c ) : t @@@ @@@ 2 t return None 

------------------------------


Illegal character '='
Syntax error at ''2'
'
None
Illegal character '='
Syntax error at ''2'
'
None
Illegal character '='
Syntax error at ''2'
'
None
Illegal character '='
Syntax error at ''2'
'
None
Illegal character '='
Syntax error at ''2'
'
None
Illegal character '='
Syntax error at ''2'
'
None
'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'declaration_stmt'
						'c'
						'='
						'atom'
							'literal'
								'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'None'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'declaration_stmt'
						'c'
						'='
						'atom'
							'literal'
								'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'None'

Programs with 1 errors
REMOVE:
def foo ( a , b , c ) : c = 2 	 return None 

------------------------------

ADD:
def foo ( a , b , c ) : errnode 	 c = 2 	 return None 

------------------------------

REPLACE:
def foo ( a , b , c ) : @@@ c = 2 	 return None 

------------------------------


REMOVE:
def foo ( a , b , c ) : 	 c 2 	 return None 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c errnode = 2 	 return None 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c @@@ 2 	 return None 

------------------------------


Programs with 2 errors
REMOVE:
def foo ( a , b , : 	 c = 2 	 return None 

------------------------------

ADD:
def foo ( a , b , errnode c errnode ) : 	 c = 2 	 return None 

------------------------------

REPLACE:
def foo ( a , b , @@@ @@@ : 	 c = 2 	 return None 

------------------------------


REMOVE:
def foo ( a , b , c 	 c = 2 	 return None 

------------------------------

ADD:
def foo ( a , b , c errnode ) errnode : 	 c = 2 	 return None 

------------------------------

REPLACE:
def foo ( a , b , c @@@ @@@ 	 c = 2 	 return None 

------------------------------


Programs with 3 errors
REMOVE:
def foo ( a , b , c ) 	 2 	 return None 

------------------------------

ADD:
def foo ( a , b , c ) errnode : 	 errnode c errnode = 2 	 return None 

------------------------------

REPLACE:
def foo ( a , b , c ) @@@ 	 @@@ @@@ 2 	 return None 

------------------------------


REMOVE:
def foo ( a , b c ) : c = 2 	 None 

------------------------------

ADD:
def foo ( a , b errnode , c ) : errnode 	 c = 2 	 errnode return None 

------------------------------

REPLACE:
def foo ( a , b @@@ c ) : @@@ c = 2 	 @@@ None 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'declaration_stmt'
						'c'
						'='
						'atom'
							'literal'
								'2'
				'statement_suite'
					'\t'
					'statement'
						'declaration_stmt'
							'b'
							'='
							'atom'
								'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'declaration_stmt'
						'c'
						'='
						'atom'
							'literal'
								'2'
				'statement_suite'
					'\t'
					'statement'
						'declaration_stmt'
							'b'
							'='
							'atom'
								'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

Programs with 1 errors
REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 b = a return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 b = a errnode 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 b = a @@@ return True 

------------------------------


REMOVE:
def foo ( a , b , c ) 	 c = 2 	 b = a 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) errnode : 	 c = 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) @@@ 	 c = 2 	 b = a 	 return True 

------------------------------


Programs with 2 errors
REMOVE:
def foo ( a , b , c ) : c = 	 b = a 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : errnode 	 c = errnode 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : @@@ c = @@@ 	 b = a 	 return True 

------------------------------


REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 = a 	 True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 errnode b = a 	 errnode return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 @@@ = a 	 @@@ True 

------------------------------


Programs with 3 errors
REMOVE:
def foo ( , b , c ) : 	 c = 2 	 = a 	 return 

------------------------------

ADD:
def foo ( errnode a , b , c ) : 	 c = 2 	 errnode b = a 	 return errnode True 

------------------------------

REPLACE:
def foo ( @@@ , b , c ) : 	 c = 2 	 @@@ = a 	 return @@@ 

------------------------------


REMOVE:
def foo ( a , , c ) 	 c = 2 	 b = a return True 

------------------------------

ADD:
def foo ( a , errnode b , c ) errnode : 	 c = 2 	 b = a errnode 	 return True 

------------------------------

REPLACE:
def foo ( a , @@@ , c ) @@@ 	 c = 2 	 b = a @@@ return True 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'declaration_stmt'
						'c'
						'='
						'atom'
							'literal'
								'2'
				'statement_suite'
					'\t'
					'statement'
						'declaration_stmt'
							'b'
							'='
							'atom'
								'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'declaration_stmt'
						'c'
						'='
						'atom'
							'literal'
								'2'
				'statement_suite'
					'\t'
					'statement'
						'declaration_stmt'
							'b'
							'='
							'atom'
								'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

Programs with 1 errors
REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 b = a 	 return 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 b = a 	 return errnode True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 b = a 	 return @@@ 

------------------------------


REMOVE:
def foo ( a , b , c ) 	 c = 2 	 b = a 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) errnode : 	 c = 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) @@@ 	 c = 2 	 b = a 	 return True 

------------------------------


Programs with 2 errors
REMOVE:
def foo ( , b , ) : 	 c = 2 	 b = a 	 return True 

------------------------------

ADD:
def foo ( errnode a , b , errnode c ) : 	 c = 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( @@@ , b , @@@ ) : 	 c = 2 	 b = a 	 return True 

------------------------------


REMOVE:
def foo a , b , c ) 	 c = 2 	 b = a 	 return True 

------------------------------

ADD:
def foo errnode ( a , b , c ) errnode : 	 c = 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo @@@ a , b , c ) @@@ 	 c = 2 	 b = a 	 return True 

------------------------------


Programs with 3 errors
REMOVE:
def foo ( a , b , ) : 	 c = 2 	 b = a True 

------------------------------

ADD:
def foo ( a , b , errnode c ) : 	 c = 2 	 b = a errnode 	 errnode return True 

------------------------------

REPLACE:
def foo ( a , b , @@@ ) : 	 c = 2 	 b = a @@@ @@@ True 

------------------------------


REMOVE:
def foo ( a , b , c ) : 	 = 2 	 b = 	 True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 errnode c = 2 	 b = errnode a 	 errnode return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 @@@ = 2 	 b = @@@ 	 @@@ True 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'declaration_stmt'
						'c'
						'='
						'atom'
							'literal'
								'2'
				'statement_suite'
					'\t'
					'statement'
						'declaration_stmt'
							'b'
							'='
							'atom'
								'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'declaration_stmt'
						'c'
						'='
						'atom'
							'literal'
								'2'
				'statement_suite'
					'\t'
					'statement'
						'declaration_stmt'
							'b'
							'='
							'atom'
								'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

Programs with 1 errors
REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 b = a return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 b = a errnode 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 b = a @@@ return True 

------------------------------


REMOVE:
def foo ( a , b , c ) : 	 c = 2 b = a 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 errnode 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 @@@ b = a 	 return True 

------------------------------


Programs with 2 errors
REMOVE:
def foo a , b c ) : 	 c = 2 	 b = a 	 return True 

------------------------------

ADD:
def foo errnode ( a , b errnode , c ) : 	 c = 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo @@@ a , b @@@ c ) : 	 c = 2 	 b = a 	 return True 

------------------------------


REMOVE:
def foo ( a , b , : 	 c = 2 	 b = a 	 return True 

------------------------------

ADD:
def foo ( a , b , errnode c errnode ) : 	 c = 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , @@@ @@@ : 	 c = 2 	 b = a 	 return True 

------------------------------


Programs with 3 errors
REMOVE:
def foo ( a , b , c ) 	 c 2 	 b = a 	 return 

------------------------------

ADD:
def foo ( a , b , c ) errnode : 	 c errnode = 2 	 b = a 	 return errnode True 

------------------------------

REPLACE:
def foo ( a , b , c ) @@@ 	 c @@@ 2 	 b = a 	 return @@@ 

------------------------------


REMOVE:
def foo ( , , c ) : 	 c = 2 	 b = a return True 

------------------------------

ADD:
def foo ( errnode a , errnode b , c ) : 	 c = 2 	 b = a errnode 	 return True 

------------------------------

REPLACE:
def foo ( @@@ , @@@ , c ) : 	 c = 2 	 b = a @@@ return True 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'atom'
							'literal'
								'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'atom'
								'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'atom'
							'literal'
								'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'atom'
								'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

Programs with 1 errors
REMOVE:
def foo ( a , b , c ) 	 c = 2 	 b = a 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) errnode : 	 c = 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) @@@ 	 c = 2 	 b = a 	 return True 

------------------------------


REMOVE:
def foo ( a b , c ) : 	 c = 2 	 b = a 	 return True 

------------------------------

ADD:
def foo ( a errnode , b , c ) : 	 c = 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( a @@@ b , c ) : 	 c = 2 	 b = a 	 return True 

------------------------------


Programs with 2 errors
REMOVE:
def foo ( a , b , c ) 	 c = 2 	 b a 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) errnode : 	 c = 2 	 b errnode = a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) @@@ 	 c = 2 	 b @@@ a 	 return True 

------------------------------


REMOVE:
def foo ( , , c ) : 	 c = 2 	 b = a 	 return True 

------------------------------

ADD:
def foo ( errnode a , errnode b , c ) : 	 c = 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( @@@ , @@@ , c ) : 	 c = 2 	 b = a 	 return True 

------------------------------


Programs with 3 errors
REMOVE:
def foo a , b , c ) : 	 2 	 b = a 	 return True 

------------------------------

ADD:
def foo errnode ( a , b , c ) : 	 errnode c errnode = 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo @@@ a , b , c ) : 	 @@@ @@@ 2 	 b = a 	 return True 

------------------------------


REMOVE:
def foo ( a , b , : 	 = 2 	 b = a 	 return True 

------------------------------

ADD:
def foo ( a , b , errnode c errnode ) : 	 errnode c = 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , @@@ @@@ : 	 @@@ = 2 	 b = a 	 return True 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'atom'
							'literal'
								'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'atom'
								'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'atom'
							'literal'
								'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'atom'
								'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

Programs with 1 errors
REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 b = 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 b = errnode a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 b = @@@ 	 return True 

------------------------------


REMOVE:
def foo ( a b , c ) : 	 c = 2 	 b = a 	 return True 

------------------------------

ADD:
def foo ( a errnode , b , c ) : 	 c = 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( a @@@ b , c ) : 	 c = 2 	 b = a 	 return True 

------------------------------


Programs with 2 errors
REMOVE:
def foo ( a , b , c ) : c 2 	 b = a 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : errnode 	 c errnode = 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : @@@ c @@@ 2 	 b = a 	 return True 

------------------------------


REMOVE:
def foo ( a , b , c ) : 	 = 2 	 b = a return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 errnode c = 2 	 b = a errnode 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 @@@ = 2 	 b = a @@@ return True 

------------------------------


Programs with 3 errors
REMOVE:
def foo a , b , c ) : 	 c = 2 	 b a return True 

------------------------------

ADD:
def foo errnode ( a , b , c ) : 	 c = 2 	 b errnode = a errnode 	 return True 

------------------------------

REPLACE:
def foo @@@ a , b , c ) : 	 c = 2 	 b @@@ a @@@ return True 

------------------------------


REMOVE:
def foo ( a , , : 	 c = 2 	 b = a 	 return True 

------------------------------

ADD:
def foo ( a , errnode b , errnode c errnode ) : 	 c = 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( a , @@@ , @@@ @@@ : 	 c = 2 	 b = a 	 return True 

------------------------------


Syntax error at ''='
'
None
'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'atom'
							'literal'
								'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'atom'
								'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'atom'
							'literal'
								'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'atom'
								'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

Programs with 1 errors
REMOVE:
def foo ( a , b , c ) 	 c = 2 	 b = a 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) errnode : 	 c = 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) @@@ 	 c = 2 	 b = a 	 return True 

------------------------------


REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 b = a 	 True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 b = a 	 errnode return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 b = a 	 @@@ True 

------------------------------


Programs with 2 errors
REMOVE:
def foo ( a b , c ) : 	 c = 2 	 b = a 	 True 

------------------------------

ADD:
def foo ( a errnode , b , c ) : 	 c = 2 	 b = a 	 errnode return True 

------------------------------

REPLACE:
def foo ( a @@@ b , c ) : 	 c = 2 	 b = a 	 @@@ True 

------------------------------


REMOVE:
def foo ( a , b , c ) : 	 = 2 	 b = a return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 errnode c = 2 	 b = a errnode 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 @@@ = 2 	 b = a @@@ return True 

------------------------------


Programs with 3 errors
REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 b 	 True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 b errnode = errnode a 	 errnode return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 b @@@ @@@ 	 @@@ True 

------------------------------


REMOVE:
def foo ( a , b , c ) : 	 = 	 b a 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 errnode c = errnode 2 	 b errnode = a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 @@@ = @@@ 	 b @@@ a 	 return True 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'atom'
							'literal'
								'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'atom'
								'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'atom'
							'literal'
								'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'atom'
								'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

Programs with 1 errors
REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 b = 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 b = errnode a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 b = @@@ 	 return True 

------------------------------


REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 b a 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 b errnode = a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 b @@@ a 	 return True 

------------------------------


Programs with 2 errors
REMOVE:
def foo ( a , b , ) : 	 c = 2 	 b a 	 return True 

------------------------------

ADD:
def foo ( a , b , errnode c ) : 	 c = 2 	 b errnode = a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , @@@ ) : 	 c = 2 	 b @@@ a 	 return True 

------------------------------


REMOVE:
def foo ( , b , c ) : 	 c = 2 b = a 	 return True 

------------------------------

ADD:
def foo ( errnode a , b , c ) : 	 c = 2 errnode 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( @@@ , b , c ) : 	 c = 2 @@@ b = a 	 return True 

------------------------------


Programs with 3 errors
REMOVE:
def foo ( a b , c ) : 	 c = 2 b = a return True 

------------------------------

ADD:
def foo ( a errnode , b , c ) : 	 c = 2 errnode 	 b = a errnode 	 return True 

------------------------------

REPLACE:
def foo ( a @@@ b , c ) : 	 c = 2 @@@ b = a @@@ return True 

------------------------------


REMOVE:
def foo ( a , b c ) : 	 c = 2 	 b = return True 

------------------------------

ADD:
def foo ( a , b errnode , c ) : 	 c = 2 	 b = errnode a errnode 	 return True 

------------------------------

REPLACE:
def foo ( a , b @@@ c ) : 	 c = 2 	 b = @@@ @@@ return True 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'arithmetic_expr'
							'atom'
								'literal'
									'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'arithmetic_expr'
								'atom'
									'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'arithmetic_expr'
							'atom'
								'literal'
									'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'arithmetic_expr'
								'atom'
									'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

Programs with 1 errors
REMOVE:
def foo ( a , b , c ) : 	 c 2 	 b = a 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c errnode = 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c @@@ 2 	 b = a 	 return True 

------------------------------


REMOVE:
def foo ( a , b , c ) : 	 = 2 	 b = a 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 errnode c = 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 @@@ = 2 	 b = a 	 return True 

------------------------------


Programs with 2 errors
REMOVE:
def ( a , b , c ) : 	 c = 2 	 b = a 	 True 

------------------------------

ADD:
def errnode foo ( a , b , c ) : 	 c = 2 	 b = a 	 errnode return True 

------------------------------

REPLACE:
def @@@ ( a , b , c ) : 	 c = 2 	 b = a 	 @@@ True 

------------------------------


REMOVE:
def foo ( , b , c ) : 	 c = 2 b = a 	 return True 

------------------------------

ADD:
def foo ( errnode a , b , c ) : 	 c = 2 errnode 	 b = a 	 return True 

------------------------------

REPLACE:
def foo ( @@@ , b , c ) : 	 c = 2 @@@ b = a 	 return True 

------------------------------


Programs with 3 errors
REMOVE:
def foo a , b , c ) : c = 	 b = a 	 return True 

------------------------------

ADD:
def foo errnode ( a , b , c ) : errnode 	 c = errnode 2 	 b = a 	 return True 

------------------------------

REPLACE:
def foo @@@ a , b , c ) : @@@ c = @@@ 	 b = a 	 return True 

------------------------------


REMOVE:
def foo ( a b , c ) : 	 = 2 	 b a 	 return True 

------------------------------

ADD:
def foo ( a errnode , b , c ) : 	 errnode c = 2 	 b errnode = a 	 return True 

------------------------------

REPLACE:
def foo ( a @@@ b , c ) : 	 @@@ = 2 	 b @@@ a 	 return True 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'arithmetic_expr'
							'atom'
								'literal'
									'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'+'
								'arithmetic_expr'
									'atom'
										'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'arithmetic_expr'
							'atom'
								'literal'
									'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'+'
								'arithmetic_expr'
									'atom'
										'a'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'literal'
										'True'

Programs with 1 errors
REMOVE:
def foo ( a , b , c ) : 	 c = 	 b = a + a 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = errnode 2 	 b = a + a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = @@@ 	 b = a + a 	 return True 

------------------------------


REMOVE:
def foo ( a , b , c ) : 	 c = 2 b = a + a 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 errnode 	 b = a + a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 @@@ b = a + a 	 return True 

------------------------------


Programs with 2 errors
REMOVE:
def foo ( a , b , c ) : 	 = 2 	 b = a + a return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 errnode c = 2 	 b = a + a errnode 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 @@@ = 2 	 b = a + a @@@ return True 

------------------------------


REMOVE:
def foo ( a , b , c : 	 = 2 	 b = a + a 	 return True 

------------------------------

ADD:
def foo ( a , b , c errnode ) : 	 errnode c = 2 	 b = a + a 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c @@@ : 	 @@@ = 2 	 b = a + a 	 return True 

------------------------------


Programs with 3 errors
REMOVE:
def ( a , b , c ) : c = 2 	 b = a a 	 return True 

------------------------------

ADD:
def errnode foo ( a , b , c ) : errnode 	 c = 2 	 b = a errnode + a 	 return True 

------------------------------

REPLACE:
def @@@ ( a , b , c ) : @@@ c = 2 	 b = a @@@ a 	 return True 

------------------------------


REMOVE:
def foo a , b , c ) 	 c = 2 b = a + a 	 return True 

------------------------------

ADD:
def foo errnode ( a , b , c ) errnode : 	 c = 2 errnode 	 b = a + a 	 return True 

------------------------------

REPLACE:
def foo @@@ a , b , c ) @@@ 	 c = 2 @@@ b = a + a 	 return True 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'arithmetic_expr'
							'atom'
								'literal'
									'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'+'
								'arithmetic_expr'
									'atom'
										'a'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'a'
								'='
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'/'
									'arithmetic_expr'
										'atom'
											'literal'
												'3'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'atom'
										'literal'
											'True'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'arithmetic_expr'
							'atom'
								'literal'
									'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'+'
								'arithmetic_expr'
									'atom'
										'a'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'a'
								'='
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'/'
									'arithmetic_expr'
										'atom'
											'literal'
												'3'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'atom'
										'literal'
											'True'

Programs with 1 errors
REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 b a + a 	 a = a / 3 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 b errnode = a + a 	 a = a / 3 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 b @@@ a + a 	 a = a / 3 	 return True 

------------------------------


REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 b = a + a 	 a = a 3 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 b = a + a 	 a = a errnode / 3 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 b = a + a 	 a = a @@@ 3 	 return True 

------------------------------


Programs with 2 errors
REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 b = a + a a = a / 3 	 return 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 b = a + a errnode 	 a = a / 3 	 return errnode True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 b = a + a @@@ a = a / 3 	 return @@@ 

------------------------------


REMOVE:
def foo ( a , b ) : 	 c = 2 	 b = a + a 	 a = a / 3 	 return True 

------------------------------

ADD:
def foo ( a , b errnode , errnode c ) : 	 c = 2 	 b = a + a 	 a = a / 3 	 return True 

------------------------------

REPLACE:
def foo ( a , b @@@ @@@ ) : 	 c = 2 	 b = a + a 	 a = a / 3 	 return True 

------------------------------


Programs with 3 errors
REMOVE:
def foo ( b , c ) : 	 c = 2 	 b = + a 	 a = a / 3 	 return True 

------------------------------

ADD:
def foo ( errnode a errnode , b , c ) : 	 c = 2 	 b = errnode a + a 	 a = a / 3 	 return True 

------------------------------

REPLACE:
def foo ( @@@ @@@ b , c ) : 	 c = 2 	 b = @@@ + a 	 a = a / 3 	 return True 

------------------------------


REMOVE:
def ( a , b , c ) 	 c = 2 	 b = + a 	 a = a / 3 	 return True 

------------------------------

ADD:
def errnode foo ( a , b , c ) errnode : 	 c = 2 	 b = errnode a + a 	 a = a / 3 	 return True 

------------------------------

REPLACE:
def @@@ ( a , b , c ) @@@ 	 c = 2 	 b = @@@ + a 	 a = a / 3 	 return True 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'expression'
							'arithmetic_expr'
								'atom'
									'literal'
										'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'+'
									'arithmetic_expr'
										'atom'
											'a'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'a'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'a'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'3'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'atom'
										'literal'
											'True'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'expression'
							'arithmetic_expr'
								'atom'
									'literal'
										'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'+'
									'arithmetic_expr'
										'atom'
											'a'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'a'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'a'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'3'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'atom'
										'literal'
											'True'

Programs with 1 errors
REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 b = a + a 	 a = a / 3 	 return 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 b = a + a 	 a = a / 3 	 return errnode True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 b = a + a 	 a = a / 3 	 return @@@ 

------------------------------


REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 b = a + 	 a = a / 3 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 b = a + errnode a 	 a = a / 3 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 b = a + @@@ 	 a = a / 3 	 return True 

------------------------------


Programs with 2 errors
REMOVE:
def ( a , b , c ) : 	 c = 2 	 b = a + a 	 a = a / 3 	 True 

------------------------------

ADD:
def errnode foo ( a , b , c ) : 	 c = 2 	 b = a + a 	 a = a / 3 	 errnode return True 

------------------------------

REPLACE:
def @@@ ( a , b , c ) : 	 c = 2 	 b = a + a 	 a = a / 3 	 @@@ True 

------------------------------


REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 b = a a 	 a = a / 3 	 True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 b = a errnode + a 	 a = a / 3 	 errnode return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 b = a @@@ a 	 a = a / 3 	 @@@ True 

------------------------------


Programs with 3 errors
REMOVE:
def foo ( a b , c ) 	 c = 2 	 b = a + a 	 a = a 3 	 return True 

------------------------------

ADD:
def foo ( a errnode , b , c ) errnode : 	 c = 2 	 b = a + a 	 a = a errnode / 3 	 return True 

------------------------------

REPLACE:
def foo ( a @@@ b , c ) @@@ 	 c = 2 	 b = a + a 	 a = a @@@ 3 	 return True 

------------------------------


REMOVE:
def foo ( a , b c ) : 	 c = 2 	 = a + a 	 = a / 3 	 return True 

------------------------------

ADD:
def foo ( a , b errnode , c ) : 	 c = 2 	 errnode b = a + a 	 errnode a = a / 3 	 return True 

------------------------------

REPLACE:
def foo ( a , b @@@ c ) : 	 c = 2 	 @@@ = a + a 	 @@@ = a / 3 	 return True 

------------------------------


Syntax error at '')'
'
None
Syntax error at ''else'
'
None
Syntax error at ''a'
'
None
'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'expression'
							'arithmetic_expr'
								'atom'
									'literal'
										'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'+'
									'arithmetic_expr'
										'atom'
											'a'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'a'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'a'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'3'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'atom'
										'literal'
											'True'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'expression'
							'arithmetic_expr'
								'atom'
									'literal'
										'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'+'
									'arithmetic_expr'
										'atom'
											'a'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'a'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'a'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'3'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'atom'
										'literal'
											'True'

Programs with 1 errors
REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 = a + a 	 a = a / 3 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 errnode b = a + a 	 a = a / 3 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 @@@ = a + a 	 a = a / 3 	 return True 

------------------------------


REMOVE:
def foo ( a , b , c : 	 c = 2 	 b = a + a 	 a = a / 3 	 return True 

------------------------------

ADD:
def foo ( a , b , c errnode ) : 	 c = 2 	 b = a + a 	 a = a / 3 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c @@@ : 	 c = 2 	 b = a + a 	 a = a / 3 	 return True 

------------------------------


Programs with 2 errors
REMOVE:
def foo ( a , b ) : 	 c = 2 	 b = a + a 	 a = a / 3 	 return True 

------------------------------

ADD:
def foo ( a , b errnode , errnode c ) : 	 c = 2 	 b = a + a 	 a = a / 3 	 return True 

------------------------------

REPLACE:
def foo ( a , b @@@ @@@ ) : 	 c = 2 	 b = a + a 	 a = a / 3 	 return True 

------------------------------


REMOVE:
def foo ( a , b , c ) : c = 2 	 b = a + a 	 a = a / 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : errnode 	 c = 2 	 b = a + a 	 a = a / errnode 3 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : @@@ c = 2 	 b = a + a 	 a = a / @@@ 	 return True 

------------------------------


Programs with 3 errors
REMOVE:
def ( a , b , c ) 	 = 2 	 b = a + a 	 a = a / 3 	 return True 

------------------------------

ADD:
def errnode foo ( a , b , c ) errnode : 	 errnode c = 2 	 b = a + a 	 a = a / 3 	 return True 

------------------------------

REPLACE:
def @@@ ( a , b , c ) @@@ 	 @@@ = 2 	 b = a + a 	 a = a / 3 	 return True 

------------------------------


REMOVE:
def foo , b , c ) : 	 c = 	 b = a + a 	 a = a / 3 	 return True 

------------------------------

ADD:
def foo errnode ( errnode a , b , c ) : 	 c = errnode 2 	 b = a + a 	 a = a / 3 	 return True 

------------------------------

REPLACE:
def foo @@@ @@@ , b , c ) : 	 c = @@@ 	 b = a + a 	 a = a / 3 	 return True 

------------------------------


Syntax error at ''a'
'
None
Syntax error at ''a'
'
None
Syntax error at ''a'
'
None
Syntax error at ''('
'
None
Syntax error at ''a'
'
None
Syntax error at ''a'
'
None
Syntax error at ''a'
'
None
Syntax error at ''a'
'
None
'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
def foo ( a b ) : 	 return a 

------------------------------

ADD:
def foo ( a errnode , b ) : 	 return a 

------------------------------

REPLACE:
def foo ( a @@@ b ) : 	 return a 

------------------------------


REMOVE:
def foo ( a , b ) 	 return a 

------------------------------

ADD:
def foo ( a , b ) errnode : 	 return a 

------------------------------

REPLACE:
def foo ( a , b ) @@@ 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
def foo ( , b ) : 	 return 

------------------------------

ADD:
def foo ( errnode a , b ) : 	 return errnode a 

------------------------------

REPLACE:
def foo ( @@@ , b ) : 	 return @@@ 

------------------------------


REMOVE:
def foo ( a b ) : return a 

------------------------------

ADD:
def foo ( a errnode , b ) : errnode 	 return a 

------------------------------

REPLACE:
def foo ( a @@@ b ) : @@@ return a 

------------------------------


Programs with 3 errors
REMOVE:
def a , b : 	 return a 

------------------------------

ADD:
def errnode foo errnode ( a , b errnode ) : 	 return a 

------------------------------

REPLACE:
def @@@ @@@ a , b @@@ : 	 return a 

------------------------------


REMOVE:
def foo ( , ) 	 return a 

------------------------------

ADD:
def foo ( errnode a , errnode b ) errnode : 	 return a 

------------------------------

REPLACE:
def foo ( @@@ , @@@ ) @@@ 	 return a 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'hello'

'start'
	'construct'
		'if_stmt'
			'if'
			'hello'

Programs with 1 errors
REMOVE:
if 

------------------------------

ADD:
if errnode hello 

------------------------------

REPLACE:
if @@@ 

------------------------------


REMOVE:
if 

------------------------------

ADD:
if errnode hello 

------------------------------

REPLACE:
if @@@ 

------------------------------


Programs with 2 errors
'start'
	'construct'
		'if_stmt'
			'if'
			'hello'
			':'

'start'
	'construct'
		'if_stmt'
			'if'
			'hello'
			':'

Programs with 1 errors
REMOVE:
if hello 

------------------------------

ADD:
if hello errnode : 

------------------------------

REPLACE:
if hello @@@ 

------------------------------


REMOVE:
if : 

------------------------------

ADD:
if errnode hello : 

------------------------------

REPLACE:
if @@@ : 

------------------------------


Programs with 2 errors
REMOVE:
if 

------------------------------

ADD:
if errnode hello errnode : 

------------------------------

REPLACE:
if @@@ @@@ 

------------------------------


REMOVE:
if 

------------------------------

ADD:
if errnode hello errnode : 

------------------------------

REPLACE:
if @@@ @@@ 

------------------------------


Programs with 3 errors
'start'
	'construct'
		'if_stmt'
			'if'
			'hello'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'hello'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if : 	 return a 

------------------------------

ADD:
if errnode hello : 	 return a 

------------------------------

REPLACE:
if @@@ : 	 return a 

------------------------------


REMOVE:
if : 	 return a 

------------------------------

ADD:
if errnode hello : 	 return a 

------------------------------

REPLACE:
if @@@ : 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
if hello : 	 

------------------------------

ADD:
if hello : 	 errnode return errnode a 

------------------------------

REPLACE:
if hello : 	 @@@ @@@ 

------------------------------


REMOVE:
if hello 	 return 

------------------------------

ADD:
if hello errnode : 	 return errnode a 

------------------------------

REPLACE:
if hello @@@ 	 return @@@ 

------------------------------


Programs with 3 errors
REMOVE:
if hello : 

------------------------------

ADD:
if hello : errnode 	 errnode return errnode a 

------------------------------

REPLACE:
if hello : @@@ @@@ @@@ 

------------------------------


REMOVE:
if 	 return 

------------------------------

ADD:
if errnode hello errnode : 	 return errnode a 

------------------------------

REPLACE:
if @@@ @@@ 	 return @@@ 

------------------------------


Syntax error at ''='
'
None
'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( b ) : 	 return 

------------------------------

ADD:
if ( b ) : 	 return errnode a 

------------------------------

REPLACE:
if ( b ) : 	 return @@@ 

------------------------------


REMOVE:
if ( b ) : 	 return 

------------------------------

ADD:
if ( b ) : 	 return errnode a 

------------------------------

REPLACE:
if ( b ) : 	 return @@@ 

------------------------------


Programs with 2 errors
REMOVE:
if ( b ) : return 

------------------------------

ADD:
if ( b ) : errnode 	 return errnode a 

------------------------------

REPLACE:
if ( b ) : @@@ return @@@ 

------------------------------


REMOVE:
if ( b : 	 return 

------------------------------

ADD:
if ( b errnode ) : 	 return errnode a 

------------------------------

REPLACE:
if ( b @@@ : 	 return @@@ 

------------------------------


Programs with 3 errors
REMOVE:
if ( b 	 return 

------------------------------

ADD:
if ( b errnode ) errnode : 	 return errnode a 

------------------------------

REPLACE:
if ( b @@@ @@@ 	 return @@@ 

------------------------------


REMOVE:
if ( ) : a 

------------------------------

ADD:
if ( errnode b ) : errnode 	 errnode return a 

------------------------------

REPLACE:
if ( @@@ ) : @@@ @@@ a 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( b : 	 return a 

------------------------------

ADD:
if ( b errnode ) : 	 return a 

------------------------------

REPLACE:
if ( b @@@ : 	 return a 

------------------------------


REMOVE:
if ( b ) : 	 return 

------------------------------

ADD:
if ( b ) : 	 return errnode a 

------------------------------

REPLACE:
if ( b ) : 	 return @@@ 

------------------------------


Programs with 2 errors
REMOVE:
if b ) : 	 a 

------------------------------

ADD:
if errnode ( b ) : 	 errnode return a 

------------------------------

REPLACE:
if @@@ b ) : 	 @@@ a 

------------------------------


REMOVE:
if b ) 	 return a 

------------------------------

ADD:
if errnode ( b ) errnode : 	 return a 

------------------------------

REPLACE:
if @@@ b ) @@@ 	 return a 

------------------------------


Programs with 3 errors
REMOVE:
if ) : 	 return 

------------------------------

ADD:
if errnode ( errnode b ) : 	 return errnode a 

------------------------------

REPLACE:
if @@@ @@@ ) : 	 return @@@ 

------------------------------


REMOVE:
if b ) : 	 

------------------------------

ADD:
if errnode ( b ) : 	 errnode return errnode a 

------------------------------

REPLACE:
if @@@ b ) : 	 @@@ @@@ 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'atom'
				'literal'
					'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'atom'
				'literal'
					'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( 3 ) : 	 a 

------------------------------

ADD:
if ( 3 ) : 	 errnode return a 

------------------------------

REPLACE:
if ( 3 ) : 	 @@@ a 

------------------------------


REMOVE:
if ( 3 ) : 	 a 

------------------------------

ADD:
if ( 3 ) : 	 errnode return a 

------------------------------

REPLACE:
if ( 3 ) : 	 @@@ a 

------------------------------


Programs with 2 errors
REMOVE:
if ( 3 : 	 a 

------------------------------

ADD:
if ( 3 errnode ) : 	 errnode return a 

------------------------------

REPLACE:
if ( 3 @@@ : 	 @@@ a 

------------------------------


REMOVE:
if 3 ) : 	 return 

------------------------------

ADD:
if errnode ( 3 ) : 	 return errnode a 

------------------------------

REPLACE:
if @@@ 3 ) : 	 return @@@ 

------------------------------


Programs with 3 errors
REMOVE:
if ( ) return a 

------------------------------

ADD:
if ( errnode 3 ) errnode : errnode 	 return a 

------------------------------

REPLACE:
if ( @@@ ) @@@ @@@ return a 

------------------------------


REMOVE:
if ( 3 ) return 

------------------------------

ADD:
if ( 3 ) errnode : errnode 	 return errnode a 

------------------------------

REPLACE:
if ( 3 ) @@@ @@@ return @@@ 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'atom'
				'literal'
					'None'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'atom'
				'literal'
					'None'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( None ) : 	 return 

------------------------------

ADD:
if ( None ) : 	 return errnode a 

------------------------------

REPLACE:
if ( None ) : 	 return @@@ 

------------------------------


REMOVE:
if ( None : 	 return a 

------------------------------

ADD:
if ( None errnode ) : 	 return a 

------------------------------

REPLACE:
if ( None @@@ : 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
if ( : 	 return a 

------------------------------

ADD:
if ( errnode None errnode ) : 	 return a 

------------------------------

REPLACE:
if ( @@@ @@@ : 	 return a 

------------------------------


REMOVE:
if ( None : return a 

------------------------------

ADD:
if ( None errnode ) : errnode 	 return a 

------------------------------

REPLACE:
if ( None @@@ : @@@ return a 

------------------------------


Programs with 3 errors
REMOVE:
if None ) : 	 

------------------------------

ADD:
if errnode ( None ) : 	 errnode return errnode a 

------------------------------

REPLACE:
if @@@ None ) : 	 @@@ @@@ 

------------------------------


REMOVE:
if None ) : return 

------------------------------

ADD:
if errnode ( None ) : errnode 	 return errnode a 

------------------------------

REPLACE:
if @@@ None ) : @@@ return @@@ 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'atom'
					'literal'
						'None'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'atom'
					'literal'
						'None'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( ) : 	 return a 

------------------------------

ADD:
if ( errnode None ) : 	 return a 

------------------------------

REPLACE:
if ( @@@ ) : 	 return a 

------------------------------


REMOVE:
if ( None : 	 return a 

------------------------------

ADD:
if ( None errnode ) : 	 return a 

------------------------------

REPLACE:
if ( None @@@ : 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
if ( None ) : 	 

------------------------------

ADD:
if ( None ) : 	 errnode return errnode a 

------------------------------

REPLACE:
if ( None ) : 	 @@@ @@@ 

------------------------------


REMOVE:
if ) : 	 return a 

------------------------------

ADD:
if errnode ( errnode None ) : 	 return a 

------------------------------

REPLACE:
if @@@ @@@ ) : 	 return a 

------------------------------


Programs with 3 errors
REMOVE:
if ( None return a 

------------------------------

ADD:
if ( None errnode ) errnode : errnode 	 return a 

------------------------------

REPLACE:
if ( None @@@ @@@ @@@ return a 

------------------------------


REMOVE:
if None ) : 	 

------------------------------

ADD:
if errnode ( None ) : 	 errnode return errnode a 

------------------------------

REPLACE:
if @@@ None ) : 	 @@@ @@@ 

------------------------------


Syntax error at ''='
'
None
Syntax error at ''='
'
None
'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'/'
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'/'
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( a / 3 : 	 return a 

------------------------------

ADD:
if ( a / 3 errnode ) : 	 return a 

------------------------------

REPLACE:
if ( a / 3 @@@ : 	 return a 

------------------------------


REMOVE:
if ( a / 3 ) : 	 return 

------------------------------

ADD:
if ( a / 3 ) : 	 return errnode a 

------------------------------

REPLACE:
if ( a / 3 ) : 	 return @@@ 

------------------------------


Programs with 2 errors
REMOVE:
if ( a / 3 ) : a 

------------------------------

ADD:
if ( a / 3 ) : errnode 	 errnode return a 

------------------------------

REPLACE:
if ( a / 3 ) : @@@ @@@ a 

------------------------------


REMOVE:
if ( a / 3 ) : return 

------------------------------

ADD:
if ( a / 3 ) : errnode 	 return errnode a 

------------------------------

REPLACE:
if ( a / 3 ) : @@@ return @@@ 

------------------------------


Programs with 3 errors
REMOVE:
if a 3 : 	 return a 

------------------------------

ADD:
if errnode ( a errnode / 3 errnode ) : 	 return a 

------------------------------

REPLACE:
if @@@ a @@@ 3 @@@ : 	 return a 

------------------------------


REMOVE:
if a / 3 ) : 	 

------------------------------

ADD:
if errnode ( a / 3 ) : 	 errnode return errnode a 

------------------------------

REPLACE:
if @@@ a / 3 ) : 	 @@@ @@@ 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'relational_expr'
				'atom'
					'a'
				'arithmetic_op'
					'/'
				'atom'
					'literal'
						'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'relational_expr'
				'atom'
					'a'
				'arithmetic_op'
					'/'
				'atom'
					'literal'
						'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( a / 3 ) : 	 a 

------------------------------

ADD:
if ( a / 3 ) : 	 errnode return a 

------------------------------

REPLACE:
if ( a / 3 ) : 	 @@@ a 

------------------------------


REMOVE:
if ( a / 3 : 	 return a 

------------------------------

ADD:
if ( a / 3 errnode ) : 	 return a 

------------------------------

REPLACE:
if ( a / 3 @@@ : 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
if ( / 3 ) 	 return a 

------------------------------

ADD:
if ( errnode a / 3 ) errnode : 	 return a 

------------------------------

REPLACE:
if ( @@@ / 3 ) @@@ 	 return a 

------------------------------


REMOVE:
if ( / 3 ) 	 return a 

------------------------------

ADD:
if ( errnode a / 3 ) errnode : 	 return a 

------------------------------

REPLACE:
if ( @@@ / 3 ) @@@ 	 return a 

------------------------------


Programs with 3 errors
REMOVE:
if ( 3 ) : 	 a 

------------------------------

ADD:
if ( errnode a errnode / 3 ) : 	 errnode return a 

------------------------------

REPLACE:
if ( @@@ @@@ 3 ) : 	 @@@ a 

------------------------------


REMOVE:
if ( a / 3 : 	 

------------------------------

ADD:
if ( a / 3 errnode ) : 	 errnode return errnode a 

------------------------------

REPLACE:
if ( a / 3 @@@ : 	 @@@ @@@ 

------------------------------


Syntax error at ''='
'
None
Illegal character '>'
Syntax error at ''3'
'
None
Illegal character '>'
Syntax error at ''3'
'
None
'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'/'
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'/'
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( a 3 ) : 	 return a 

------------------------------

ADD:
if ( a errnode / 3 ) : 	 return a 

------------------------------

REPLACE:
if ( a @@@ 3 ) : 	 return a 

------------------------------


REMOVE:
if ( a / 3 ) : 	 return 

------------------------------

ADD:
if ( a / 3 ) : 	 return errnode a 

------------------------------

REPLACE:
if ( a / 3 ) : 	 return @@@ 

------------------------------


Programs with 2 errors
REMOVE:
if a / 3 ) : 	 return 

------------------------------

ADD:
if errnode ( a / 3 ) : 	 return errnode a 

------------------------------

REPLACE:
if @@@ a / 3 ) : 	 return @@@ 

------------------------------


REMOVE:
if ( / 3 ) : 	 a 

------------------------------

ADD:
if ( errnode a / 3 ) : 	 errnode return a 

------------------------------

REPLACE:
if ( @@@ / 3 ) : 	 @@@ a 

------------------------------


Programs with 3 errors
REMOVE:
if a / 3 ) 	 a 

------------------------------

ADD:
if errnode ( a / 3 ) errnode : 	 errnode return a 

------------------------------

REPLACE:
if @@@ a / 3 ) @@@ 	 @@@ a 

------------------------------


REMOVE:
if ( a 3 ) 	 a 

------------------------------

ADD:
if ( a errnode / 3 ) errnode : 	 errnode return a 

------------------------------

REPLACE:
if ( a @@@ 3 ) @@@ 	 @@@ a 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'<'
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'<'
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( a < 3 ) : return a 

------------------------------

ADD:
if ( a < 3 ) : errnode 	 return a 

------------------------------

REPLACE:
if ( a < 3 ) : @@@ return a 

------------------------------


REMOVE:
if ( a 3 ) : 	 return a 

------------------------------

ADD:
if ( a errnode < 3 ) : 	 return a 

------------------------------

REPLACE:
if ( a @@@ 3 ) : 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
if ( a < 3 : 	 a 

------------------------------

ADD:
if ( a < 3 errnode ) : 	 errnode return a 

------------------------------

REPLACE:
if ( a < 3 @@@ : 	 @@@ a 

------------------------------


REMOVE:
if ( a < ) : 	 return 

------------------------------

ADD:
if ( a < errnode 3 ) : 	 return errnode a 

------------------------------

REPLACE:
if ( a < @@@ ) : 	 return @@@ 

------------------------------


Programs with 3 errors
REMOVE:
if ( a : 	 return a 

------------------------------

ADD:
if ( a errnode < errnode 3 errnode ) : 	 return a 

------------------------------

REPLACE:
if ( a @@@ @@@ @@@ : 	 return a 

------------------------------


REMOVE:
if ( 3 ) 	 return a 

------------------------------

ADD:
if ( errnode a errnode < 3 ) errnode : 	 return a 

------------------------------

REPLACE:
if ( @@@ @@@ 3 ) @@@ 	 return a 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'<'
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'<'
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( a < 3 ) : return a 

------------------------------

ADD:
if ( a < 3 ) : errnode 	 return a 

------------------------------

REPLACE:
if ( a < 3 ) : @@@ return a 

------------------------------


REMOVE:
if ( a 3 ) : 	 return a 

------------------------------

ADD:
if ( a errnode < 3 ) : 	 return a 

------------------------------

REPLACE:
if ( a @@@ 3 ) : 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
if ( a ) : 	 return a 

------------------------------

ADD:
if ( a errnode < errnode 3 ) : 	 return a 

------------------------------

REPLACE:
if ( a @@@ @@@ ) : 	 return a 

------------------------------


REMOVE:
if ( a < 3 ) 	 a 

------------------------------

ADD:
if ( a < 3 ) errnode : 	 errnode return a 

------------------------------

REPLACE:
if ( a < 3 ) @@@ 	 @@@ a 

------------------------------


Programs with 3 errors
REMOVE:
if ( a < ) : a 

------------------------------

ADD:
if ( a < errnode 3 ) : errnode 	 errnode return a 

------------------------------

REPLACE:
if ( a < @@@ ) : @@@ @@@ a 

------------------------------


REMOVE:
if a < ) : return a 

------------------------------

ADD:
if errnode ( a < errnode 3 ) : errnode 	 return a 

------------------------------

REPLACE:
if @@@ a < @@@ ) : @@@ return a 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'<'
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'<'
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( a < 3 ) : 	 a 

------------------------------

ADD:
if ( a < 3 ) : 	 errnode return a 

------------------------------

REPLACE:
if ( a < 3 ) : 	 @@@ a 

------------------------------


REMOVE:
if ( a < 3 ) : 	 a 

------------------------------

ADD:
if ( a < 3 ) : 	 errnode return a 

------------------------------

REPLACE:
if ( a < 3 ) : 	 @@@ a 

------------------------------


Programs with 2 errors
REMOVE:
if ( a < 3 : return a 

------------------------------

ADD:
if ( a < 3 errnode ) : errnode 	 return a 

------------------------------

REPLACE:
if ( a < 3 @@@ : @@@ return a 

------------------------------


REMOVE:
if ( a < ) : 	 return 

------------------------------

ADD:
if ( a < errnode 3 ) : 	 return errnode a 

------------------------------

REPLACE:
if ( a < @@@ ) : 	 return @@@ 

------------------------------


Programs with 3 errors
REMOVE:
if ( < ) : 	 a 

------------------------------

ADD:
if ( errnode a < errnode 3 ) : 	 errnode return a 

------------------------------

REPLACE:
if ( @@@ < @@@ ) : 	 @@@ a 

------------------------------


REMOVE:
if ( a < : return a 

------------------------------

ADD:
if ( a < errnode 3 errnode ) : errnode 	 return a 

------------------------------

REPLACE:
if ( a < @@@ @@@ : @@@ return a 

------------------------------


Syntax error at ''='
'
None
'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'=='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'=='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( == 3 ) : 	 return a 

------------------------------

ADD:
if ( errnode a == 3 ) : 	 return a 

------------------------------

REPLACE:
if ( @@@ == 3 ) : 	 return a 

------------------------------


REMOVE:
if ( a 3 ) : 	 return a 

------------------------------

ADD:
if ( a errnode == 3 ) : 	 return a 

------------------------------

REPLACE:
if ( a @@@ 3 ) : 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
if ( a == 3 ) 	 return 

------------------------------

ADD:
if ( a == 3 ) errnode : 	 return errnode a 

------------------------------

REPLACE:
if ( a == 3 ) @@@ 	 return @@@ 

------------------------------


REMOVE:
if a == 3 ) : return a 

------------------------------

ADD:
if errnode ( a == 3 ) : errnode 	 return a 

------------------------------

REPLACE:
if @@@ a == 3 ) : @@@ return a 

------------------------------


Programs with 3 errors
REMOVE:
if a 3 : 	 return a 

------------------------------

ADD:
if errnode ( a errnode == 3 errnode ) : 	 return a 

------------------------------

REPLACE:
if @@@ a @@@ 3 @@@ : 	 return a 

------------------------------


REMOVE:
if ( a 3 ) return a 

------------------------------

ADD:
if ( a errnode == 3 ) errnode : errnode 	 return a 

------------------------------

REPLACE:
if ( a @@@ 3 ) @@@ @@@ return a 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'=='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'=='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( == 3 ) : 	 return a 

------------------------------

ADD:
if ( errnode a == 3 ) : 	 return a 

------------------------------

REPLACE:
if ( @@@ == 3 ) : 	 return a 

------------------------------


REMOVE:
if ( == 3 ) : 	 return a 

------------------------------

ADD:
if ( errnode a == 3 ) : 	 return a 

------------------------------

REPLACE:
if ( @@@ == 3 ) : 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
if ( a 3 ) : return a 

------------------------------

ADD:
if ( a errnode == 3 ) : errnode 	 return a 

------------------------------

REPLACE:
if ( a @@@ 3 ) : @@@ return a 

------------------------------


REMOVE:
if ( a == ) : 	 return 

------------------------------

ADD:
if ( a == errnode 3 ) : 	 return errnode a 

------------------------------

REPLACE:
if ( a == @@@ ) : 	 return @@@ 

------------------------------


Programs with 3 errors
REMOVE:
if ( == ) : 	 a 

------------------------------

ADD:
if ( errnode a == errnode 3 ) : 	 errnode return a 

------------------------------

REPLACE:
if ( @@@ == @@@ ) : 	 @@@ a 

------------------------------


REMOVE:
if a 3 : 	 return a 

------------------------------

ADD:
if errnode ( a errnode == 3 errnode ) : 	 return a 

------------------------------

REPLACE:
if @@@ a @@@ 3 @@@ : 	 return a 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'=='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'=='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( a == ) : 	 return a 

------------------------------

ADD:
if ( a == errnode 3 ) : 	 return a 

------------------------------

REPLACE:
if ( a == @@@ ) : 	 return a 

------------------------------


REMOVE:
if ( a == 3 ) 	 return a 

------------------------------

ADD:
if ( a == 3 ) errnode : 	 return a 

------------------------------

REPLACE:
if ( a == 3 ) @@@ 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
if ( a 3 : 	 return a 

------------------------------

ADD:
if ( a errnode == 3 errnode ) : 	 return a 

------------------------------

REPLACE:
if ( a @@@ 3 @@@ : 	 return a 

------------------------------


REMOVE:
if ( 3 ) : 	 return a 

------------------------------

ADD:
if ( errnode a errnode == 3 ) : 	 return a 

------------------------------

REPLACE:
if ( @@@ @@@ 3 ) : 	 return a 

------------------------------


Programs with 3 errors
REMOVE:
if a == 3 ) : return 

------------------------------

ADD:
if errnode ( a == 3 ) : errnode 	 return errnode a 

------------------------------

REPLACE:
if @@@ a == 3 ) : @@@ return @@@ 

------------------------------


REMOVE:
if a == : 	 return a 

------------------------------

ADD:
if errnode ( a == errnode 3 errnode ) : 	 return a 

------------------------------

REPLACE:
if @@@ a == @@@ @@@ : 	 return a 

------------------------------


Syntax error at ''='
'
None
'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( a >= 3 ) : return a 

------------------------------

ADD:
if ( a >= 3 ) : errnode 	 return a 

------------------------------

REPLACE:
if ( a >= 3 ) : @@@ return a 

------------------------------


REMOVE:
if ( >= 3 ) : 	 return a 

------------------------------

ADD:
if ( errnode a >= 3 ) : 	 return a 

------------------------------

REPLACE:
if ( @@@ >= 3 ) : 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
if ( a 3 : 	 return a 

------------------------------

ADD:
if ( a errnode >= 3 errnode ) : 	 return a 

------------------------------

REPLACE:
if ( a @@@ 3 @@@ : 	 return a 

------------------------------


REMOVE:
if ( a >= 3 ) return a 

------------------------------

ADD:
if ( a >= 3 ) errnode : errnode 	 return a 

------------------------------

REPLACE:
if ( a >= 3 ) @@@ @@@ return a 

------------------------------


Programs with 3 errors
REMOVE:
if ( a >= 3 : 	 

------------------------------

ADD:
if ( a >= 3 errnode ) : 	 errnode return errnode a 

------------------------------

REPLACE:
if ( a >= 3 @@@ : 	 @@@ @@@ 

------------------------------


REMOVE:
if ( >= 3 ) : a 

------------------------------

ADD:
if ( errnode a >= 3 ) : errnode 	 errnode return a 

------------------------------

REPLACE:
if ( @@@ >= 3 ) : @@@ @@@ a 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( a 3 ) : 	 return a 

------------------------------

ADD:
if ( a errnode >= 3 ) : 	 return a 

------------------------------

REPLACE:
if ( a @@@ 3 ) : 	 return a 

------------------------------


REMOVE:
if ( a 3 ) : 	 return a 

------------------------------

ADD:
if ( a errnode >= 3 ) : 	 return a 

------------------------------

REPLACE:
if ( a @@@ 3 ) : 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
if ( >= 3 ) 	 return a 

------------------------------

ADD:
if ( errnode a >= 3 ) errnode : 	 return a 

------------------------------

REPLACE:
if ( @@@ >= 3 ) @@@ 	 return a 

------------------------------


REMOVE:
if ( a >= ) : return a 

------------------------------

ADD:
if ( a >= errnode 3 ) : errnode 	 return a 

------------------------------

REPLACE:
if ( a >= @@@ ) : @@@ return a 

------------------------------


Programs with 3 errors
REMOVE:
if ( >= 3 : return a 

------------------------------

ADD:
if ( errnode a >= 3 errnode ) : errnode 	 return a 

------------------------------

REPLACE:
if ( @@@ >= 3 @@@ : @@@ return a 

------------------------------


REMOVE:
if ( a 3 ) : return 

------------------------------

ADD:
if ( a errnode >= 3 ) : errnode 	 return errnode a 

------------------------------

REPLACE:
if ( a @@@ 3 ) : @@@ return @@@ 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( a >= 3 ) : return a 

------------------------------

ADD:
if ( a >= 3 ) : errnode 	 return a 

------------------------------

REPLACE:
if ( a >= 3 ) : @@@ return a 

------------------------------


REMOVE:
if ( a 3 ) : 	 return a 

------------------------------

ADD:
if ( a errnode >= 3 ) : 	 return a 

------------------------------

REPLACE:
if ( a @@@ 3 ) : 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
if ( a 3 ) : 	 return 

------------------------------

ADD:
if ( a errnode >= 3 ) : 	 return errnode a 

------------------------------

REPLACE:
if ( a @@@ 3 ) : 	 return @@@ 

------------------------------


REMOVE:
if ( a >= ) : return a 

------------------------------

ADD:
if ( a >= errnode 3 ) : errnode 	 return a 

------------------------------

REPLACE:
if ( a >= @@@ ) : @@@ return a 

------------------------------


Programs with 3 errors
REMOVE:
if ( a 3 ) return a 

------------------------------

ADD:
if ( a errnode >= 3 ) errnode : errnode 	 return a 

------------------------------

REPLACE:
if ( a @@@ 3 ) @@@ @@@ return a 

------------------------------


REMOVE:
if >= 3 ) : return a 

------------------------------

ADD:
if errnode ( errnode a >= 3 ) : errnode 	 return a 

------------------------------

REPLACE:
if @@@ @@@ >= 3 ) : @@@ return a 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
if ( a 3 ) : 	 return a 

------------------------------

ADD:
if ( a errnode >= 3 ) : 	 return a 

------------------------------

REPLACE:
if ( a @@@ 3 ) : 	 return a 

------------------------------


REMOVE:
if ( >= 3 ) : 	 return a 

------------------------------

ADD:
if ( errnode a >= 3 ) : 	 return a 

------------------------------

REPLACE:
if ( @@@ >= 3 ) : 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
if ( >= 3 ) : 	 return 

------------------------------

ADD:
if ( errnode a >= 3 ) : 	 return errnode a 

------------------------------

REPLACE:
if ( @@@ >= 3 ) : 	 return @@@ 

------------------------------


REMOVE:
if ( a 3 ) 	 return a 

------------------------------

ADD:
if ( a errnode >= 3 ) errnode : 	 return a 

------------------------------

REPLACE:
if ( a @@@ 3 ) @@@ 	 return a 

------------------------------


Programs with 3 errors
REMOVE:
if a >= : 	 return a 

------------------------------

ADD:
if errnode ( a >= errnode 3 errnode ) : 	 return a 

------------------------------

REPLACE:
if @@@ a >= @@@ @@@ : 	 return a 

------------------------------


REMOVE:
if ( ) : 	 return a 

------------------------------

ADD:
if ( errnode a errnode >= errnode 3 ) : 	 return a 

------------------------------

REPLACE:
if ( @@@ @@@ @@@ ) : 	 return a 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'

Programs with 1 errors
REMOVE:
if ( a >= ) : 	 a = a * 2 	 return a 

------------------------------

ADD:
if ( a >= errnode 3 ) : 	 a = a * 2 	 return a 

------------------------------

REPLACE:
if ( a >= @@@ ) : 	 a = a * 2 	 return a 

------------------------------


REMOVE:
if ( a >= ) : 	 a = a * 2 	 return a 

------------------------------

ADD:
if ( a >= errnode 3 ) : 	 a = a * 2 	 return a 

------------------------------

REPLACE:
if ( a >= @@@ ) : 	 a = a * 2 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
if a 3 ) : 	 a = a * 2 	 return a 

------------------------------

ADD:
if errnode ( a errnode >= 3 ) : 	 a = a * 2 	 return a 

------------------------------

REPLACE:
if @@@ a @@@ 3 ) : 	 a = a * 2 	 return a 

------------------------------


REMOVE:
if ( a >= 3 ) 	 a = * 2 	 return a 

------------------------------

ADD:
if ( a >= 3 ) errnode : 	 a = errnode a * 2 	 return a 

------------------------------

REPLACE:
if ( a >= 3 ) @@@ 	 a = @@@ * 2 	 return a 

------------------------------


Programs with 3 errors
REMOVE:
if ( a >= 3 ) : a = a 	 return a 

------------------------------

ADD:
if ( a >= 3 ) : errnode 	 a = a errnode * errnode 2 	 return a 

------------------------------

REPLACE:
if ( a >= 3 ) : @@@ a = a @@@ @@@ 	 return a 

------------------------------


REMOVE:
if ( a >= 3 ) : 	 a = a 	 a 

------------------------------

ADD:
if ( a >= 3 ) : 	 a = a errnode * errnode 2 	 errnode return a 

------------------------------

REPLACE:
if ( a >= 3 ) : 	 a = a @@@ @@@ 	 @@@ a 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'

Programs with 1 errors
REMOVE:
if ( a >= 3 ) : 	 = a * 2 	 return a 

------------------------------

ADD:
if ( a >= 3 ) : 	 errnode a = a * 2 	 return a 

------------------------------

REPLACE:
if ( a >= 3 ) : 	 @@@ = a * 2 	 return a 

------------------------------


REMOVE:
if ( a >= 3 ) : 	 a = a * 2 	 a 

------------------------------

ADD:
if ( a >= 3 ) : 	 a = a * 2 	 errnode return a 

------------------------------

REPLACE:
if ( a >= 3 ) : 	 a = a * 2 	 @@@ a 

------------------------------


Programs with 2 errors
REMOVE:
if ( a >= 3 ) 	 = a * 2 	 return a 

------------------------------

ADD:
if ( a >= 3 ) errnode : 	 errnode a = a * 2 	 return a 

------------------------------

REPLACE:
if ( a >= 3 ) @@@ 	 @@@ = a * 2 	 return a 

------------------------------


REMOVE:
if ( a >= 3 ) : 	 a a * 	 return a 

------------------------------

ADD:
if ( a >= 3 ) : 	 a errnode = a * errnode 2 	 return a 

------------------------------

REPLACE:
if ( a >= 3 ) : 	 a @@@ a * @@@ 	 return a 

------------------------------


Programs with 3 errors
REMOVE:
if ( a >= ) 	 a a * 2 	 return a 

------------------------------

ADD:
if ( a >= errnode 3 ) errnode : 	 a errnode = a * 2 	 return a 

------------------------------

REPLACE:
if ( a >= @@@ ) @@@ 	 a @@@ a * 2 	 return a 

------------------------------


REMOVE:
if a >= 3 : 	 = a * 2 	 return a 

------------------------------

ADD:
if errnode ( a >= 3 errnode ) : 	 errnode a = a * 2 	 return a 

------------------------------

REPLACE:
if @@@ a >= 3 @@@ : 	 @@@ = a * 2 	 return a 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'

Programs with 1 errors
REMOVE:
if ( a >= 3 ) : a = a * 2 	 return a 

------------------------------

ADD:
if ( a >= 3 ) : errnode 	 a = a * 2 	 return a 

------------------------------

REPLACE:
if ( a >= 3 ) : @@@ a = a * 2 	 return a 

------------------------------


REMOVE:
if ( a >= ) : 	 a = a * 2 	 return a 

------------------------------

ADD:
if ( a >= errnode 3 ) : 	 a = a * 2 	 return a 

------------------------------

REPLACE:
if ( a >= @@@ ) : 	 a = a * 2 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
if ( a ) : 	 a = a * 2 	 return a 

------------------------------

ADD:
if ( a errnode >= errnode 3 ) : 	 a = a * 2 	 return a 

------------------------------

REPLACE:
if ( a @@@ @@@ ) : 	 a = a * 2 	 return a 

------------------------------


REMOVE:
if ( >= 3 ) 	 a = a * 2 	 return a 

------------------------------

ADD:
if ( errnode a >= 3 ) errnode : 	 a = a * 2 	 return a 

------------------------------

REPLACE:
if ( @@@ >= 3 ) @@@ 	 a = a * 2 	 return a 

------------------------------


Programs with 3 errors
REMOVE:
if ( a >= 3 ) : 	 a = a * return 

------------------------------

ADD:
if ( a >= 3 ) : 	 a = a * errnode 2 errnode 	 return errnode a 

------------------------------

REPLACE:
if ( a >= 3 ) : 	 a = a * @@@ @@@ return @@@ 

------------------------------


REMOVE:
if ( a >= 3 ) : 	 a * 2 	 a 

------------------------------

ADD:
if ( a >= 3 ) : 	 a errnode = errnode a * 2 	 errnode return a 

------------------------------

REPLACE:
if ( a >= 3 ) : 	 a @@@ @@@ * 2 	 @@@ a 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'else'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'b'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'else'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'b'

Programs with 1 errors
REMOVE:
if ( a >= 3 ) : 	 = a * 2 	 return a else : 	 return b 

------------------------------

ADD:
if ( a >= 3 ) : 	 errnode a = a * 2 	 return a else : 	 return b 

------------------------------

REPLACE:
if ( a >= 3 ) : 	 @@@ = a * 2 	 return a else : 	 return b 

------------------------------


REMOVE:
if ( a >= 3 ) : 	 a = a * 	 return a else : 	 return b 

------------------------------

ADD:
if ( a >= 3 ) : 	 a = a * errnode 2 	 return a else : 	 return b 

------------------------------

REPLACE:
if ( a >= 3 ) : 	 a = a * @@@ 	 return a else : 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a >= ) : 	 a = a * 2 	 return a else : 	 b 

------------------------------

ADD:
if ( a >= errnode 3 ) : 	 a = a * 2 	 return a else : 	 errnode return b 

------------------------------

REPLACE:
if ( a >= @@@ ) : 	 a = a * 2 	 return a else : 	 @@@ b 

------------------------------


REMOVE:
if ( a >= 3 ) : 	 a = a * 2 	 return a else : 	 

------------------------------

ADD:
if ( a >= 3 ) : 	 a = a * 2 	 return a else : 	 errnode return errnode b 

------------------------------

REPLACE:
if ( a >= 3 ) : 	 a = a * 2 	 return a else : 	 @@@ @@@ 

------------------------------


Programs with 3 errors
REMOVE:
if a >= 3 ) : 	 a = a * 2 a else : 	 return b 

------------------------------

ADD:
if errnode ( a >= 3 ) : 	 a = a * 2 errnode 	 errnode return a else : 	 return b 

------------------------------

REPLACE:
if @@@ a >= 3 ) : 	 a = a * 2 @@@ @@@ a else : 	 return b 

------------------------------


REMOVE:
if ( ) : 	 a = a * 2 	 return a else : 	 return b 

------------------------------

ADD:
if ( errnode a errnode >= errnode 3 ) : 	 a = a * 2 	 return a else : 	 return b 

------------------------------

REPLACE:
if ( @@@ @@@ @@@ ) : 	 a = a * 2 	 return a else : 	 return b 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'b'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'3'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'b'

Programs with 1 errors
REMOVE:
if ( >= 3 ) : 	 a = a * 2 	 return a else : 	 return b 

------------------------------

ADD:
if ( errnode a >= 3 ) : 	 a = a * 2 	 return a else : 	 return b 

------------------------------

REPLACE:
if ( @@@ >= 3 ) : 	 a = a * 2 	 return a else : 	 return b 

------------------------------


REMOVE:
if a >= 3 ) : 	 a = a * 2 	 return a else : 	 return b 

------------------------------

ADD:
if errnode ( a >= 3 ) : 	 a = a * 2 	 return a else : 	 return b 

------------------------------

REPLACE:
if @@@ a >= 3 ) : 	 a = a * 2 	 return a else : 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a >= ) : 	 a = a * 	 return a else : 	 return b 

------------------------------

ADD:
if ( a >= errnode 3 ) : 	 a = a * errnode 2 	 return a else : 	 return b 

------------------------------

REPLACE:
if ( a >= @@@ ) : 	 a = a * @@@ 	 return a else : 	 return b 

------------------------------


REMOVE:
if ( a >= 3 ) 	 a = a * 2 	 return a else : 	 return 

------------------------------

ADD:
if ( a >= 3 ) errnode : 	 a = a * 2 	 return a else : 	 return errnode b 

------------------------------

REPLACE:
if ( a >= 3 ) @@@ 	 a = a * 2 	 return a else : 	 return @@@ 

------------------------------


Programs with 3 errors
REMOVE:
if ( a 3 ) 	 a = a * 2 	 return a else 	 return b 

------------------------------

ADD:
if ( a errnode >= 3 ) errnode : 	 a = a * 2 	 return a else errnode : 	 return b 

------------------------------

REPLACE:
if ( a @@@ 3 ) @@@ 	 a = a * 2 	 return a else @@@ 	 return b 

------------------------------


REMOVE:
if ( >= 3 ) : 	 a = a * 2 	 return else : 	 return 

------------------------------

ADD:
if ( errnode a >= 3 ) : 	 a = a * 2 	 return errnode a else : 	 return errnode b 

------------------------------

REPLACE:
if ( @@@ >= 3 ) : 	 a = a * 2 	 return @@@ else : 	 return @@@ 

------------------------------


Syntax error at ''else'
'
None
'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'0'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'0'

Programs with 1 errors
REMOVE:
if ( a >= 0 ) : 	 a a * 2 	 return a elif ( a >= 0 ) : 	 return 0 

------------------------------

ADD:
if ( a >= 0 ) : 	 a errnode = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a @@@ a * 2 	 return a elif ( a >= 0 ) : 	 return 0 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a = a * 	 return a elif ( a >= 0 ) : 	 return 0 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * errnode 2 	 return a elif ( a >= 0 ) : 	 return 0 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * @@@ 	 return a elif ( a >= 0 ) : 	 return 0 

------------------------------


Programs with 2 errors
REMOVE:
if ( a >= 0 ) : a = a * 2 	 return a elif ( a >= 0 ) : return 0 

------------------------------

ADD:
if ( a >= 0 ) : errnode 	 a = a * 2 	 return a elif ( a >= 0 ) : errnode 	 return 0 

------------------------------

REPLACE:
if ( a >= 0 ) : @@@ a = a * 2 	 return a elif ( a >= 0 ) : @@@ return 0 

------------------------------


REMOVE:
if ( a 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : return 0 

------------------------------

ADD:
if ( a errnode >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : errnode 	 return 0 

------------------------------

REPLACE:
if ( a @@@ 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : @@@ return 0 

------------------------------


Programs with 3 errors
REMOVE:
if ( a >= 0 ) : 	 = a * 2 	 return a ( >= 0 ) : 	 return 0 

------------------------------

ADD:
if ( a >= 0 ) : 	 errnode a = a * 2 	 return a errnode elif ( errnode a >= 0 ) : 	 return 0 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 @@@ = a * 2 	 return a @@@ ( @@@ >= 0 ) : 	 return 0 

------------------------------


REMOVE:
if ( a >= ) : 	 a = a 	 return a elif ( a >= 0 ) : 	 return 0 

------------------------------

ADD:
if ( a >= errnode 0 ) : 	 a = a errnode * errnode 2 	 return a elif ( a >= 0 ) : 	 return 0 

------------------------------

REPLACE:
if ( a >= @@@ ) : 	 a = a @@@ @@@ 	 return a elif ( a >= 0 ) : 	 return 0 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'b'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'b'

Programs with 1 errors
REMOVE:
if ( a >= 0 ) : 	 a = a 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a errnode * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a @@@ 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 return b 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) 	 return 0 else : 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) errnode : 	 return 0 else : 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) @@@ 	 return 0 else : 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a ( a >= 0 ) : 	 return else : 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a errnode elif ( a >= 0 ) : 	 return errnode 0 else : 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a @@@ ( a >= 0 ) : 	 return @@@ else : 	 return b 

------------------------------


REMOVE:
if ( >= 0 ) : 	 a = a * 2 	 return a elif ( a >= ) : 	 return 0 else : 	 return b 

------------------------------

ADD:
if ( errnode a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= errnode 0 ) : 	 return 0 else : 	 return b 

------------------------------

REPLACE:
if ( @@@ >= 0 ) : 	 a = a * 2 	 return a elif ( a >= @@@ ) : 	 return 0 else : 	 return b 

------------------------------


Programs with 3 errors
REMOVE:
if ( a >= 0 : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 0 : 	 return b 

------------------------------

ADD:
if ( a >= 0 errnode ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 errnode return 0 errnode else : 	 return b 

------------------------------

REPLACE:
if ( a >= 0 @@@ : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 @@@ 0 @@@ : 	 return b 

------------------------------


REMOVE:
if ( a 0 ) : a = a * 2 	 return a elif ( a 0 ) : 	 return 0 else : 	 return b 

------------------------------

ADD:
if ( a errnode >= 0 ) : errnode 	 a = a * 2 	 return a elif ( a errnode >= 0 ) : 	 return 0 else : 	 return b 

------------------------------

REPLACE:
if ( a @@@ 0 ) : @@@ a = a * 2 	 return a elif ( a @@@ 0 ) : 	 return 0 else : 	 return b 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'b'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'b'

Programs with 1 errors
REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif a >= 0 ) : 	 return 0 else : 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif errnode ( a >= 0 ) : 	 return 0 else : 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif @@@ a >= 0 ) : 	 return 0 else : 	 return b 

------------------------------


REMOVE:
if ( a >= 0 ) 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 return b 

------------------------------

ADD:
if ( a >= 0 ) errnode : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) @@@ 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a >= 0 ) 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 : 	 return b 

------------------------------

ADD:
if ( a >= 0 ) errnode : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 errnode else : 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) @@@ 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 @@@ : 	 return b 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a = a * 2 return a elif ( a >= 0 : 	 return 0 else : 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 errnode 	 return a elif ( a >= 0 errnode ) : 	 return 0 else : 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 @@@ return a elif ( a >= 0 @@@ : 	 return 0 else : 	 return b 

------------------------------


Programs with 3 errors
REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) 	 return 0 else 	 b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) errnode : 	 return 0 else errnode : 	 errnode return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) @@@ 	 return 0 else @@@ 	 @@@ b 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a = * 2 	 return a elif ( a 0 ) : 	 return 0 else : return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = errnode a * 2 	 return a elif ( a errnode >= 0 ) : 	 return 0 else : errnode 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = @@@ * 2 	 return a elif ( a @@@ 0 ) : 	 return 0 else : @@@ return b 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'b'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'b'

Programs with 1 errors
REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 : 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 errnode else : 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 @@@ : 	 return b 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 0 else : 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 errnode return 0 else : 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 @@@ 0 else : 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a >= 0 ) : 	 = a * 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 errnode a = a * errnode 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 @@@ = a * @@@ 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 return b 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a = a * 2 return a elif ( a >= 0 ) : 	 return else : 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 errnode 	 return a elif ( a >= 0 ) : 	 return errnode 0 else : 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 @@@ return a elif ( a >= 0 ) : 	 return @@@ else : 	 return b 

------------------------------


Programs with 3 errors
REMOVE:
if ( a >= 0 ) : 	 a a * 2 return a elif ( a >= 0 ) 	 return 0 else : 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a errnode = a * 2 errnode 	 return a elif ( a >= 0 ) errnode : 	 return 0 else : 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a @@@ a * 2 @@@ return a elif ( a >= 0 ) @@@ 	 return 0 else : 	 return b 

------------------------------


REMOVE:
if ( >= 0 ) : 	 a = a 2 	 return a elif ( a >= 0 ) : 	 return else : 	 return b 

------------------------------

ADD:
if ( errnode a >= 0 ) : 	 a = a errnode * 2 	 return a elif ( a >= 0 ) : 	 return errnode 0 else : 	 return b 

------------------------------

REPLACE:
if ( @@@ >= 0 ) : 	 a = a @@@ 2 	 return a elif ( a >= 0 ) : 	 return @@@ else : 	 return b 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'atom'
										'b'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'atom'
										'b'

Programs with 1 errors
REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a errnode elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a @@@ ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 errnode return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 @@@ b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b errnode / errnode 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b @@@ @@@ 	 return b 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a ( a >= 0 ) 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a errnode elif ( a >= 0 ) errnode : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a @@@ ( a >= 0 ) @@@ 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


Programs with 3 errors
REMOVE:
if ( a 0 : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 	 return b 

------------------------------

ADD:
if ( a errnode >= 0 errnode ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / errnode 2 	 return b 

------------------------------

REPLACE:
if ( a @@@ 0 @@@ : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / @@@ 	 return b 

------------------------------


REMOVE:
if ( a >= ) : 	 a = a * 2 	 return a elif ( a >= 0 ) 	 return 0 else : b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= errnode 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) errnode : 	 return 0 else : errnode 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= @@@ ) : 	 a = a * 2 	 return a elif ( a >= 0 ) @@@ 	 return 0 else : @@@ b = b / 2 	 return b 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'atom'
										'b'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'atom'
										'b'

Programs with 1 errors
REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a else : 	 b = b / 2 	 return 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a else : 	 b = b / 2 	 return errnode b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a else : 	 b = b / 2 	 return @@@ 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a = a * 2 return a else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 errnode 	 return a else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 @@@ return a else : 	 b = b / 2 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a >= 0 ) : 	 a = 2 	 return a else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = errnode a errnode * 2 	 return a else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = @@@ @@@ 2 	 return a else : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
if ( a >= 0 ) 	 a a * 2 	 return a else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) errnode : 	 a errnode = a * 2 	 return a else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) @@@ 	 a @@@ a * 2 	 return a else : 	 b = b / 2 	 return b 

------------------------------


Programs with 3 errors
REMOVE:
if ( a >= 0 ) : 	 = a * 2 	 return a else : 	 b = b / 2 b 

------------------------------

ADD:
if ( a >= 0 ) : 	 errnode a = a * 2 	 return a else : 	 b = b / 2 errnode 	 errnode return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 @@@ = a * 2 	 return a else : 	 b = b / 2 @@@ @@@ b 

------------------------------


REMOVE:
if ( a >= 0 ) 	 a = * 2 return a else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) errnode : 	 a = errnode a * 2 errnode 	 return a else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) @@@ 	 a = @@@ * 2 @@@ return a else : 	 b = b / 2 	 return b 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'atom'
										'b'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'atom'
										'b'

Programs with 1 errors
REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 errnode return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 @@@ b 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a = a 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a errnode * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a @@@ 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a >= 0 ) : 	 a = a * 2 return a elif ( a >= ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 errnode 	 return a elif ( a >= errnode 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 @@@ return a elif ( a >= @@@ ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = / 2 	 return 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = errnode b / 2 	 return errnode b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = @@@ / 2 	 return @@@ 

------------------------------


Programs with 3 errors
REMOVE:
if ( a >= 0 : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = / 2 	 b 

------------------------------

ADD:
if ( a >= 0 errnode ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = errnode b / 2 	 errnode return b 

------------------------------

REPLACE:
if ( a >= 0 @@@ : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = @@@ / 2 	 @@@ b 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a = a * 	 return a elif ( a >= 0 ) 	 return 0 else : 	 b b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * errnode 2 	 return a elif ( a >= 0 ) errnode : 	 return 0 else : 	 b errnode = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * @@@ 	 return a elif ( a >= 0 ) @@@ 	 return 0 else : 	 b @@@ b / 2 	 return b 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'atom'
										'b'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'literal'
									'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'atom'
										'b'

Programs with 1 errors
REMOVE:
if ( a >= 0 ) : 	 a = a 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a errnode * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a @@@ 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
if ( a >= ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= errnode 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= @@@ ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : return 0 else : 	 b = b / 2 	 return 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : errnode 	 return 0 else : 	 b = b / 2 	 return errnode b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : @@@ return 0 else : 	 b = b / 2 	 return @@@ 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a a * 2 	 return a elif ( a >= 0 ) : 	 return else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a errnode = a * 2 	 return a elif ( a >= 0 ) : 	 return errnode 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a @@@ a * 2 	 return a elif ( a >= 0 ) : 	 return @@@ else : 	 b = b / 2 	 return b 

------------------------------


Programs with 3 errors
REMOVE:
if ( >= 0 ) : 	 a = a * 2 	 return a elif ( a >= ) : 	 return 0 else : 	 b = b 2 	 return b 

------------------------------

ADD:
if ( errnode a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= errnode 0 ) : 	 return 0 else : 	 b = b errnode / 2 	 return b 

------------------------------

REPLACE:
if ( @@@ >= 0 ) : 	 a = a * 2 	 return a elif ( a >= @@@ ) : 	 return 0 else : 	 b = b @@@ 2 	 return b 

------------------------------


REMOVE:
if ( >= 0 ) : 	 a = a * 	 return elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( errnode a >= 0 ) : 	 a = a * errnode 2 	 return errnode a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( @@@ >= 0 ) : 	 a = a * @@@ 	 return @@@ elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


Syntax error at ''\t'
'
None
Syntax error at ''if'
'
None
Syntax error at ''\t'
'
None
Syntax error at ''\t'
'
None
Syntax error at ''\t'
'
None
'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>'
				'arithmetic_expr'
					'atom'
						'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'
			'elif_stmt'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'b'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>'
				'arithmetic_expr'
					'atom'
						'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'
			'elif_stmt'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'b'

Programs with 1 errors
REMOVE:
if ( a > b ) 	 return a else : 	 return b 

------------------------------

ADD:
if ( a > b ) errnode : 	 return a else : 	 return b 

------------------------------

REPLACE:
if ( a > b ) @@@ 	 return a else : 	 return b 

------------------------------


REMOVE:
if ( > b ) : 	 return a else : 	 return b 

------------------------------

ADD:
if ( errnode a > b ) : 	 return a else : 	 return b 

------------------------------

REPLACE:
if ( @@@ > b ) : 	 return a else : 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a > b ) : 	 return a : 	 b 

------------------------------

ADD:
if ( a > b ) : 	 return a errnode else : 	 errnode return b 

------------------------------

REPLACE:
if ( a > b ) : 	 return a @@@ : 	 @@@ b 

------------------------------


REMOVE:
if ( a > b ) : 	 return a : 	 return 

------------------------------

ADD:
if ( a > b ) : 	 return a errnode else : 	 return errnode b 

------------------------------

REPLACE:
if ( a > b ) : 	 return a @@@ : 	 return @@@ 

------------------------------


Programs with 3 errors
REMOVE:
if ( a > b ) : return else : 	 return 

------------------------------

ADD:
if ( a > b ) : errnode 	 return errnode a else : 	 return errnode b 

------------------------------

REPLACE:
if ( a > b ) : @@@ return @@@ else : 	 return @@@ 

------------------------------


REMOVE:
if > b ) : 	 a else : 	 return b 

------------------------------

ADD:
if errnode ( errnode a > b ) : 	 errnode return a else : 	 return b 

------------------------------

REPLACE:
if @@@ @@@ > b ) : 	 @@@ a else : 	 return b 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>'
				'arithmetic_expr'
					'atom'
						'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'
			'elif_stmt'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'b'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>'
				'arithmetic_expr'
					'atom'
						'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'
			'elif_stmt'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'atom'
									'b'

Programs with 1 errors
REMOVE:
if ( a > b ) 	 return a else : 	 return b 

------------------------------

ADD:
if ( a > b ) errnode : 	 return a else : 	 return b 

------------------------------

REPLACE:
if ( a > b ) @@@ 	 return a else : 	 return b 

------------------------------


REMOVE:
if ( > b ) : 	 return a else : 	 return b 

------------------------------

ADD:
if ( errnode a > b ) : 	 return a else : 	 return b 

------------------------------

REPLACE:
if ( @@@ > b ) : 	 return a else : 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a b ) : 	 return else : 	 return b 

------------------------------

ADD:
if ( a errnode > b ) : 	 return errnode a else : 	 return b 

------------------------------

REPLACE:
if ( a @@@ b ) : 	 return @@@ else : 	 return b 

------------------------------


REMOVE:
if ( > b ) : return a else : 	 return b 

------------------------------

ADD:
if ( errnode a > b ) : errnode 	 return a else : 	 return b 

------------------------------

REPLACE:
if ( @@@ > b ) : @@@ return a else : 	 return b 

------------------------------


Programs with 3 errors
REMOVE:
if a > ) : 	 return a else 	 return b 

------------------------------

ADD:
if errnode ( a > errnode b ) : 	 return a else errnode : 	 return b 

------------------------------

REPLACE:
if @@@ a > @@@ ) : 	 return a else @@@ 	 return b 

------------------------------


REMOVE:
if ( a > ) : return a : 	 return b 

------------------------------

ADD:
if ( a > errnode b ) : errnode 	 return a errnode else : 	 return b 

------------------------------

REPLACE:
if ( a > @@@ ) : @@@ return a @@@ : 	 return b 

------------------------------


Syntax error at ''\t'
'
None
Syntax error at ''else'
'
None
Syntax error at ''\t'
'
None
Syntax error at ''for'
'
None
Syntax error at ''for'
'
None
'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
def foo ( a , b ) : 	 a 

------------------------------

ADD:
def foo ( a , b ) : 	 errnode return a 

------------------------------

REPLACE:
def foo ( a , b ) : 	 @@@ a 

------------------------------


REMOVE:
def foo ( a , b : 	 return a 

------------------------------

ADD:
def foo ( a , b errnode ) : 	 return a 

------------------------------

REPLACE:
def foo ( a , b @@@ : 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
def foo ( a b ) : 	 return 

------------------------------

ADD:
def foo ( a errnode , b ) : 	 return errnode a 

------------------------------

REPLACE:
def foo ( a @@@ b ) : 	 return @@@ 

------------------------------


REMOVE:
def foo ( , ) : 	 return a 

------------------------------

ADD:
def foo ( errnode a , errnode b ) : 	 return a 

------------------------------

REPLACE:
def foo ( @@@ , @@@ ) : 	 return a 

------------------------------


Programs with 3 errors
REMOVE:
def ( , b ) : 	 return 

------------------------------

ADD:
def errnode foo ( errnode a , b ) : 	 return errnode a 

------------------------------

REPLACE:
def @@@ ( @@@ , b ) : 	 return @@@ 

------------------------------


REMOVE:
def ( a , ) : 	 return 

------------------------------

ADD:
def errnode foo ( a , errnode b ) : 	 return errnode a 

------------------------------

REPLACE:
def @@@ ( a , @@@ ) : 	 return @@@ 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
def foo ( a ) : 	 a 

------------------------------

ADD:
def foo ( a ) : 	 errnode return a 

------------------------------

REPLACE:
def foo ( a ) : 	 @@@ a 

------------------------------


REMOVE:
def foo a ) : 	 return a 

------------------------------

ADD:
def foo errnode ( a ) : 	 return a 

------------------------------

REPLACE:
def foo @@@ a ) : 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
def foo ( a ) 	 a 

------------------------------

ADD:
def foo ( a ) errnode : 	 errnode return a 

------------------------------

REPLACE:
def foo ( a ) @@@ 	 @@@ a 

------------------------------


REMOVE:
def foo ( a ) : a 

------------------------------

ADD:
def foo ( a ) : errnode 	 errnode return a 

------------------------------

REPLACE:
def foo ( a ) : @@@ @@@ a 

------------------------------


Programs with 3 errors
REMOVE:
def foo ( a 	 return 

------------------------------

ADD:
def foo ( a errnode ) errnode : 	 return errnode a 

------------------------------

REPLACE:
def foo ( a @@@ @@@ 	 return @@@ 

------------------------------


REMOVE:
def ( ) 	 return a 

------------------------------

ADD:
def errnode foo ( errnode a ) errnode : 	 return a 

------------------------------

REPLACE:
def @@@ ( @@@ ) @@@ 	 return a 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
def ( a ) : 	 return a 

------------------------------

ADD:
def errnode foo ( a ) : 	 return a 

------------------------------

REPLACE:
def @@@ ( a ) : 	 return a 

------------------------------


REMOVE:
def foo ( a ) : 	 return 

------------------------------

ADD:
def foo ( a ) : 	 return errnode a 

------------------------------

REPLACE:
def foo ( a ) : 	 return @@@ 

------------------------------


Programs with 2 errors
REMOVE:
def foo ( a ) : 	 

------------------------------

ADD:
def foo ( a ) : 	 errnode return errnode a 

------------------------------

REPLACE:
def foo ( a ) : 	 @@@ @@@ 

------------------------------


REMOVE:
def foo ( a ) : return 

------------------------------

ADD:
def foo ( a ) : errnode 	 return errnode a 

------------------------------

REPLACE:
def foo ( a ) : @@@ return @@@ 

------------------------------


Programs with 3 errors
REMOVE:
def foo ( 	 return a 

------------------------------

ADD:
def foo ( errnode a errnode ) errnode : 	 return a 

------------------------------

REPLACE:
def foo ( @@@ @@@ @@@ 	 return a 

------------------------------


REMOVE:
def a : 	 return a 

------------------------------

ADD:
def errnode foo errnode ( a errnode ) : 	 return a 

------------------------------

REPLACE:
def @@@ @@@ a @@@ : 	 return a 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'+'
								'arithmetic_expr'
									'atom'
										'literal'
											'3'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'+'
								'arithmetic_expr'
									'atom'
										'literal'
											'3'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'

Programs with 1 errors
REMOVE:
def foo a ) : 	 a = a + 3 	 return a 

------------------------------

ADD:
def foo errnode ( a ) : 	 a = a + 3 	 return a 

------------------------------

REPLACE:
def foo @@@ a ) : 	 a = a + 3 	 return a 

------------------------------


REMOVE:
def foo ( a ) : 	 a a + 3 	 return a 

------------------------------

ADD:
def foo ( a ) : 	 a errnode = a + 3 	 return a 

------------------------------

REPLACE:
def foo ( a ) : 	 a @@@ a + 3 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
def ( a ) : 	 a = + 3 	 return a 

------------------------------

ADD:
def errnode foo ( a ) : 	 a = errnode a + 3 	 return a 

------------------------------

REPLACE:
def @@@ ( a ) : 	 a = @@@ + 3 	 return a 

------------------------------


REMOVE:
def foo ( a ) 	 = a + 3 	 return a 

------------------------------

ADD:
def foo ( a ) errnode : 	 errnode a = a + 3 	 return a 

------------------------------

REPLACE:
def foo ( a ) @@@ 	 @@@ = a + 3 	 return a 

------------------------------


Programs with 3 errors
REMOVE:
def foo ( a ) : 	 = a 	 return a 

------------------------------

ADD:
def foo ( a ) : 	 errnode a = a errnode + errnode 3 	 return a 

------------------------------

REPLACE:
def foo ( a ) : 	 @@@ = a @@@ @@@ 	 return a 

------------------------------


REMOVE:
def foo ( a ) 	 a = a + 3 a 

------------------------------

ADD:
def foo ( a ) errnode : 	 a = a + 3 errnode 	 errnode return a 

------------------------------

REPLACE:
def foo ( a ) @@@ 	 a = a + 3 @@@ @@@ a 

------------------------------


Syntax error at ''for'
'
None
Syntax error at ''for'
'
None
'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'('
				'a'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'

'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'('
				'a'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'

Programs with 1 errors
REMOVE:
for a ) : 	 return a 

------------------------------

ADD:
for errnode ( a ) : 	 return a 

------------------------------

REPLACE:
for @@@ a ) : 	 return a 

------------------------------


REMOVE:
for ( a ) : 	 a 

------------------------------

ADD:
for ( a ) : 	 errnode return a 

------------------------------

REPLACE:
for ( a ) : 	 @@@ a 

------------------------------


Programs with 2 errors
REMOVE:
for ( a : return a 

------------------------------

ADD:
for ( a errnode ) : errnode 	 return a 

------------------------------

REPLACE:
for ( a @@@ : @@@ return a 

------------------------------


REMOVE:
for ( a : 	 a 

------------------------------

ADD:
for ( a errnode ) : 	 errnode return a 

------------------------------

REPLACE:
for ( a @@@ : 	 @@@ a 

------------------------------


Programs with 3 errors
REMOVE:
for ( a ) 	 

------------------------------

ADD:
for ( a ) errnode : 	 errnode return errnode a 

------------------------------

REPLACE:
for ( a ) @@@ 	 @@@ @@@ 

------------------------------


REMOVE:
for a : 	 return 

------------------------------

ADD:
for errnode ( a errnode ) : 	 return errnode a 

------------------------------

REPLACE:
for @@@ a @@@ : 	 return @@@ 

------------------------------


'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'('
				'a'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'

'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'('
				'a'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'atom'
								'a'

Programs with 1 errors
REMOVE:
for ( a ) : return a 

------------------------------

ADD:
for ( a ) : errnode 	 return a 

------------------------------

REPLACE:
for ( a ) : @@@ return a 

------------------------------


REMOVE:
for ( a ) : 	 return 

------------------------------

ADD:
for ( a ) : 	 return errnode a 

------------------------------

REPLACE:
for ( a ) : 	 return @@@ 

------------------------------


Programs with 2 errors
REMOVE:
for ( a : 	 return 

------------------------------

ADD:
for ( a errnode ) : 	 return errnode a 

------------------------------

REPLACE:
for ( a @@@ : 	 return @@@ 

------------------------------


REMOVE:
for ( a : 	 a 

------------------------------

ADD:
for ( a errnode ) : 	 errnode return a 

------------------------------

REPLACE:
for ( a @@@ : 	 @@@ a 

------------------------------


Programs with 3 errors
REMOVE:
for a ) : 	 

------------------------------

ADD:
for errnode ( a ) : 	 errnode return errnode a 

------------------------------

REPLACE:
for @@@ a ) : 	 @@@ @@@ 

------------------------------


REMOVE:
for ( : return a 

------------------------------

ADD:
for ( errnode a errnode ) : errnode 	 return a 

------------------------------

REPLACE:
for ( @@@ @@@ : @@@ return a 

------------------------------


'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'sum'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'sum'
									'arithmetic_op'
										'+'
									'arithmetic_expr'
										'atom'
											'i'

'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'sum'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'sum'
									'arithmetic_op'
										'+'
									'arithmetic_expr'
										'atom'
											'i'

Programs with 1 errors
REMOVE:
for i in list : 	 sum = sum i 

------------------------------

ADD:
for i in list : 	 sum = sum errnode + i 

------------------------------

REPLACE:
for i in list : 	 sum = sum @@@ i 

------------------------------


REMOVE:
for i in list : 	 sum = + i 

------------------------------

ADD:
for i in list : 	 sum = errnode sum + i 

------------------------------

REPLACE:
for i in list : 	 sum = @@@ + i 

------------------------------


Programs with 2 errors
REMOVE:
for i in list : 	 sum sum + 

------------------------------

ADD:
for i in list : 	 sum errnode = sum + errnode i 

------------------------------

REPLACE:
for i in list : 	 sum @@@ sum + @@@ 

------------------------------


REMOVE:
for i in list 	 sum sum + i 

------------------------------

ADD:
for i in list errnode : 	 sum errnode = sum + i 

------------------------------

REPLACE:
for i in list @@@ 	 sum @@@ sum + i 

------------------------------


Programs with 3 errors
REMOVE:
for i in list : sum sum i 

------------------------------

ADD:
for i in list : errnode 	 sum errnode = sum errnode + i 

------------------------------

REPLACE:
for i in list : @@@ sum @@@ sum @@@ i 

------------------------------


REMOVE:
for : 	 sum = sum + i 

------------------------------

ADD:
for errnode i errnode in errnode list : 	 sum = sum + i 

------------------------------

REPLACE:
for @@@ @@@ @@@ : 	 sum = sum + i 

------------------------------


'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'sum'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'sum'
									'arithmetic_op'
										'+'
									'arithmetic_expr'
										'atom'
											'i'

'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'sum'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'sum'
									'arithmetic_op'
										'+'
									'arithmetic_expr'
										'atom'
											'i'

Programs with 1 errors
REMOVE:
for i in list : 	 sum = + i 

------------------------------

ADD:
for i in list : 	 sum = errnode sum + i 

------------------------------

REPLACE:
for i in list : 	 sum = @@@ + i 

------------------------------


REMOVE:
for i in : 	 sum = sum + i 

------------------------------

ADD:
for i in errnode list : 	 sum = sum + i 

------------------------------

REPLACE:
for i in @@@ : 	 sum = sum + i 

------------------------------


Programs with 2 errors
REMOVE:
for i in list : 	 sum = i 

------------------------------

ADD:
for i in list : 	 sum = errnode sum errnode + i 

------------------------------

REPLACE:
for i in list : 	 sum = @@@ @@@ i 

------------------------------


REMOVE:
for i in : 	 sum = sum i 

------------------------------

ADD:
for i in errnode list : 	 sum = sum errnode + i 

------------------------------

REPLACE:
for i in @@@ : 	 sum = sum @@@ i 

------------------------------


Programs with 3 errors
REMOVE:
for i in 	 sum = sum i 

------------------------------

ADD:
for i in errnode list errnode : 	 sum = sum errnode + i 

------------------------------

REPLACE:
for i in @@@ @@@ 	 sum = sum @@@ i 

------------------------------


REMOVE:
for i in list : = sum i 

------------------------------

ADD:
for i in list : errnode 	 errnode sum = sum errnode + i 

------------------------------

REPLACE:
for i in list : @@@ @@@ = sum @@@ i 

------------------------------


'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'sum'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'sum'
									'arithmetic_op'
										'+'
									'arithmetic_expr'
										'atom'
											'i'

'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'sum'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'sum'
									'arithmetic_op'
										'+'
									'arithmetic_expr'
										'atom'
											'i'

Programs with 1 errors
REMOVE:
for i in list : 	 sum = sum + 

------------------------------

ADD:
for i in list : 	 sum = sum + errnode i 

------------------------------

REPLACE:
for i in list : 	 sum = sum + @@@ 

------------------------------


REMOVE:
for i in list : 	 sum = sum i 

------------------------------

ADD:
for i in list : 	 sum = sum errnode + i 

------------------------------

REPLACE:
for i in list : 	 sum = sum @@@ i 

------------------------------


Programs with 2 errors
REMOVE:
for list : 	 sum = sum + i 

------------------------------

ADD:
for errnode i errnode in list : 	 sum = sum + i 

------------------------------

REPLACE:
for @@@ @@@ list : 	 sum = sum + i 

------------------------------


REMOVE:
for in list : 	 = sum + i 

------------------------------

ADD:
for errnode i in list : 	 errnode sum = sum + i 

------------------------------

REPLACE:
for @@@ in list : 	 @@@ = sum + i 

------------------------------


Programs with 3 errors
REMOVE:
for in list : 	 sum + i 

------------------------------

ADD:
for errnode i in list : 	 sum errnode = errnode sum + i 

------------------------------

REPLACE:
for @@@ in list : 	 sum @@@ @@@ + i 

------------------------------


REMOVE:
for i in : sum = + i 

------------------------------

ADD:
for i in errnode list : errnode 	 sum = errnode sum + i 

------------------------------

REPLACE:
for i in @@@ : @@@ sum = @@@ + i 

------------------------------


'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'sum'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'sum'
									'arithmetic_op'
										'+'
									'arithmetic_expr'
										'atom'
											'i'

'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'sum'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'sum'
									'arithmetic_op'
										'+'
									'arithmetic_expr'
										'atom'
											'i'

Programs with 1 errors
REMOVE:
for i in list : 	 sum = + i 

------------------------------

ADD:
for i in list : 	 sum = errnode sum + i 

------------------------------

REPLACE:
for i in list : 	 sum = @@@ + i 

------------------------------


REMOVE:
for i list : 	 sum = sum + i 

------------------------------

ADD:
for i errnode in list : 	 sum = sum + i 

------------------------------

REPLACE:
for i @@@ list : 	 sum = sum + i 

------------------------------


Programs with 2 errors
REMOVE:
for i : 	 sum = sum + i 

------------------------------

ADD:
for i errnode in errnode list : 	 sum = sum + i 

------------------------------

REPLACE:
for i @@@ @@@ : 	 sum = sum + i 

------------------------------


REMOVE:
for in : 	 sum = sum + i 

------------------------------

ADD:
for errnode i in errnode list : 	 sum = sum + i 

------------------------------

REPLACE:
for @@@ in @@@ : 	 sum = sum + i 

------------------------------


Programs with 3 errors
REMOVE:
for i in : 	 = sum i 

------------------------------

ADD:
for i in errnode list : 	 errnode sum = sum errnode + i 

------------------------------

REPLACE:
for i in @@@ : 	 @@@ = sum @@@ i 

------------------------------


REMOVE:
for i in list : = + i 

------------------------------

ADD:
for i in list : errnode 	 errnode sum = errnode sum + i 

------------------------------

REPLACE:
for i in list : @@@ @@@ = @@@ + i 

------------------------------


Illegal character '"'
Illegal character '\'
Syntax error at ''n'
'
Illegal character '"'
None
'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'func_call_stmt'
							'print'
							'('
							'"he"'
							')'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'sum'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'sum'
										'arithmetic_op'
											'+'
										'arithmetic_expr'
											'atom'
												'i'

'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'func_call_stmt'
							'print'
							'('
							'"he"'
							')'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'sum'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'sum'
										'arithmetic_op'
											'+'
										'arithmetic_expr'
											'atom'
												'i'

Programs with 1 errors
REMOVE:
for i in list : print ( "he" ) 	 sum = sum + i 

------------------------------

ADD:
for i in list : errnode 	 print ( "he" ) 	 sum = sum + i 

------------------------------

REPLACE:
for i in list : @@@ print ( "he" ) 	 sum = sum + i 

------------------------------


REMOVE:
for i in list : 	 print ( "he" 	 sum = sum + i 

------------------------------

ADD:
for i in list : 	 print ( "he" errnode ) 	 sum = sum + i 

------------------------------

REPLACE:
for i in list : 	 print ( "he" @@@ 	 sum = sum + i 

------------------------------


Programs with 2 errors
REMOVE:
for in list : 	 print ( "he" ) 	 = sum + i 

------------------------------

ADD:
for errnode i in list : 	 print ( "he" ) 	 errnode sum = sum + i 

------------------------------

REPLACE:
for @@@ in list : 	 print ( "he" ) 	 @@@ = sum + i 

------------------------------


REMOVE:
for i in : print ( "he" ) 	 sum = sum + i 

------------------------------

ADD:
for i in errnode list : errnode 	 print ( "he" ) 	 sum = sum + i 

------------------------------

REPLACE:
for i in @@@ : @@@ print ( "he" ) 	 sum = sum + i 

------------------------------


Programs with 3 errors
REMOVE:
for i list : 	 print ( 	 sum = sum + i 

------------------------------

ADD:
for i errnode in list : 	 print ( errnode "he" errnode ) 	 sum = sum + i 

------------------------------

REPLACE:
for i @@@ list : 	 print ( @@@ @@@ 	 sum = sum + i 

------------------------------


REMOVE:
for i list : 	 print ( ) 	 sum = sum + 

------------------------------

ADD:
for i errnode in list : 	 print ( errnode "he" ) 	 sum = sum + errnode i 

------------------------------

REPLACE:
for i @@@ list : 	 print ( @@@ ) 	 sum = sum + @@@ 

------------------------------


'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'func_call_stmt'
							'print'
							'('
							'"hello"'
							')'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'sum'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'sum'
										'arithmetic_op'
											'+'
										'arithmetic_expr'
											'atom'
												'i'

'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'func_call_stmt'
							'print'
							'('
							'"hello"'
							')'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'sum'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'sum'
										'arithmetic_op'
											'+'
										'arithmetic_expr'
											'atom'
												'i'

Programs with 1 errors
REMOVE:
for i in : 	 print ( "hello" ) 	 sum = sum + i 

------------------------------

ADD:
for i in errnode list : 	 print ( "hello" ) 	 sum = sum + i 

------------------------------

REPLACE:
for i in @@@ : 	 print ( "hello" ) 	 sum = sum + i 

------------------------------


REMOVE:
for in list : 	 print ( "hello" ) 	 sum = sum + i 

------------------------------

ADD:
for errnode i in list : 	 print ( "hello" ) 	 sum = sum + i 

------------------------------

REPLACE:
for @@@ in list : 	 print ( "hello" ) 	 sum = sum + i 

------------------------------


Programs with 2 errors
REMOVE:
for i in list : 	 print ) 	 sum = sum + i 

------------------------------

ADD:
for i in list : 	 print errnode ( errnode "hello" ) 	 sum = sum + i 

------------------------------

REPLACE:
for i in list : 	 print @@@ @@@ ) 	 sum = sum + i 

------------------------------


REMOVE:
for i in list : print ( "hello" ) 	 = sum + i 

------------------------------

ADD:
for i in list : errnode 	 print ( "hello" ) 	 errnode sum = sum + i 

------------------------------

REPLACE:
for i in list : @@@ print ( "hello" ) 	 @@@ = sum + i 

------------------------------


Programs with 3 errors
REMOVE:
for in list : 	 ( "hello" ) 	 sum = + i 

------------------------------

ADD:
for errnode i in list : 	 errnode print ( "hello" ) 	 sum = errnode sum + i 

------------------------------

REPLACE:
for @@@ in list : 	 @@@ ( "hello" ) 	 sum = @@@ + i 

------------------------------


REMOVE:
for i in list : 	 ( ) 	 sum = + i 

------------------------------

ADD:
for i in list : 	 errnode print ( errnode "hello" ) 	 sum = errnode sum + i 

------------------------------

REPLACE:
for i in list : 	 @@@ ( @@@ ) 	 sum = @@@ + i 

------------------------------


Syntax error at '')'
'
None
Syntax error at '')'
'
None
'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'func_call_stmt'
							'print'
							'('
							'parameters'
								'literal'
									'"hello"'
							')'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'sum'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'sum'
										'arithmetic_op'
											'+'
										'arithmetic_expr'
											'atom'
												'i'

'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'func_call_stmt'
							'print'
							'('
							'parameters'
								'literal'
									'"hello"'
							')'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'sum'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'sum'
										'arithmetic_op'
											'+'
										'arithmetic_expr'
											'atom'
												'i'

Programs with 1 errors
REMOVE:
for i in list : 	 print ( "hello" ) 	 sum sum + i 

------------------------------

ADD:
for i in list : 	 print ( "hello" ) 	 sum errnode = sum + i 

------------------------------

REPLACE:
for i in list : 	 print ( "hello" ) 	 sum @@@ sum + i 

------------------------------


REMOVE:
for i in list : 	 print ( "hello" ) 	 sum = + i 

------------------------------

ADD:
for i in list : 	 print ( "hello" ) 	 sum = errnode sum + i 

------------------------------

REPLACE:
for i in list : 	 print ( "hello" ) 	 sum = @@@ + i 

------------------------------


Programs with 2 errors
REMOVE:
for in list : 	 print ( "hello" 	 sum = sum + i 

------------------------------

ADD:
for errnode i in list : 	 print ( "hello" errnode ) 	 sum = sum + i 

------------------------------

REPLACE:
for @@@ in list : 	 print ( "hello" @@@ 	 sum = sum + i 

------------------------------


REMOVE:
for i in list : 	 print "hello" 	 sum = sum + i 

------------------------------

ADD:
for i in list : 	 print errnode ( "hello" errnode ) 	 sum = sum + i 

------------------------------

REPLACE:
for i in list : 	 print @@@ "hello" @@@ 	 sum = sum + i 

------------------------------


Programs with 3 errors
REMOVE:
for in list print ( "hello" ) 	 sum = sum + i 

------------------------------

ADD:
for errnode i in list errnode : errnode 	 print ( "hello" ) 	 sum = sum + i 

------------------------------

REPLACE:
for @@@ in list @@@ @@@ print ( "hello" ) 	 sum = sum + i 

------------------------------


REMOVE:
for i in list : 	 print ( ) 	 sum sum i 

------------------------------

ADD:
for i in list : 	 print ( errnode "hello" ) 	 sum errnode = sum errnode + i 

------------------------------

REPLACE:
for i in list : 	 print ( @@@ ) 	 sum @@@ sum @@@ i 

------------------------------


'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'func_call_stmt'
							'print'
							'('
							'parameters'
								'literal'
									'"hello"'
							')'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'sum'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'sum'
										'arithmetic_op'
											'+'
										'arithmetic_expr'
											'atom'
												'i'

'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'func_call_stmt'
							'print'
							'('
							'parameters'
								'literal'
									'"hello"'
							')'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'sum'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'sum'
										'arithmetic_op'
											'+'
										'arithmetic_expr'
											'atom'
												'i'

Programs with 1 errors
REMOVE:
for i in list : 	 print ( "hello" 	 sum = sum + i 

------------------------------

ADD:
for i in list : 	 print ( "hello" errnode ) 	 sum = sum + i 

------------------------------

REPLACE:
for i in list : 	 print ( "hello" @@@ 	 sum = sum + i 

------------------------------


REMOVE:
for i in list : 	 print ( "hello" ) 	 sum = + i 

------------------------------

ADD:
for i in list : 	 print ( "hello" ) 	 sum = errnode sum + i 

------------------------------

REPLACE:
for i in list : 	 print ( "hello" ) 	 sum = @@@ + i 

------------------------------


Programs with 2 errors
REMOVE:
for i in list : 	 print "hello" ) 	 sum = sum i 

------------------------------

ADD:
for i in list : 	 print errnode ( "hello" ) 	 sum = sum errnode + i 

------------------------------

REPLACE:
for i in list : 	 print @@@ "hello" ) 	 sum = sum @@@ i 

------------------------------


REMOVE:
for i in list : 	 print ( "hello" ) = sum + i 

------------------------------

ADD:
for i in list : 	 print ( "hello" ) errnode 	 errnode sum = sum + i 

------------------------------

REPLACE:
for i in list : 	 print ( "hello" ) @@@ @@@ = sum + i 

------------------------------


Programs with 3 errors
REMOVE:
for in list 	 print ( "hello" 	 sum = sum + i 

------------------------------

ADD:
for errnode i in list errnode : 	 print ( "hello" errnode ) 	 sum = sum + i 

------------------------------

REPLACE:
for @@@ in list @@@ 	 print ( "hello" @@@ 	 sum = sum + i 

------------------------------


REMOVE:
for i in : 	 "hello" ) 	 sum = sum + i 

------------------------------

ADD:
for i in errnode list : 	 errnode print errnode ( "hello" ) 	 sum = sum + i 

------------------------------

REPLACE:
for i in @@@ : 	 @@@ @@@ "hello" ) 	 sum = sum + i 

------------------------------


Syntax error at ''dosomething'
'
None
'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'func_call_stmt'
							'print'
							'('
							'parameters'
								'literal'
									'"hello"'
							')'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'sum'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'sum'
										'arithmetic_op'
											'+'
										'arithmetic_expr'
											'atom'
												'i'

'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'func_call_stmt'
							'print'
							'('
							'parameters'
								'literal'
									'"hello"'
							')'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'sum'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'sum'
										'arithmetic_op'
											'+'
										'arithmetic_expr'
											'atom'
												'i'

Programs with 1 errors
REMOVE:
for i in list : 	 print "hello" ) 	 sum = sum + i 

------------------------------

ADD:
for i in list : 	 print errnode ( "hello" ) 	 sum = sum + i 

------------------------------

REPLACE:
for i in list : 	 print @@@ "hello" ) 	 sum = sum + i 

------------------------------


REMOVE:
for i in list : 	 print ( "hello" ) 	 sum sum + i 

------------------------------

ADD:
for i in list : 	 print ( "hello" ) 	 sum errnode = sum + i 

------------------------------

REPLACE:
for i in list : 	 print ( "hello" ) 	 sum @@@ sum + i 

------------------------------


Programs with 2 errors
REMOVE:
for i list : 	 print "hello" ) 	 sum = sum + i 

------------------------------

ADD:
for i errnode in list : 	 print errnode ( "hello" ) 	 sum = sum + i 

------------------------------

REPLACE:
for i @@@ list : 	 print @@@ "hello" ) 	 sum = sum + i 

------------------------------


REMOVE:
for i in list 	 print ( "hello" ) 	 sum = + i 

------------------------------

ADD:
for i in list errnode : 	 print ( "hello" ) 	 sum = errnode sum + i 

------------------------------

REPLACE:
for i in list @@@ 	 print ( "hello" ) 	 sum = @@@ + i 

------------------------------


Programs with 3 errors
REMOVE:
for i in : 	 print ( "hello" ) 	 = sum i 

------------------------------

ADD:
for i in errnode list : 	 print ( "hello" ) 	 errnode sum = sum errnode + i 

------------------------------

REPLACE:
for i in @@@ : 	 print ( "hello" ) 	 @@@ = sum @@@ i 

------------------------------


REMOVE:
for i in 	 print ( "hello" ) sum = sum + i 

------------------------------

ADD:
for i in errnode list errnode : 	 print ( "hello" ) errnode 	 sum = sum + i 

------------------------------

REPLACE:
for i in @@@ @@@ 	 print ( "hello" ) @@@ sum = sum + i 

------------------------------


'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'func_call_stmt'
							'print'
							'('
							'parameters'
								'literal'
									'"hello"'
							')'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'sum'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'sum'
										'arithmetic_op'
											'+'
										'arithmetic_expr'
											'atom'
												'i'

'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'func_call_stmt'
							'print'
							'('
							'parameters'
								'literal'
									'"hello"'
							')'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'sum'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'sum'
										'arithmetic_op'
											'+'
										'arithmetic_expr'
											'atom'
												'i'

Programs with 1 errors
REMOVE:
for in list : 	 print ( "hello" ) 	 sum = sum + i 

------------------------------

ADD:
for errnode i in list : 	 print ( "hello" ) 	 sum = sum + i 

------------------------------

REPLACE:
for @@@ in list : 	 print ( "hello" ) 	 sum = sum + i 

------------------------------


REMOVE:
for i list : 	 print ( "hello" ) 	 sum = sum + i 

------------------------------

ADD:
for i errnode in list : 	 print ( "hello" ) 	 sum = sum + i 

------------------------------

REPLACE:
for i @@@ list : 	 print ( "hello" ) 	 sum = sum + i 

------------------------------


Programs with 2 errors
REMOVE:
for i in list : 	 print "hello" ) 	 sum = sum i 

------------------------------

ADD:
for i in list : 	 print errnode ( "hello" ) 	 sum = sum errnode + i 

------------------------------

REPLACE:
for i in list : 	 print @@@ "hello" ) 	 sum = sum @@@ i 

------------------------------


REMOVE:
for in list : 	 ( "hello" ) 	 sum = sum + i 

------------------------------

ADD:
for errnode i in list : 	 errnode print ( "hello" ) 	 sum = sum + i 

------------------------------

REPLACE:
for @@@ in list : 	 @@@ ( "hello" ) 	 sum = sum + i 

------------------------------


Programs with 3 errors
REMOVE:
for i in : 	 print ( "hello" ) 	 sum + i 

------------------------------

ADD:
for i in errnode list : 	 print ( "hello" ) 	 sum errnode = errnode sum + i 

------------------------------

REPLACE:
for i in @@@ : 	 print ( "hello" ) 	 sum @@@ @@@ + i 

------------------------------


REMOVE:
for i in 	 print ( "hello" ) 	 = sum + i 

------------------------------

ADD:
for i in errnode list errnode : 	 print ( "hello" ) 	 errnode sum = sum + i 

------------------------------

REPLACE:
for i in @@@ @@@ 	 print ( "hello" ) 	 @@@ = sum + i 

------------------------------


Syntax error at ''a'
'
None
'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'func_call_stmt'
							'print'
							'('
							'parameters'
								'literal'
									'"hello"'
							')'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'sum'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'sum'
										'arithmetic_op'
											'+'
										'arithmetic_expr'
											'atom'
												'i'

'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'func_call_stmt'
							'print'
							'('
							'parameters'
								'literal'
									'"hello"'
							')'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'sum'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'sum'
										'arithmetic_op'
											'+'
										'arithmetic_expr'
											'atom'
												'i'

Programs with 1 errors
REMOVE:
for i in list : 	 print ( "hello" ) 	 sum = sum + 

------------------------------

ADD:
for i in list : 	 print ( "hello" ) 	 sum = sum + errnode i 

------------------------------

REPLACE:
for i in list : 	 print ( "hello" ) 	 sum = sum + @@@ 

------------------------------


REMOVE:
for i in list : 	 print ( "hello" 	 sum = sum + i 

------------------------------

ADD:
for i in list : 	 print ( "hello" errnode ) 	 sum = sum + i 

------------------------------

REPLACE:
for i in list : 	 print ( "hello" @@@ 	 sum = sum + i 

------------------------------


Programs with 2 errors
REMOVE:
for i in list : 	 print ( "hello" ) 	 = + i 

------------------------------

ADD:
for i in list : 	 print ( "hello" ) 	 errnode sum = errnode sum + i 

------------------------------

REPLACE:
for i in list : 	 print ( "hello" ) 	 @@@ = @@@ + i 

------------------------------


REMOVE:
for i list : print ( "hello" ) 	 sum = sum + i 

------------------------------

ADD:
for i errnode in list : errnode 	 print ( "hello" ) 	 sum = sum + i 

------------------------------

REPLACE:
for i @@@ list : @@@ print ( "hello" ) 	 sum = sum + i 

------------------------------


Programs with 3 errors
REMOVE:
for i in list : print "hello" ) 	 sum sum + i 

------------------------------

ADD:
for i in list : errnode 	 print errnode ( "hello" ) 	 sum errnode = sum + i 

------------------------------

REPLACE:
for i in list : @@@ print @@@ "hello" ) 	 sum @@@ sum + i 

------------------------------


REMOVE:
for i in list 	 print ( "hello" 	 sum = sum + 

------------------------------

ADD:
for i in list errnode : 	 print ( "hello" errnode ) 	 sum = sum + errnode i 

------------------------------

REPLACE:
for i in list @@@ 	 print ( "hello" @@@ 	 sum = sum + @@@ 

------------------------------


Syntax error at ''\t'
'
None
Syntax error at ''\t'
'
None
Syntax error at ''\t'
'
None
Syntax error at ''\t'
'
None
'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'atom'
					'literal'
						'True'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'func_call_stmt'
						'print'
						'('
						'parameters'
							'literal'
								'"hello"'
						')'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'atom'
					'literal'
						'True'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'func_call_stmt'
						'print'
						'('
						'parameters'
							'literal'
								'"hello"'
						')'

Programs with 1 errors
REMOVE:
if ( True ) : 	 ( "hello" ) 

------------------------------

ADD:
if ( True ) : 	 errnode print ( "hello" ) 

------------------------------

REPLACE:
if ( True ) : 	 @@@ ( "hello" ) 

------------------------------


REMOVE:
if ( True ) : print ( "hello" ) 

------------------------------

ADD:
if ( True ) : errnode 	 print ( "hello" ) 

------------------------------

REPLACE:
if ( True ) : @@@ print ( "hello" ) 

------------------------------


Programs with 2 errors
REMOVE:
if ( True ) 	 print "hello" ) 

------------------------------

ADD:
if ( True ) errnode : 	 print errnode ( "hello" ) 

------------------------------

REPLACE:
if ( True ) @@@ 	 print @@@ "hello" ) 

------------------------------


REMOVE:
if ) : 	 print ( "hello" ) 

------------------------------

ADD:
if errnode ( errnode True ) : 	 print ( "hello" ) 

------------------------------

REPLACE:
if @@@ @@@ ) : 	 print ( "hello" ) 

------------------------------


Programs with 3 errors
REMOVE:
if ) : 	 ( "hello" ) 

------------------------------

ADD:
if errnode ( errnode True ) : 	 errnode print ( "hello" ) 

------------------------------

REPLACE:
if @@@ @@@ ) : 	 @@@ ( "hello" ) 

------------------------------


REMOVE:
if ) : 	 print ( ) 

------------------------------

ADD:
if errnode ( errnode True ) : 	 print ( errnode "hello" ) 

------------------------------

REPLACE:
if @@@ @@@ ) : 	 print ( @@@ ) 

------------------------------


Syntax error at ''print'
'
None
Syntax error at ''for'
'
'start'
	'construct'
		'assignment_stmt'
			'sum'
			'='
			'expression'
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'sum'
					'arithmetic_op'
						'+'
					'arithmetic_expr'
						'atom'
							'i'

'start'
	'construct'
		'assignment_stmt'
			'sum'
			'='
			'expression'
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'sum'
					'arithmetic_op'
						'+'
					'arithmetic_expr'
						'atom'
							'i'

Programs with 1 errors
REMOVE:
sum = + i 

------------------------------

ADD:
sum = errnode sum + i 

------------------------------

REPLACE:
sum = @@@ + i 

------------------------------


REMOVE:
sum = + i 

------------------------------

ADD:
sum = errnode sum + i 

------------------------------

REPLACE:
sum = @@@ + i 

------------------------------


Programs with 2 errors
REMOVE:
sum + i 

------------------------------

ADD:
sum errnode = errnode sum + i 

------------------------------

REPLACE:
sum @@@ @@@ + i 

------------------------------


REMOVE:
sum sum i 

------------------------------

ADD:
sum errnode = sum errnode + i 

------------------------------

REPLACE:
sum @@@ sum @@@ i 

------------------------------


Programs with 3 errors
REMOVE:
sum + 

------------------------------

ADD:
sum errnode = errnode sum + errnode i 

------------------------------

REPLACE:
sum @@@ @@@ + @@@ 

------------------------------


REMOVE:
sum sum 

------------------------------

ADD:
sum errnode = sum errnode + errnode i 

------------------------------

REPLACE:
sum @@@ sum @@@ @@@ 

------------------------------


Syntax error at ''for'
'
'start'
	'construct'
		'assignment_stmt'
			'sum'
			'='
			'expression'
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'sum'
					'arithmetic_op'
						'+'
					'arithmetic_expr'
						'atom'
							'i'

'start'
	'construct'
		'assignment_stmt'
			'sum'
			'='
			'expression'
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'sum'
					'arithmetic_op'
						'+'
					'arithmetic_expr'
						'atom'
							'i'

Programs with 1 errors
REMOVE:
sum = sum + 

------------------------------

ADD:
sum = sum + errnode i 

------------------------------

REPLACE:
sum = sum + @@@ 

------------------------------


REMOVE:
sum = sum + 

------------------------------

ADD:
sum = sum + errnode i 

------------------------------

REPLACE:
sum = sum + @@@ 

------------------------------


Programs with 2 errors
REMOVE:
sum sum i 

------------------------------

ADD:
sum errnode = sum errnode + i 

------------------------------

REPLACE:
sum @@@ sum @@@ i 

------------------------------


REMOVE:
sum = + 

------------------------------

ADD:
sum = errnode sum + errnode i 

------------------------------

REPLACE:
sum = @@@ + @@@ 

------------------------------


Programs with 3 errors
REMOVE:
sum = 

------------------------------

ADD:
sum = errnode sum errnode + errnode i 

------------------------------

REPLACE:
sum = @@@ @@@ @@@ 

------------------------------


REMOVE:
sum i 

------------------------------

ADD:
sum errnode = errnode sum errnode + i 

------------------------------

REPLACE:
sum @@@ @@@ @@@ i 

------------------------------


Syntax error at ''for'
'
'start'
	'construct'
		'assignment_stmt'
			'sum'
			'='
			'expression'
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'sum'
					'arithmetic_op'
						'+'
					'arithmetic_expr'
						'atom'
							'i'

'start'
	'construct'
		'assignment_stmt'
			'sum'
			'='
			'expression'
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'sum'
					'arithmetic_op'
						'+'
					'arithmetic_expr'
						'atom'
							'i'

Programs with 1 errors
REMOVE:
sum = sum i 

------------------------------

ADD:
sum = sum errnode + i 

------------------------------

REPLACE:
sum = sum @@@ i 

------------------------------


REMOVE:
sum = + i 

------------------------------

ADD:
sum = errnode sum + i 

------------------------------

REPLACE:
sum = @@@ + i 

------------------------------


Programs with 2 errors
REMOVE:
sum = + 

------------------------------

ADD:
sum = errnode sum + errnode i 

------------------------------

REPLACE:
sum = @@@ + @@@ 

------------------------------


REMOVE:
sum = + 

------------------------------

ADD:
sum = errnode sum + errnode i 

------------------------------

REPLACE:
sum = @@@ + @@@ 

------------------------------


Programs with 3 errors
REMOVE:
sum + 

------------------------------

ADD:
sum errnode = errnode sum + errnode i 

------------------------------

REPLACE:
sum @@@ @@@ + @@@ 

------------------------------


REMOVE:
sum i 

------------------------------

ADD:
sum errnode = errnode sum errnode + i 

------------------------------

REPLACE:
sum @@@ @@@ @@@ i 

------------------------------


Syntax error at ''for'
'
'start'
	'construct'
		'assignment_stmt'
			'sum'
			'='
			'expression'
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'sum'
					'arithmetic_op'
						'+'
					'arithmetic_expr'
						'atom'
							'i'

'start'
	'construct'
		'assignment_stmt'
			'sum'
			'='
			'expression'
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'sum'
					'arithmetic_op'
						'+'
					'arithmetic_expr'
						'atom'
							'i'

Programs with 1 errors
REMOVE:
sum = + i 

------------------------------

ADD:
sum = errnode sum + i 

------------------------------

REPLACE:
sum = @@@ + i 

------------------------------


REMOVE:
sum sum + i 

------------------------------

ADD:
sum errnode = sum + i 

------------------------------

REPLACE:
sum @@@ sum + i 

------------------------------


Programs with 2 errors
REMOVE:
sum + i 

------------------------------

ADD:
sum errnode = errnode sum + i 

------------------------------

REPLACE:
sum @@@ @@@ + i 

------------------------------


REMOVE:
sum = + 

------------------------------

ADD:
sum = errnode sum + errnode i 

------------------------------

REPLACE:
sum = @@@ + @@@ 

------------------------------


Programs with 3 errors
REMOVE:
sum i 

------------------------------

ADD:
sum errnode = errnode sum errnode + i 

------------------------------

REPLACE:
sum @@@ @@@ @@@ i 

------------------------------


REMOVE:
sum sum 

------------------------------

ADD:
sum errnode = sum errnode + errnode i 

------------------------------

REPLACE:
sum @@@ sum @@@ @@@ 

------------------------------


Syntax error at ''['
'
'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'sum'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'sum'
									'arithmetic_op'
										'+'
									'arithmetic_expr'
										'atom'
											'i'

'start'
	'construct'
		'loop_stmt'
			'for_loop'
				'for'
				'i'
				'in'
				'list'
				':'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'sum'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'sum'
									'arithmetic_op'
										'+'
									'arithmetic_expr'
										'atom'
											'i'

Programs with 1 errors
REMOVE:
for i in list : 	 sum = sum i 

------------------------------

ADD:
for i in list : 	 sum = sum errnode + i 

------------------------------

REPLACE:
for i in list : 	 sum = sum @@@ i 

------------------------------


REMOVE:
for i in list : 	 sum = + i 

------------------------------

ADD:
for i in list : 	 sum = errnode sum + i 

------------------------------

REPLACE:
for i in list : 	 sum = @@@ + i 

------------------------------


Programs with 2 errors
REMOVE:
for i in list : 	 = sum i 

------------------------------

ADD:
for i in list : 	 errnode sum = sum errnode + i 

------------------------------

REPLACE:
for i in list : 	 @@@ = sum @@@ i 

------------------------------


REMOVE:
for i in list : sum sum + i 

------------------------------

ADD:
for i in list : errnode 	 sum errnode = sum + i 

------------------------------

REPLACE:
for i in list : @@@ sum @@@ sum + i 

------------------------------


Programs with 3 errors
REMOVE:
for list : 	 sum = + i 

------------------------------

ADD:
for errnode i errnode in list : 	 sum = errnode sum + i 

------------------------------

REPLACE:
for @@@ @@@ list : 	 sum = @@@ + i 

------------------------------


REMOVE:
for in list 	 sum = sum i 

------------------------------

ADD:
for errnode i in list errnode : 	 sum = sum errnode + i 

------------------------------

REPLACE:
for @@@ in list @@@ 	 sum = sum @@@ i 

------------------------------


Syntax error at ''for'
'
'start'
	'construct'
		'assignment_stmt'
			'sum'
			'='
			'expression'
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'sum'
					'arithmetic_op'
						'+'
					'arithmetic_expr'
						'atom'
							'i'

'start'
	'construct'
		'assignment_stmt'
			'sum'
			'='
			'expression'
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'sum'
					'arithmetic_op'
						'+'
					'arithmetic_expr'
						'atom'
							'i'

Programs with 1 errors
REMOVE:
sum sum + i 

------------------------------

ADD:
sum errnode = sum + i 

------------------------------

REPLACE:
sum @@@ sum + i 

------------------------------


REMOVE:
sum = + i 

------------------------------

ADD:
sum = errnode sum + i 

------------------------------

REPLACE:
sum = @@@ + i 

------------------------------


Programs with 2 errors
REMOVE:
sum sum + 

------------------------------

ADD:
sum errnode = sum + errnode i 

------------------------------

REPLACE:
sum @@@ sum + @@@ 

------------------------------


REMOVE:
sum = sum 

------------------------------

ADD:
sum = sum errnode + errnode i 

------------------------------

REPLACE:
sum = sum @@@ @@@ 

------------------------------


Programs with 3 errors
REMOVE:
sum = 

------------------------------

ADD:
sum = errnode sum errnode + errnode i 

------------------------------

REPLACE:
sum = @@@ @@@ @@@ 

------------------------------


REMOVE:
sum sum 

------------------------------

ADD:
sum errnode = sum errnode + errnode i 

------------------------------

REPLACE:
sum @@@ sum @@@ @@@ 

------------------------------


Syntax error at ''for'
'
'start'
	'construct'
		'assignment_stmt'
			'sum'
			'='
			'expression'
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'sum'
					'arithmetic_op'
						'+'
					'arithmetic_expr'
						'atom'
							'i'

'start'
	'construct'
		'assignment_stmt'
			'sum'
			'='
			'expression'
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'sum'
					'arithmetic_op'
						'+'
					'arithmetic_expr'
						'atom'
							'i'

Programs with 1 errors
REMOVE:
sum = + i 

------------------------------

ADD:
sum = errnode sum + i 

------------------------------

REPLACE:
sum = @@@ + i 

------------------------------


REMOVE:
sum = sum + 

------------------------------

ADD:
sum = sum + errnode i 

------------------------------

REPLACE:
sum = sum + @@@ 

------------------------------


Programs with 2 errors
REMOVE:
sum = + 

------------------------------

ADD:
sum = errnode sum + errnode i 

------------------------------

REPLACE:
sum = @@@ + @@@ 

------------------------------


REMOVE:
sum = sum 

------------------------------

ADD:
sum = sum errnode + errnode i 

------------------------------

REPLACE:
sum = sum @@@ @@@ 

------------------------------


Programs with 3 errors
REMOVE:
sum + 

------------------------------

ADD:
sum errnode = errnode sum + errnode i 

------------------------------

REPLACE:
sum @@@ @@@ + @@@ 

------------------------------


REMOVE:
sum + 

------------------------------

ADD:
sum errnode = errnode sum + errnode i 

------------------------------

REPLACE:
sum @@@ @@@ + @@@ 

------------------------------


Syntax error at ''*'
'
None
'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'expression'
							'arithmetic_expr'
								'atom'
									'literal'
										'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'+'
									'arithmetic_expr'
										'atom'
											'a'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'a'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'a'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'3'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'atom'
										'literal'
											'True'

'start'
	'construct'
		'funcdef'
			'def'
			'foo'
			'('
			'parameters'
				'a'
				','
				'parameters'
					'b'
					','
					'parameters'
						'c'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'c'
						'='
						'expression'
							'arithmetic_expr'
								'atom'
									'literal'
										'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'b'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'+'
									'arithmetic_expr'
										'atom'
											'a'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'a'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'a'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'3'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'atom'
										'literal'
											'True'

Programs with 1 errors
REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 b = a + a 	 a = a 3 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 b = a + a 	 a = a errnode / 3 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 b = a + a 	 a = a @@@ 3 	 return True 

------------------------------


REMOVE:
def foo ( a , , c ) : 	 c = 2 	 b = a + a 	 a = a / 3 	 return True 

------------------------------

ADD:
def foo ( a , errnode b , c ) : 	 c = 2 	 b = a + a 	 a = a / 3 	 return True 

------------------------------

REPLACE:
def foo ( a , @@@ , c ) : 	 c = 2 	 b = a + a 	 a = a / 3 	 return True 

------------------------------


Programs with 2 errors
REMOVE:
def foo ( a , b , c ) : 	 c = 2 	 b = a a 	 a a / 3 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 c = 2 	 b = a errnode + a 	 a errnode = a / 3 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 c = 2 	 b = a @@@ a 	 a @@@ a / 3 	 return True 

------------------------------


REMOVE:
def foo ( a , b , c ) : c = 2 	 b = a + a 	 a = a / 3 return True 

------------------------------

ADD:
def foo ( a , b , c ) : errnode 	 c = 2 	 b = a + a 	 a = a / 3 errnode 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : @@@ c = 2 	 b = a + a 	 a = a / 3 @@@ return True 

------------------------------


Programs with 3 errors
REMOVE:
def foo ( a , b , c ) : 	 = 2 	 b = a + 	 a a / 3 	 return True 

------------------------------

ADD:
def foo ( a , b , c ) : 	 errnode c = 2 	 b = a + errnode a 	 a errnode = a / 3 	 return True 

------------------------------

REPLACE:
def foo ( a , b , c ) : 	 @@@ = 2 	 b = a + @@@ 	 a @@@ a / 3 	 return True 

------------------------------


REMOVE:
def foo ( a , b c ) : 	 c = 2 	 b = a + a = a / 3 	 return True 

------------------------------

ADD:
def foo ( a , b errnode , c ) : 	 c = 2 	 b = a + a errnode 	 errnode a = a / 3 	 return True 

------------------------------

REPLACE:
def foo ( a , b @@@ c ) : 	 c = 2 	 b = a + a @@@ @@@ = a / 3 	 return True 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'get_value'
			'('
			'parameters'
				'a'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'funcdef'
			'def'
			'get_value'
			'('
			'parameters'
				'a'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
def get_value ( a : 	 return a 

------------------------------

ADD:
def get_value ( a errnode ) : 	 return a 

------------------------------

REPLACE:
def get_value ( a @@@ : 	 return a 

------------------------------


REMOVE:
def get_value ( a ) : 	 return 

------------------------------

ADD:
def get_value ( a ) : 	 return errnode a 

------------------------------

REPLACE:
def get_value ( a ) : 	 return @@@ 

------------------------------


Programs with 2 errors
REMOVE:
def get_value ( a ) return a 

------------------------------

ADD:
def get_value ( a ) errnode : errnode 	 return a 

------------------------------

REPLACE:
def get_value ( a ) @@@ @@@ return a 

------------------------------


REMOVE:
def get_value a ) 	 return a 

------------------------------

ADD:
def get_value errnode ( a ) errnode : 	 return a 

------------------------------

REPLACE:
def get_value @@@ a ) @@@ 	 return a 

------------------------------


Programs with 3 errors
REMOVE:
def ( a ) 	 a 

------------------------------

ADD:
def errnode get_value ( a ) errnode : 	 errnode return a 

------------------------------

REPLACE:
def @@@ ( a ) @@@ 	 @@@ a 

------------------------------


REMOVE:
def get_value a ) 	 return 

------------------------------

ADD:
def get_value errnode ( a ) errnode : 	 return errnode a 

------------------------------

REPLACE:
def get_value @@@ a ) @@@ 	 return @@@ 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'get_value'
			'('
			'parameters'
				'a'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

'start'
	'construct'
		'funcdef'
			'def'
			'get_value'
			'('
			'parameters'
				'a'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
def ( a ) : 	 return a 

------------------------------

ADD:
def errnode get_value ( a ) : 	 return a 

------------------------------

REPLACE:
def @@@ ( a ) : 	 return a 

------------------------------


REMOVE:
def get_value ( a : 	 return a 

------------------------------

ADD:
def get_value ( a errnode ) : 	 return a 

------------------------------

REPLACE:
def get_value ( a @@@ : 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
def get_value ( a ) : a 

------------------------------

ADD:
def get_value ( a ) : errnode 	 errnode return a 

------------------------------

REPLACE:
def get_value ( a ) : @@@ @@@ a 

------------------------------


REMOVE:
def get_value ( ) : return a 

------------------------------

ADD:
def get_value ( errnode a ) : errnode 	 return a 

------------------------------

REPLACE:
def get_value ( @@@ ) : @@@ return a 

------------------------------


Programs with 3 errors
REMOVE:
def ( ) : return a 

------------------------------

ADD:
def errnode get_value ( errnode a ) : errnode 	 return a 

------------------------------

REPLACE:
def @@@ ( @@@ ) : @@@ return a 

------------------------------


REMOVE:
def get_value a 	 return a 

------------------------------

ADD:
def get_value errnode ( a errnode ) errnode : 	 return a 

------------------------------

REPLACE:
def get_value @@@ a @@@ @@@ 	 return a 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'findsquare'
			'('
			'parameters'
				'a'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'a'

'start'
	'construct'
		'funcdef'
			'def'
			'findsquare'
			'('
			'parameters'
				'a'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'return_stmt'
						'return'
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'a'

Programs with 1 errors
REMOVE:
def findsquare ( a ) 	 return a * a 

------------------------------

ADD:
def findsquare ( a ) errnode : 	 return a * a 

------------------------------

REPLACE:
def findsquare ( a ) @@@ 	 return a * a 

------------------------------


REMOVE:
def findsquare ( ) : 	 return a * a 

------------------------------

ADD:
def findsquare ( errnode a ) : 	 return a * a 

------------------------------

REPLACE:
def findsquare ( @@@ ) : 	 return a * a 

------------------------------


Programs with 2 errors
REMOVE:
def ( ) : 	 return a * a 

------------------------------

ADD:
def errnode findsquare ( errnode a ) : 	 return a * a 

------------------------------

REPLACE:
def @@@ ( @@@ ) : 	 return a * a 

------------------------------


REMOVE:
def findsquare ( a ) 	 a * a 

------------------------------

ADD:
def findsquare ( a ) errnode : 	 errnode return a * a 

------------------------------

REPLACE:
def findsquare ( a ) @@@ 	 @@@ a * a 

------------------------------


Programs with 3 errors
REMOVE:
def findsquare a ) : 	 return a 

------------------------------

ADD:
def findsquare errnode ( a ) : 	 return a errnode * errnode a 

------------------------------

REPLACE:
def findsquare @@@ a ) : 	 return a @@@ @@@ 

------------------------------


REMOVE:
def findsquare : 	 return a * a 

------------------------------

ADD:
def findsquare errnode ( errnode a errnode ) : 	 return a * a 

------------------------------

REPLACE:
def findsquare @@@ @@@ @@@ : 	 return a * a 

------------------------------


Illegal character '"'
Syntax error at ''World'
'
Illegal character '"'
None
'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'expression'
										'arithmetic_expr'
											'atom'
												'b'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'expression'
										'arithmetic_expr'
											'atom'
												'b'

Programs with 1 errors
REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 errnode else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 @@@ : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
if ( >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( errnode a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( @@@ >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : b = b / 2 	 b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : errnode 	 b = b / 2 	 errnode return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : @@@ b = b / 2 	 @@@ b 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 : 	 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 errnode ) : 	 errnode return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 @@@ : 	 @@@ 0 else : 	 b = b / 2 	 return b 

------------------------------


Programs with 3 errors
REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( >= 0 ) : return 0 else : 	 b = b 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( errnode a >= 0 ) : errnode 	 return 0 else : 	 b = b errnode / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( @@@ >= 0 ) : @@@ return 0 else : 	 b = b @@@ 2 	 return b 

------------------------------


REMOVE:
if ( a 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 : 	 b = b / 2 return b 

------------------------------

ADD:
if ( a errnode >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 errnode else : 	 b = b / 2 errnode 	 return b 

------------------------------

REPLACE:
if ( a @@@ 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 @@@ : 	 b = b / 2 @@@ return b 

------------------------------


Syntax error at ''sum'
'
None
Syntax error at ''sum'
'
None
'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'expression'
										'arithmetic_expr'
											'atom'
												'b'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'expression'
										'arithmetic_expr'
											'atom'
												'b'

Programs with 1 errors
REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : errnode 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : @@@ return 0 else : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : errnode 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : @@@ b = b / 2 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 0 else 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 errnode return 0 else errnode : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 @@@ 0 else @@@ 	 b = b / 2 	 return b 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 errnode a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : errnode 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 @@@ = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : @@@ b = b / 2 	 return b 

------------------------------


Programs with 3 errors
REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif a >= 0 ) : 	 return 0 else : b = b / 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif errnode ( a >= 0 ) : 	 return 0 else : errnode 	 b = b / errnode 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif @@@ a >= 0 ) : 	 return 0 else : @@@ b = b / @@@ 	 return b 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return elif ( a >= 0 ) : 	 0 else : b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return errnode a elif ( a >= 0 ) : 	 errnode return 0 else : errnode 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return @@@ elif ( a >= 0 ) : 	 @@@ 0 else : @@@ b = b / 2 	 return b 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'expression'
										'arithmetic_expr'
											'atom'
												'b'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'>='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'expression'
										'arithmetic_expr'
											'atom'
												'b'

Programs with 1 errors
REMOVE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) errnode : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) @@@ 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
if ( a 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a errnode >= 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a @@@ 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a >= 0 ) : 	 a a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a errnode = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else errnode : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a @@@ a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else @@@ 	 b = b / 2 	 return b 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a = a * 2 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * 2 errnode 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 errnode 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * 2 @@@ return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 @@@ return b 

------------------------------


Programs with 3 errors
REMOVE:
if ( a >= 0 ) : 	 a = a 2 	 a elif ( a >= 0 ) : 	 return 0 else : 	 = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a errnode * 2 	 errnode return a elif ( a >= 0 ) : 	 return 0 else : 	 errnode b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a @@@ 2 	 @@@ a elif ( a >= 0 ) : 	 return 0 else : 	 @@@ = b / 2 	 return b 

------------------------------


REMOVE:
if ( a >= 0 ) : 	 a = a * 	 return a elif ( a >= ) 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a >= 0 ) : 	 a = a * errnode 2 	 return a elif ( a >= errnode 0 ) errnode : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a >= 0 ) : 	 a = a * @@@ 	 return a elif ( a >= @@@ ) @@@ 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


Syntax error at ''n2'
'
Illegal character '"'
Syntax error at ''='
'
Illegal character '"'
Illegal character '"'
Illegal character '"'
Illegal character '"'
Illegal character '"'
None
Syntax error at ''if'
'
None
'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'=='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'expression'
										'arithmetic_expr'
											'atom'
												'b'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'=='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'expression'
										'arithmetic_expr'
											'atom'
												'b'

Programs with 1 errors
REMOVE:
if ( a == 0 ) : 	 a = a * 2 	 return a ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a == 0 ) : 	 a = a * 2 	 return a errnode elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) : 	 a = a * 2 	 return a @@@ ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : b = b / 2 	 return b 

------------------------------

ADD:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : errnode 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : @@@ b = b / 2 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a == 0 ) : 	 a = a * 	 return a elif ( a >= 0 ) : 	 return 0 : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a == 0 ) : 	 a = a * errnode 2 	 return a elif ( a >= 0 ) : 	 return 0 errnode else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) : 	 a = a * @@@ 	 return a elif ( a >= 0 ) : 	 return 0 @@@ : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
if a == 0 ) : 	 a = a * 2 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if errnode ( a == 0 ) : 	 a = a * 2 errnode 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if @@@ a == 0 ) : 	 a = a * 2 @@@ return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


Programs with 3 errors
REMOVE:
if ( a == 0 ) 	 a = a * 2 	 return a elif ( a 0 ) : 	 return 0 : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a == 0 ) errnode : 	 a = a * 2 	 return a elif ( a errnode >= 0 ) : 	 return 0 errnode else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) @@@ 	 a = a * 2 	 return a elif ( a @@@ 0 ) : 	 return 0 @@@ : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
if == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 = b / 2 	 return b 

------------------------------

ADD:
if errnode ( errnode a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 errnode b = b / 2 	 return b 

------------------------------

REPLACE:
if @@@ @@@ == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 @@@ = b / 2 	 return b 

------------------------------


Syntax error at ''if'
'
Syntax error at ''\t'
'
Syntax error at ''\t'
'
None
'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'=='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'expression'
										'arithmetic_expr'
											'atom'
												'b'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'=='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'expression'
										'arithmetic_expr'
											'atom'
												'b'

Programs with 1 errors
REMOVE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b 2 	 return b 

------------------------------

ADD:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b errnode / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b @@@ 2 	 return b 

------------------------------


REMOVE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 errnode ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 @@@ : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return else : 	 b = b 2 	 return b 

------------------------------

ADD:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return errnode 0 else : 	 b = b errnode / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return @@@ else : 	 b = b @@@ 2 	 return b 

------------------------------


REMOVE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : = b / 2 	 return b 

------------------------------

ADD:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : errnode 	 errnode b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : @@@ @@@ = b / 2 	 return b 

------------------------------


Programs with 3 errors
REMOVE:
if ( a == 0 ) : 	 a = a * 2 	 return a ( a >= 0 ) : return 0 else : 	 b = / 2 	 return b 

------------------------------

ADD:
if ( a == 0 ) : 	 a = a * 2 	 return a errnode elif ( a >= 0 ) : errnode 	 return 0 else : 	 b = errnode b / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) : 	 a = a * 2 	 return a @@@ ( a >= 0 ) : @@@ return 0 else : 	 b = @@@ / 2 	 return b 

------------------------------


REMOVE:
if ( a == 0 ) 	 a = a * 2 	 return a elif a >= 0 ) : 	 return 0 else : 	 b = b / 2 return b 

------------------------------

ADD:
if ( a == 0 ) errnode : 	 a = a * 2 	 return a elif errnode ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 errnode 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) @@@ 	 a = a * 2 	 return a elif @@@ a >= 0 ) : 	 return 0 else : 	 b = b / 2 @@@ return b 

------------------------------


'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'=='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'expression'
										'arithmetic_expr'
											'atom'
												'b'

'start'
	'construct'
		'if_stmt'
			'if'
			'('
			'arithmetic_expr'
				'arithmetic_expr'
					'atom'
						'a'
				'arithmetic_op'
					'=='
				'arithmetic_expr'
					'atom'
						'literal'
							'0'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'*'
								'arithmetic_expr'
									'atom'
										'literal'
											'2'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'a'
			'elif_stmt'
				'elif'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'>='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'return_stmt'
							'return'
							'expression'
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
				'else_stmt'
					'else'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'b'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'b'
										'arithmetic_op'
											'/'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'expression'
										'arithmetic_expr'
											'atom'
												'b'

Programs with 1 errors
REMOVE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 errnode return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 @@@ 0 else : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b 2 	 return b 

------------------------------

ADD:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b errnode / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b @@@ 2 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a == 0 ) : 	 a = a * 2 return a elif ( a >= 0 ) : 	 return 0 else : b = b / 2 	 return b 

------------------------------

ADD:
if ( a == 0 ) : 	 a = a * 2 errnode 	 return a elif ( a >= 0 ) : 	 return 0 else : errnode 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) : 	 a = a * 2 @@@ return a elif ( a >= 0 ) : 	 return 0 else : @@@ b = b / 2 	 return b 

------------------------------


REMOVE:
if ( a == 0 ) : 	 a = a * 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b b / 2 	 return b 

------------------------------

ADD:
if ( a == 0 ) : 	 a = a * errnode 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b errnode = b / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) : 	 a = a * @@@ 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b @@@ b / 2 	 return b 

------------------------------


Programs with 3 errors
REMOVE:
if ( a == 0 ) 	 a = a * 2 	 return a elif ( >= 0 ) : 	 return else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a == 0 ) errnode : 	 a = a * 2 	 return a elif ( errnode a >= 0 ) : 	 return errnode 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) @@@ 	 a = a * 2 	 return a elif ( @@@ >= 0 ) : 	 return @@@ else : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
if ( a == 0 ) : 	 a = a 2 	 return a elif ( >= 0 ) : return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a == 0 ) : 	 a = a errnode * 2 	 return a elif ( errnode a >= 0 ) : errnode 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) : 	 a = a @@@ 2 	 return a elif ( @@@ >= 0 ) : @@@ return 0 else : 	 b = b / 2 	 return b 

------------------------------


'start'
	'construct'
		'statement'
			'if_stmt'
				'if'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'=='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'a'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'*'
									'arithmetic_expr'
										'atom'
											'literal'
												'2'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'expression'
									'arithmetic_expr'
										'atom'
											'a'
				'elif_stmt'
					'elif'
					'('
					'arithmetic_expr'
						'arithmetic_expr'
							'atom'
								'a'
						'arithmetic_op'
							'>='
						'arithmetic_expr'
							'atom'
								'literal'
									'0'
					')'
					':'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'expression'
									'arithmetic_expr'
										'atom'
											'literal'
												'0'
					'else_stmt'
						'else'
						':'
						'statement_suite'
							'\t'
							'statement'
								'assignment_stmt'
									'b'
									'='
									'expression'
										'arithmetic_expr'
											'arithmetic_expr'
												'atom'
													'b'
											'arithmetic_op'
												'/'
											'arithmetic_expr'
												'atom'
													'literal'
														'2'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'b'

'start'
	'construct'
		'statement'
			'if_stmt'
				'if'
				'('
				'arithmetic_expr'
					'arithmetic_expr'
						'atom'
							'a'
					'arithmetic_op'
						'=='
					'arithmetic_expr'
						'atom'
							'literal'
								'0'
				')'
				':'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'a'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'*'
									'arithmetic_expr'
										'atom'
											'literal'
												'2'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'expression'
									'arithmetic_expr'
										'atom'
											'a'
				'elif_stmt'
					'elif'
					'('
					'arithmetic_expr'
						'arithmetic_expr'
							'atom'
								'a'
						'arithmetic_op'
							'>='
						'arithmetic_expr'
							'atom'
								'literal'
									'0'
					')'
					':'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'expression'
									'arithmetic_expr'
										'atom'
											'literal'
												'0'
					'else_stmt'
						'else'
						':'
						'statement_suite'
							'\t'
							'statement'
								'assignment_stmt'
									'b'
									'='
									'expression'
										'arithmetic_expr'
											'arithmetic_expr'
												'atom'
													'b'
											'arithmetic_op'
												'/'
											'arithmetic_expr'
												'atom'
													'literal'
														'2'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'b'

Programs with 1 errors
REMOVE:
if ( a == 0 ) 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a == 0 ) errnode : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) @@@ 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 errnode ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 @@@ : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
if ( a 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return else : 	 b = b / 2 	 return b 

------------------------------

ADD:
if ( a errnode == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return errnode 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
if ( a @@@ 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return @@@ else : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
if ( a == 0 : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b 2 	 return b 

------------------------------

ADD:
if ( a == 0 errnode ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b errnode / 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 @@@ : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b @@@ 2 	 return b 

------------------------------


Programs with 3 errors
REMOVE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : = b / 	 return b 

------------------------------

ADD:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : errnode 	 errnode b = b / errnode 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : @@@ @@@ = b / @@@ 	 return b 

------------------------------


REMOVE:
if ( a == 0 : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : b = b / 	 return b 

------------------------------

ADD:
if ( a == 0 errnode ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : errnode 	 b = b / errnode 2 	 return b 

------------------------------

REPLACE:
if ( a == 0 @@@ : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : @@@ b = b / @@@ 	 return b 

------------------------------


'start'
	'construct'
		'statement'
			'assignment_stmt'
				'a'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'1'
		'construct'
			'statement'
				'if_stmt'
					'if'
					'('
					'arithmetic_expr'
						'arithmetic_expr'
							'atom'
								'a'
						'arithmetic_op'
							'=='
						'arithmetic_expr'
							'atom'
								'literal'
									'0'
					')'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'a'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'a'
										'arithmetic_op'
											'*'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'expression'
										'arithmetic_expr'
											'atom'
												'a'
					'elif_stmt'
						'elif'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'a'
							'arithmetic_op'
								'>='
							'arithmetic_expr'
								'atom'
									'literal'
										'0'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'expression'
										'arithmetic_expr'
											'atom'
												'literal'
													'0'
						'else_stmt'
							'else'
							':'
							'statement_suite'
								'\t'
								'statement'
									'assignment_stmt'
										'b'
										'='
										'expression'
											'arithmetic_expr'
												'arithmetic_expr'
													'atom'
														'b'
												'arithmetic_op'
													'/'
												'arithmetic_expr'
													'atom'
														'literal'
															'2'
								'statement_suite'
									'\t'
									'statement'
										'return_stmt'
											'return'
											'expression'
												'arithmetic_expr'
													'atom'
														'b'

'start'
	'construct'
		'statement'
			'assignment_stmt'
				'a'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'1'
		'construct'
			'statement'
				'if_stmt'
					'if'
					'('
					'arithmetic_expr'
						'arithmetic_expr'
							'atom'
								'a'
						'arithmetic_op'
							'=='
						'arithmetic_expr'
							'atom'
								'literal'
									'0'
					')'
					':'
					'statement_suite'
						'\t'
						'statement'
							'assignment_stmt'
								'a'
								'='
								'expression'
									'arithmetic_expr'
										'arithmetic_expr'
											'atom'
												'a'
										'arithmetic_op'
											'*'
										'arithmetic_expr'
											'atom'
												'literal'
													'2'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'expression'
										'arithmetic_expr'
											'atom'
												'a'
					'elif_stmt'
						'elif'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'a'
							'arithmetic_op'
								'>='
							'arithmetic_expr'
								'atom'
									'literal'
										'0'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'return_stmt'
									'return'
									'expression'
										'arithmetic_expr'
											'atom'
												'literal'
													'0'
						'else_stmt'
							'else'
							':'
							'statement_suite'
								'\t'
								'statement'
									'assignment_stmt'
										'b'
										'='
										'expression'
											'arithmetic_expr'
												'arithmetic_expr'
													'atom'
														'b'
												'arithmetic_op'
													'/'
												'arithmetic_expr'
													'atom'
														'literal'
															'2'
								'statement_suite'
									'\t'
									'statement'
										'return_stmt'
											'return'
											'expression'
												'arithmetic_expr'
													'atom'
														'b'

Programs with 1 errors
REMOVE:
a = 1 if ( a == 0 ) : a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
a = 1 if ( a == 0 ) : errnode 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
a = 1 if ( a == 0 ) : @@@ a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
a = 1 if ( a == 0 ) : 	 = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
a = 1 if ( a == 0 ) : 	 errnode a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
a = 1 if ( a == 0 ) : 	 @@@ = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
a = 1 if ( a == 0 ) : 	 a = * 2 	 return a elif ( >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
a = 1 if ( a == 0 ) : 	 a = errnode a * 2 	 return a elif ( errnode a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
a = 1 if ( a == 0 ) : 	 a = @@@ * 2 	 return a elif ( @@@ >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
a = 1 if ( a == 0 ) : 	 a = a * 2 	 return a ( a >= 0 ) : 	 return 0 else 	 b = b / 2 	 return b 

------------------------------

ADD:
a = 1 if ( a == 0 ) : 	 a = a * 2 	 return a errnode elif ( a >= 0 ) : 	 return 0 else errnode : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
a = 1 if ( a == 0 ) : 	 a = a * 2 	 return a @@@ ( a >= 0 ) : 	 return 0 else @@@ 	 b = b / 2 	 return b 

------------------------------


Programs with 3 errors
REMOVE:
a = 1 if ( == ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
a = 1 if ( errnode a == errnode 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : errnode 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
a = 1 if ( @@@ == @@@ ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : @@@ return 0 else : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
a = 1 if ( a == 0 ) : 	 a = * 2 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return 

------------------------------

ADD:
a = 1 if ( a == 0 ) : 	 a = errnode a * 2 errnode 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return errnode b 

------------------------------

REPLACE:
a = 1 if ( a == 0 ) : 	 a = @@@ * 2 @@@ return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return @@@ 

------------------------------


'start'
	'construct'
		'statement'
			'assignment_stmt'
				'a'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'1'
		'construct'
			'statement'
				'assignment_stmt'
					'b'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'1'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'a'
							'arithmetic_op'
								'=='
							'arithmetic_expr'
								'atom'
									'literal'
										'0'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'assignment_stmt'
									'a'
									'='
									'expression'
										'arithmetic_expr'
											'arithmetic_expr'
												'atom'
													'a'
											'arithmetic_op'
												'*'
											'arithmetic_expr'
												'atom'
													'literal'
														'2'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'a'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'>='
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'literal'
														'0'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'assignment_stmt'
											'b'
											'='
											'expression'
												'arithmetic_expr'
													'arithmetic_expr'
														'atom'
															'b'
													'arithmetic_op'
														'/'
													'arithmetic_expr'
														'atom'
															'literal'
																'2'
									'statement_suite'
										'\t'
										'statement'
											'return_stmt'
												'return'
												'expression'
													'arithmetic_expr'
														'atom'
															'b'

'start'
	'construct'
		'statement'
			'assignment_stmt'
				'a'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'1'
		'construct'
			'statement'
				'assignment_stmt'
					'b'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'1'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'a'
							'arithmetic_op'
								'=='
							'arithmetic_expr'
								'atom'
									'literal'
										'0'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'assignment_stmt'
									'a'
									'='
									'expression'
										'arithmetic_expr'
											'arithmetic_expr'
												'atom'
													'a'
											'arithmetic_op'
												'*'
											'arithmetic_expr'
												'atom'
													'literal'
														'2'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'a'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'>='
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'literal'
														'0'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'assignment_stmt'
											'b'
											'='
											'expression'
												'arithmetic_expr'
													'arithmetic_expr'
														'atom'
															'b'
													'arithmetic_op'
														'/'
													'arithmetic_expr'
														'atom'
															'literal'
																'2'
									'statement_suite'
										'\t'
										'statement'
											'return_stmt'
												'return'
												'expression'
													'arithmetic_expr'
														'atom'
															'b'

Programs with 1 errors
REMOVE:
a 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
a errnode = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
a @@@ 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
a = 1 b = 1 if ( a == 0 : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 errnode ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 @@@ : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b 

------------------------------


Programs with 2 errors
REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a 0 ) : 	 return 0 else 	 b = b / 2 	 return b 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a errnode >= 0 ) : 	 return 0 else errnode : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a @@@ 0 ) : 	 return 0 else @@@ 	 b = b / 2 	 return b 

------------------------------


REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 : 	 return 0 else : 	 b = b / 2 	 b 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 errnode ) : 	 return 0 else : 	 b = b / 2 	 errnode return b 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 @@@ : 	 return 0 else : 	 b = b / 2 	 @@@ b 

------------------------------


Programs with 3 errors
REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a a * 2 	 return a ( a >= 0 ) : 	 0 else : 	 b = b / 2 	 return b 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a errnode = a * 2 	 return a errnode elif ( a >= 0 ) : 	 errnode return 0 else : 	 b = b / 2 	 return b 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a @@@ a * 2 	 return a @@@ ( a >= 0 ) : 	 @@@ 0 else : 	 b = b / 2 	 return b 

------------------------------


REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return elif ( a 0 ) : 	 return 0 else : 	 b = b 2 	 return b 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return errnode a elif ( a errnode >= 0 ) : 	 return 0 else : 	 b = b errnode / 2 	 return b 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return @@@ elif ( a @@@ 0 ) : 	 return 0 else : 	 b = b @@@ 2 	 return b 

------------------------------


'start'
	'construct'
		'statement'
			'assignment_stmt'
				'a'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'1'
		'construct'
			'statement'
				'assignment_stmt'
					'b'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'1'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'a'
							'arithmetic_op'
								'=='
							'arithmetic_expr'
								'atom'
									'literal'
										'0'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'assignment_stmt'
									'a'
									'='
									'expression'
										'arithmetic_expr'
											'arithmetic_expr'
												'atom'
													'a'
											'arithmetic_op'
												'*'
											'arithmetic_expr'
												'atom'
													'literal'
														'2'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'a'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'>='
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'literal'
														'0'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'assignment_stmt'
											'b'
											'='
											'expression'
												'arithmetic_expr'
													'arithmetic_expr'
														'atom'
															'b'
													'arithmetic_op'
														'/'
													'arithmetic_expr'
														'atom'
															'literal'
																'2'
									'statement_suite'
										'\t'
										'statement'
											'return_stmt'
												'return'
												'expression'
													'arithmetic_expr'
														'atom'
															'b'
				'construct'
					'statement'
						'if_stmt'
							'if'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'b'
								'arithmetic_op'
									'>'
								'arithmetic_expr'
									'atom'
										'a'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'a'

'start'
	'construct'
		'statement'
			'assignment_stmt'
				'a'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'1'
		'construct'
			'statement'
				'assignment_stmt'
					'b'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'1'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'a'
							'arithmetic_op'
								'=='
							'arithmetic_expr'
								'atom'
									'literal'
										'0'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'assignment_stmt'
									'a'
									'='
									'expression'
										'arithmetic_expr'
											'arithmetic_expr'
												'atom'
													'a'
											'arithmetic_op'
												'*'
											'arithmetic_expr'
												'atom'
													'literal'
														'2'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'a'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'>='
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'literal'
														'0'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'assignment_stmt'
											'b'
											'='
											'expression'
												'arithmetic_expr'
													'arithmetic_expr'
														'atom'
															'b'
													'arithmetic_op'
														'/'
													'arithmetic_expr'
														'atom'
															'literal'
																'2'
									'statement_suite'
										'\t'
										'statement'
											'return_stmt'
												'return'
												'expression'
													'arithmetic_expr'
														'atom'
															'b'
				'construct'
					'statement'
						'if_stmt'
							'if'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'b'
								'arithmetic_op'
									'>'
								'arithmetic_expr'
									'atom'
										'a'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'a'

Programs with 1 errors
REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b if ( b > a ) : 	 return a 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a errnode elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b if ( b > a ) : 	 return a 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a @@@ ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b if ( b > a ) : 	 return a 

------------------------------


REMOVE:
a = 1 b = 1 if ( a == 0 ) 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b if ( b > a ) : 	 return a 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) errnode : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b if ( b > a ) : 	 return a 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) @@@ 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 return b if ( b > a ) : 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a ( a >= 0 ) : 	 return 0 else 	 b = b / 2 	 return b if ( b > a ) : 	 return a 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a errnode elif ( a >= 0 ) : 	 return 0 else errnode : 	 b = b / 2 	 return b if ( b > a ) : 	 return a 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a @@@ ( a >= 0 ) : 	 return 0 else @@@ 	 b = b / 2 	 return b if ( b > a ) : 	 return a 

------------------------------


REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b b / 2 	 return b if ( b > a ) : 	 return a 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * errnode 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b errnode = b / 2 	 return b if ( b > a ) : 	 return a 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * @@@ 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b @@@ b / 2 	 return b if ( b > a ) : 	 return a 

------------------------------


Programs with 3 errors
REMOVE:
a 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 0 else : 	 b = / 2 	 return b if ( b > a ) : 	 return a 

------------------------------

ADD:
a errnode = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 errnode return 0 else : 	 b = errnode b / 2 	 return b if ( b > a ) : 	 return a 

------------------------------

REPLACE:
a @@@ 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 @@@ 0 else : 	 b = @@@ / 2 	 return b if ( b > a ) : 	 return a 

------------------------------


REMOVE:
a = b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 : return 0 else : 	 b = b / 2 	 return b if ( b > a ) : 	 return a 

------------------------------

ADD:
a = errnode 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 errnode ) : errnode 	 return 0 else : 	 b = b / 2 	 return b if ( b > a ) : 	 return a 

------------------------------

REPLACE:
a = @@@ b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 @@@ : @@@ return 0 else : 	 b = b / 2 	 return b if ( b > a ) : 	 return a 

------------------------------


Illegal character '"'
Syntax error at ''='
'
Illegal character '"'
Illegal character '"'
Syntax error at ''='
'
Illegal character '"'
Illegal character '"'
Syntax error at ''are'
'
Illegal character '"'
None
Illegal character '"'
Syntax error at ''='
'
Illegal character '"'
Illegal character '"'
Syntax error at ''='
'
Illegal character '"'
Illegal character '"'
Syntax error at ''are'
'
Illegal character '"'
None
'start'
	'construct'
		'statement'
			'assignment_stmt'
				'a'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'1'
		'construct'
			'statement'
				'assignment_stmt'
					'b'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'1'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'a'
							'arithmetic_op'
								'=='
							'arithmetic_expr'
								'atom'
									'literal'
										'0'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'assignment_stmt'
									'a'
									'='
									'expression'
										'arithmetic_expr'
											'arithmetic_expr'
												'atom'
													'a'
											'arithmetic_op'
												'*'
											'arithmetic_expr'
												'atom'
													'literal'
														'2'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'a'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'>='
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'literal'
														'0'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'assignment_stmt'
											'b'
											'='
											'expression'
												'arithmetic_expr'
													'arithmetic_expr'
														'atom'
															'b'
													'arithmetic_op'
														'/'
													'arithmetic_expr'
														'atom'
															'literal'
																'2'
									'statement_suite'
										'\t'
										'statement'
											'func_call_stmt'
												'print'
												'('
												'parameters'
													'atom'
														'a'
												')'

'start'
	'construct'
		'statement'
			'assignment_stmt'
				'a'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'1'
		'construct'
			'statement'
				'assignment_stmt'
					'b'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'1'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'a'
							'arithmetic_op'
								'=='
							'arithmetic_expr'
								'atom'
									'literal'
										'0'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'assignment_stmt'
									'a'
									'='
									'expression'
										'arithmetic_expr'
											'arithmetic_expr'
												'atom'
													'a'
											'arithmetic_op'
												'*'
											'arithmetic_expr'
												'atom'
													'literal'
														'2'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'a'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'>='
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'literal'
														'0'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'assignment_stmt'
											'b'
											'='
											'expression'
												'arithmetic_expr'
													'arithmetic_expr'
														'atom'
															'b'
													'arithmetic_op'
														'/'
													'arithmetic_expr'
														'atom'
															'literal'
																'2'
									'statement_suite'
										'\t'
										'statement'
											'func_call_stmt'
												'print'
												'('
												'parameters'
													'atom'
														'a'
												')'

Programs with 1 errors
REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) 	 return 0 else : 	 b = b / 2 	 print ( a ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) errnode : 	 return 0 else : 	 b = b / 2 	 print ( a ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) @@@ 	 return 0 else : 	 b = b / 2 	 print ( a ) 

------------------------------


REMOVE:
a = 1 b = if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( a ) 

------------------------------

ADD:
a = 1 b = errnode 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( a ) 

------------------------------

REPLACE:
a = 1 b = @@@ if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( a ) 

------------------------------


Programs with 2 errors
REMOVE:
a = 1 b = 1 if ( a 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 ( a ) 

------------------------------

ADD:
a = 1 b = 1 if ( a errnode == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 errnode print ( a ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a @@@ 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 @@@ ( a ) 

------------------------------


REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : return 0 else : 	 b = b / 2 	 print a ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : errnode 	 return 0 else : 	 b = b / 2 	 print errnode ( a ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : @@@ return 0 else : 	 b = b / 2 	 print @@@ a ) 

------------------------------


Programs with 3 errors
REMOVE:
a = 1 b = 1 if a == 0 ) : 	 a = a * 2 	 return a ( a >= 0 ) : 	 return 0 else 	 b = b / 2 	 print ( a ) 

------------------------------

ADD:
a = 1 b = 1 if errnode ( a == 0 ) : 	 a = a * 2 	 return a errnode elif ( a >= 0 ) : 	 return 0 else errnode : 	 b = b / 2 	 print ( a ) 

------------------------------

REPLACE:
a = 1 b = 1 if @@@ a == 0 ) : 	 a = a * 2 	 return a @@@ ( a >= 0 ) : 	 return 0 else @@@ 	 b = b / 2 	 print ( a ) 

------------------------------


REMOVE:
a 1 b = 1 ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( ) 

------------------------------

ADD:
a errnode = 1 b = 1 errnode if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( errnode a ) 

------------------------------

REPLACE:
a @@@ 1 b = 1 @@@ ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( @@@ ) 

------------------------------


'start'
	'construct'
		'statement'
			'assignment_stmt'
				'a'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'1'
		'construct'
			'statement'
				'assignment_stmt'
					'b'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'1'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'a'
							'arithmetic_op'
								'=='
							'arithmetic_expr'
								'atom'
									'literal'
										'0'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'assignment_stmt'
									'a'
									'='
									'expression'
										'arithmetic_expr'
											'arithmetic_expr'
												'atom'
													'a'
											'arithmetic_op'
												'*'
											'arithmetic_expr'
												'atom'
													'literal'
														'2'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'a'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'>='
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'literal'
														'0'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'assignment_stmt'
											'b'
											'='
											'expression'
												'arithmetic_expr'
													'arithmetic_expr'
														'atom'
															'b'
													'arithmetic_op'
														'/'
													'arithmetic_expr'
														'atom'
															'literal'
																'2'
									'statement_suite'
										'\t'
										'statement'
											'func_call_stmt'
												'print'
												'('
												'parameters'
													'atom'
														'literal'
															'"a"'
												')'

'start'
	'construct'
		'statement'
			'assignment_stmt'
				'a'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'1'
		'construct'
			'statement'
				'assignment_stmt'
					'b'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'1'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'a'
							'arithmetic_op'
								'=='
							'arithmetic_expr'
								'atom'
									'literal'
										'0'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'assignment_stmt'
									'a'
									'='
									'expression'
										'arithmetic_expr'
											'arithmetic_expr'
												'atom'
													'a'
											'arithmetic_op'
												'*'
											'arithmetic_expr'
												'atom'
													'literal'
														'2'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'a'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'>='
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'literal'
														'0'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'assignment_stmt'
											'b'
											'='
											'expression'
												'arithmetic_expr'
													'arithmetic_expr'
														'atom'
															'b'
													'arithmetic_op'
														'/'
													'arithmetic_expr'
														'atom'
															'literal'
																'2'
									'statement_suite'
										'\t'
										'statement'
											'func_call_stmt'
												'print'
												'('
												'parameters'
													'atom'
														'literal'
															'"a"'
												')'

Programs with 1 errors
REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= ) : 	 return 0 else : 	 b = b / 2 	 print ( "a" ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= errnode 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "a" ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= @@@ ) : 	 return 0 else : 	 b = b / 2 	 print ( "a" ) 

------------------------------


REMOVE:
a = 1 = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "a" ) 

------------------------------

ADD:
a = 1 errnode b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "a" ) 

------------------------------

REPLACE:
a = 1 @@@ = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "a" ) 

------------------------------


Programs with 2 errors
REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 "a" ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 errnode print errnode ( "a" ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 @@@ @@@ "a" ) 

------------------------------


REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 = b 2 	 print ( "a" ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 errnode b = b errnode / 2 	 print ( "a" ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 @@@ = b @@@ 2 	 print ( "a" ) 

------------------------------


Programs with 3 errors
REMOVE:
a = 1 b = 1 if a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 : 	 return 0 else : 	 b = b 2 	 print ( "a" ) 

------------------------------

ADD:
a = 1 b = 1 if errnode ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 errnode ) : 	 return 0 else : 	 b = b errnode / 2 	 print ( "a" ) 

------------------------------

REPLACE:
a = 1 b = 1 if @@@ a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 @@@ : 	 return 0 else : 	 b = b @@@ 2 	 print ( "a" ) 

------------------------------


REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 0 else : 	 b = b / 2 	 ( "a" ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : errnode 	 errnode return 0 else : 	 b = b / 2 	 errnode print ( "a" ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : @@@ @@@ 0 else : 	 b = b / 2 	 @@@ ( "a" ) 

------------------------------


Illegal character '"'
Syntax error at ''b'
'
Illegal character '"'
None
'start'
	'construct'
		'statement'
			'assignment_stmt'
				'a'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'1'
		'construct'
			'statement'
				'assignment_stmt'
					'b'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'1'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'a'
							'arithmetic_op'
								'=='
							'arithmetic_expr'
								'atom'
									'literal'
										'0'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'assignment_stmt'
									'a'
									'='
									'expression'
										'arithmetic_expr'
											'arithmetic_expr'
												'atom'
													'a'
											'arithmetic_op'
												'*'
											'arithmetic_expr'
												'atom'
													'literal'
														'2'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'a'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'>='
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'literal'
														'0'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'assignment_stmt'
											'b'
											'='
											'expression'
												'arithmetic_expr'
													'arithmetic_expr'
														'atom'
															'b'
													'arithmetic_op'
														'/'
													'arithmetic_expr'
														'atom'
															'literal'
																'2'
									'statement_suite'
										'\t'
										'statement'
											'func_call_stmt'
												'print'
												'('
												'parameters'
													'atom'
														'literal'
															'"halvedb"'
												')'

'start'
	'construct'
		'statement'
			'assignment_stmt'
				'a'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'1'
		'construct'
			'statement'
				'assignment_stmt'
					'b'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'1'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'a'
							'arithmetic_op'
								'=='
							'arithmetic_expr'
								'atom'
									'literal'
										'0'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'assignment_stmt'
									'a'
									'='
									'expression'
										'arithmetic_expr'
											'arithmetic_expr'
												'atom'
													'a'
											'arithmetic_op'
												'*'
											'arithmetic_expr'
												'atom'
													'literal'
														'2'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'a'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'>='
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'literal'
														'0'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'assignment_stmt'
											'b'
											'='
											'expression'
												'arithmetic_expr'
													'arithmetic_expr'
														'atom'
															'b'
													'arithmetic_op'
														'/'
													'arithmetic_expr'
														'atom'
															'literal'
																'2'
									'statement_suite'
										'\t'
										'statement'
											'func_call_stmt'
												'print'
												'('
												'parameters'
													'atom'
														'literal'
															'"halvedb"'
												')'

Programs with 1 errors
REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "halvedb" ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a errnode elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "halvedb" ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a @@@ ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "halvedb" ) 

------------------------------


REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= ) : 	 return 0 else : 	 b = b / 2 	 print ( "halvedb" ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= errnode 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "halvedb" ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= @@@ ) : 	 return 0 else : 	 b = b / 2 	 print ( "halvedb" ) 

------------------------------


Programs with 2 errors
REMOVE:
a = 1 b = 1 if ( a == 0 ) 	 = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "halvedb" ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) errnode : 	 errnode a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "halvedb" ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) @@@ 	 @@@ = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "halvedb" ) 

------------------------------


REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 ( "halvedb" 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 errnode print ( "halvedb" errnode ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 @@@ ( "halvedb" @@@ 

------------------------------


Programs with 3 errors
REMOVE:
a 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) 	 return 0 else : 	 b b / 2 	 print ( "halvedb" ) 

------------------------------

ADD:
a errnode = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) errnode : 	 return 0 else : 	 b errnode = b / 2 	 print ( "halvedb" ) 

------------------------------

REPLACE:
a @@@ 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) @@@ 	 return 0 else : 	 b @@@ b / 2 	 print ( "halvedb" ) 

------------------------------


REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) 	 0 else : 	 b = b 2 	 print ( "halvedb" ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) errnode : 	 errnode return 0 else : 	 b = b errnode / 2 	 print ( "halvedb" ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) @@@ 	 @@@ 0 else : 	 b = b @@@ 2 	 print ( "halvedb" ) 

------------------------------


'start'
	'construct'
		'statement'
			'assignment_stmt'
				'a'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'1'
		'construct'
			'statement'
				'assignment_stmt'
					'b'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'1'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'a'
							'arithmetic_op'
								'=='
							'arithmetic_expr'
								'atom'
									'literal'
										'0'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'assignment_stmt'
									'a'
									'='
									'expression'
										'arithmetic_expr'
											'arithmetic_expr'
												'atom'
													'a'
											'arithmetic_op'
												'*'
											'arithmetic_expr'
												'atom'
													'literal'
														'2'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'a'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'>='
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'literal'
														'0'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'assignment_stmt'
											'b'
											'='
											'expression'
												'arithmetic_expr'
													'arithmetic_expr'
														'atom'
															'b'
													'arithmetic_op'
														'/'
													'arithmetic_expr'
														'atom'
															'literal'
																'2'
									'statement_suite'
										'\t'
										'statement'
											'func_call_stmt'
												'print'
												'('
												'parameters'
													'atom'
														'literal'
															'"halved b"'
												')'

'start'
	'construct'
		'statement'
			'assignment_stmt'
				'a'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'1'
		'construct'
			'statement'
				'assignment_stmt'
					'b'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'1'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'a'
							'arithmetic_op'
								'=='
							'arithmetic_expr'
								'atom'
									'literal'
										'0'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'assignment_stmt'
									'a'
									'='
									'expression'
										'arithmetic_expr'
											'arithmetic_expr'
												'atom'
													'a'
											'arithmetic_op'
												'*'
											'arithmetic_expr'
												'atom'
													'literal'
														'2'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'a'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'>='
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'literal'
														'0'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'assignment_stmt'
											'b'
											'='
											'expression'
												'arithmetic_expr'
													'arithmetic_expr'
														'atom'
															'b'
													'arithmetic_op'
														'/'
													'arithmetic_expr'
														'atom'
															'literal'
																'2'
									'statement_suite'
										'\t'
										'statement'
											'func_call_stmt'
												'print'
												'('
												'parameters'
													'atom'
														'literal'
															'"halved b"'
												')'

Programs with 1 errors
REMOVE:
a = 1 b = 1 ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------

ADD:
a = 1 b = 1 errnode if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------

REPLACE:
a = 1 b = 1 @@@ ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------


REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : return 0 else : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : errnode 	 return 0 else : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : @@@ return 0 else : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------


Programs with 2 errors
REMOVE:
a 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 0 else : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------

ADD:
a errnode = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 errnode return 0 else : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------

REPLACE:
a @@@ 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 @@@ 0 else : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------


REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 a elif a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 errnode return a elif errnode ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 @@@ a elif @@@ a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------


Programs with 3 errors
REMOVE:
a = 1 b = 1 if ( a == 0 : a = a * 2 	 return a ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 errnode ) : errnode 	 a = a * 2 	 return a errnode elif ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 @@@ : @@@ a = a * 2 	 return a @@@ ( a >= 0 ) : 	 return 0 else : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------


REMOVE:
a = 1 b = 1 if a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) 	 return 0 : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------

ADD:
a = 1 b = 1 if errnode ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) errnode : 	 return 0 errnode else : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------

REPLACE:
a = 1 b = 1 if @@@ a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) @@@ 	 return 0 @@@ : 	 b = b / 2 	 print ( "halved b" ) 

------------------------------


Illegal character '"'
Syntax error at ''='
'
Illegal character '"'
Illegal character '"'
Syntax error at ''='
'
Illegal character '"'
'start'
	'construct'
		'statement'
			'func_call_stmt'
				'print'
				'('
				'parameters'
					'atom'
						'literal'
							'"They are equal"'
				')'

'start'
	'construct'
		'statement'
			'func_call_stmt'
				'print'
				'('
				'parameters'
					'atom'
						'literal'
							'"They are equal"'
				')'

Programs with 1 errors
REMOVE:
print ( ) 

------------------------------

ADD:
print ( errnode "They are equal" ) 

------------------------------

REPLACE:
print ( @@@ ) 

------------------------------


REMOVE:
print ( ) 

------------------------------

ADD:
print ( errnode "They are equal" ) 

------------------------------

REPLACE:
print ( @@@ ) 

------------------------------


Programs with 2 errors
REMOVE:
print ( 

------------------------------

ADD:
print ( errnode "They are equal" errnode ) 

------------------------------

REPLACE:
print ( @@@ @@@ 

------------------------------


REMOVE:
print "They are equal" 

------------------------------

ADD:
print errnode ( "They are equal" errnode ) 

------------------------------

REPLACE:
print @@@ "They are equal" @@@ 

------------------------------


Programs with 3 errors
REMOVE:
print 

------------------------------

ADD:
print errnode ( errnode "They are equal" errnode ) 

------------------------------

REPLACE:
print @@@ @@@ @@@ 

------------------------------


REMOVE:
print 

------------------------------

ADD:
print errnode ( errnode "They are equal" errnode ) 

------------------------------

REPLACE:
print @@@ @@@ @@@ 

------------------------------


Syntax error at ''\t'
'
'start'
	'construct'
		'statement'
			'return_stmt'
				'return'
				'expression'
					'arithmetic_expr'
						'atom'
							'b'

'start'
	'construct'
		'statement'
			'return_stmt'
				'return'
				'expression'
					'arithmetic_expr'
						'atom'
							'b'

Programs with 1 errors
REMOVE:
return 

------------------------------

ADD:
return errnode b 

------------------------------

REPLACE:
return @@@ 

------------------------------


REMOVE:
return 

------------------------------

ADD:
return errnode b 

------------------------------

REPLACE:
return @@@ 

------------------------------


Programs with 2 errors
Illegal character '"'
Syntax error at ''='
'
Illegal character '"'
Illegal character '"'
Syntax error at ''='
'
Illegal character '"'
Illegal character '"'
Syntax error at ''='
'
Illegal character '"'
Illegal character '"'
Syntax error at ''='
'
Illegal character '"'
'start'
	'construct'
		'statement'
			'func_call_stmt'
				'print'
				'('
				'parameters'
					'atom'
						'literal'
							'"They are equal"'
				')'

'start'
	'construct'
		'statement'
			'func_call_stmt'
				'print'
				'('
				'parameters'
					'atom'
						'literal'
							'"They are equal"'
				')'

Programs with 1 errors
REMOVE:
print "They are equal" ) 

------------------------------

ADD:
print errnode ( "They are equal" ) 

------------------------------

REPLACE:
print @@@ "They are equal" ) 

------------------------------


REMOVE:
print ( ) 

------------------------------

ADD:
print ( errnode "They are equal" ) 

------------------------------

REPLACE:
print ( @@@ ) 

------------------------------


Programs with 2 errors
REMOVE:
print ( 

------------------------------

ADD:
print ( errnode "They are equal" errnode ) 

------------------------------

REPLACE:
print ( @@@ @@@ 

------------------------------


REMOVE:
print ( 

------------------------------

ADD:
print ( errnode "They are equal" errnode ) 

------------------------------

REPLACE:
print ( @@@ @@@ 

------------------------------


Programs with 3 errors
REMOVE:
print 

------------------------------

ADD:
print errnode ( errnode "They are equal" errnode ) 

------------------------------

REPLACE:
print @@@ @@@ @@@ 

------------------------------


REMOVE:
print 

------------------------------

ADD:
print errnode ( errnode "They are equal" errnode ) 

------------------------------

REPLACE:
print @@@ @@@ @@@ 

------------------------------


Illegal character '"'
Syntax error at ''='
'
Illegal character '"'
Illegal character '"'
Syntax error at ''='
'
Illegal character '"'
'start'
	'construct'
		'statement'
			'func_call_stmt'
				'print'
				'('
				'parameters'
					'atom'
						'literal'
							'"They are equal"'
				')'

'start'
	'construct'
		'statement'
			'func_call_stmt'
				'print'
				'('
				'parameters'
					'atom'
						'literal'
							'"They are equal"'
				')'

Programs with 1 errors
REMOVE:
print ( "They are equal" 

------------------------------

ADD:
print ( "They are equal" errnode ) 

------------------------------

REPLACE:
print ( "They are equal" @@@ 

------------------------------


REMOVE:
print ( "They are equal" 

------------------------------

ADD:
print ( "They are equal" errnode ) 

------------------------------

REPLACE:
print ( "They are equal" @@@ 

------------------------------


Programs with 2 errors
REMOVE:
print ( 

------------------------------

ADD:
print ( errnode "They are equal" errnode ) 

------------------------------

REPLACE:
print ( @@@ @@@ 

------------------------------


REMOVE:
print "They are equal" 

------------------------------

ADD:
print errnode ( "They are equal" errnode ) 

------------------------------

REPLACE:
print @@@ "They are equal" @@@ 

------------------------------


Programs with 3 errors
REMOVE:
print 

------------------------------

ADD:
print errnode ( errnode "They are equal" errnode ) 

------------------------------

REPLACE:
print @@@ @@@ @@@ 

------------------------------


REMOVE:
print 

------------------------------

ADD:
print errnode ( errnode "They are equal" errnode ) 

------------------------------

REPLACE:
print @@@ @@@ @@@ 

------------------------------


Syntax error at ''pass'
'
None
'start'
	'construct'
		'funcdef'
			'def'
			'find_max'
			'('
			'parameters'
				'atom'
					'a'
				','
				'parameters'
					'atom'
						'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'atom'
									'literal'
										'2'

'start'
	'construct'
		'funcdef'
			'def'
			'find_max'
			'('
			'parameters'
				'atom'
					'a'
				','
				'parameters'
					'atom'
						'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'atom'
									'literal'
										'2'

Programs with 1 errors
REMOVE:
def find_max ( a , b : 	 a = 2 

------------------------------

ADD:
def find_max ( a , b errnode ) : 	 a = 2 

------------------------------

REPLACE:
def find_max ( a , b @@@ : 	 a = 2 

------------------------------


REMOVE:
def find_max ( a , ) : 	 a = 2 

------------------------------

ADD:
def find_max ( a , errnode b ) : 	 a = 2 

------------------------------

REPLACE:
def find_max ( a , @@@ ) : 	 a = 2 

------------------------------


Programs with 2 errors
REMOVE:
def find_max a , ) : 	 a = 2 

------------------------------

ADD:
def find_max errnode ( a , errnode b ) : 	 a = 2 

------------------------------

REPLACE:
def find_max @@@ a , @@@ ) : 	 a = 2 

------------------------------


REMOVE:
def ( a , b ) : 	 = 2 

------------------------------

ADD:
def errnode find_max ( a , b ) : 	 errnode a = 2 

------------------------------

REPLACE:
def @@@ ( a , b ) : 	 @@@ = 2 

------------------------------


Programs with 3 errors
REMOVE:
def ( a , b ) 	 a = 

------------------------------

ADD:
def errnode find_max ( a , b ) errnode : 	 a = errnode 2 

------------------------------

REPLACE:
def @@@ ( a , b ) @@@ 	 a = @@@ 

------------------------------


REMOVE:
def a , b ) : 	 a = 

------------------------------

ADD:
def errnode find_max errnode ( a , b ) : 	 a = errnode 2 

------------------------------

REPLACE:
def @@@ @@@ a , b ) : 	 a = @@@ 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'find_max'
			'('
			'parameters'
				'atom'
					'a'
				','
				'parameters'
					'atom'
						'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'atom'
									'literal'
										'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'a'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'/'
									'arithmetic_expr'
										'atom'
											'literal'
												'2'

'start'
	'construct'
		'funcdef'
			'def'
			'find_max'
			'('
			'parameters'
				'atom'
					'a'
				','
				'parameters'
					'atom'
						'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'atom'
									'literal'
										'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'a'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'/'
									'arithmetic_expr'
										'atom'
											'literal'
												'2'

Programs with 1 errors
REMOVE:
def find_max ( a , b : 	 a = 2 	 a = a / 2 

------------------------------

ADD:
def find_max ( a , b errnode ) : 	 a = 2 	 a = a / 2 

------------------------------

REPLACE:
def find_max ( a , b @@@ : 	 a = 2 	 a = a / 2 

------------------------------


REMOVE:
def find_max ( a , b ) : 	 a = 2 	 a = / 2 

------------------------------

ADD:
def find_max ( a , b ) : 	 a = 2 	 a = errnode a / 2 

------------------------------

REPLACE:
def find_max ( a , b ) : 	 a = 2 	 a = @@@ / 2 

------------------------------


Programs with 2 errors
REMOVE:
def find_max ( a , b ) 	 a = 2 	 = a / 2 

------------------------------

ADD:
def find_max ( a , b ) errnode : 	 a = 2 	 errnode a = a / 2 

------------------------------

REPLACE:
def find_max ( a , b ) @@@ 	 a = 2 	 @@@ = a / 2 

------------------------------


REMOVE:
def find_max ( a , b ) : 	 = 2 	 a = / 2 

------------------------------

ADD:
def find_max ( a , b ) : 	 errnode a = 2 	 a = errnode a / 2 

------------------------------

REPLACE:
def find_max ( a , b ) : 	 @@@ = 2 	 a = @@@ / 2 

------------------------------


Programs with 3 errors
REMOVE:
def find_max , b : 	 a = 2 	 a = a / 2 

------------------------------

ADD:
def find_max errnode ( errnode a , b errnode ) : 	 a = 2 	 a = a / 2 

------------------------------

REPLACE:
def find_max @@@ @@@ , b @@@ : 	 a = 2 	 a = a / 2 

------------------------------


REMOVE:
def find_max ( a , b ) : 	 a 2 = a / 2 

------------------------------

ADD:
def find_max ( a , b ) : 	 a errnode = 2 errnode 	 errnode a = a / 2 

------------------------------

REPLACE:
def find_max ( a , b ) : 	 a @@@ 2 @@@ @@@ = a / 2 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'find_max'
			'('
			'parameters'
				'atom'
					'a'
				','
				'parameters'
					'atom'
						'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'atom'
									'literal'
										'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'a'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'/'
									'arithmetic_expr'
										'atom'
											'literal'
												'2'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'expression'
									'arithmetic_expr'
										'atom'
											'a'

'start'
	'construct'
		'funcdef'
			'def'
			'find_max'
			'('
			'parameters'
				'atom'
					'a'
				','
				'parameters'
					'atom'
						'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'atom'
									'literal'
										'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'a'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'/'
									'arithmetic_expr'
										'atom'
											'literal'
												'2'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'expression'
									'arithmetic_expr'
										'atom'
											'a'

Programs with 1 errors
REMOVE:
def find_max ( a , ) : 	 a = 2 	 a = a / 2 	 return a 

------------------------------

ADD:
def find_max ( a , errnode b ) : 	 a = 2 	 a = a / 2 	 return a 

------------------------------

REPLACE:
def find_max ( a , @@@ ) : 	 a = 2 	 a = a / 2 	 return a 

------------------------------


REMOVE:
def find_max ( a , b ) 	 a = 2 	 a = a / 2 	 return a 

------------------------------

ADD:
def find_max ( a , b ) errnode : 	 a = 2 	 a = a / 2 	 return a 

------------------------------

REPLACE:
def find_max ( a , b ) @@@ 	 a = 2 	 a = a / 2 	 return a 

------------------------------


Programs with 2 errors
REMOVE:
def find_max ( a , b ) : 	 a = 2 	 a = a / 2 a 

------------------------------

ADD:
def find_max ( a , b ) : 	 a = 2 	 a = a / 2 errnode 	 errnode return a 

------------------------------

REPLACE:
def find_max ( a , b ) : 	 a = 2 	 a = a / 2 @@@ @@@ a 

------------------------------


REMOVE:
def find_max ( a , b ) : 	 a = 2 	 a = a 2 	 a 

------------------------------

ADD:
def find_max ( a , b ) : 	 a = 2 	 a = a errnode / 2 	 errnode return a 

------------------------------

REPLACE:
def find_max ( a , b ) : 	 a = 2 	 a = a @@@ 2 	 @@@ a 

------------------------------


Programs with 3 errors
REMOVE:
def find_max ( a , b ) : 	 = 2 	 a a / 2 	 return 

------------------------------

ADD:
def find_max ( a , b ) : 	 errnode a = 2 	 a errnode = a / 2 	 return errnode a 

------------------------------

REPLACE:
def find_max ( a , b ) : 	 @@@ = 2 	 a @@@ a / 2 	 return @@@ 

------------------------------


REMOVE:
def find_max ( b ) : 	 a = 2 a = a / 2 	 return a 

------------------------------

ADD:
def find_max ( errnode a errnode , b ) : 	 a = 2 errnode 	 a = a / 2 	 return a 

------------------------------

REPLACE:
def find_max ( @@@ @@@ b ) : 	 a = 2 @@@ a = a / 2 	 return a 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'find_max'
			'('
			'parameters'
				'atom'
					'a'
				','
				'parameters'
					'atom'
						'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'atom'
									'literal'
										'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'a'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'/'
									'arithmetic_expr'
										'atom'
											'literal'
												'2'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'expression'
									'arithmetic_expr'
										'atom'
											'literal'
												'"hel"'

'start'
	'construct'
		'funcdef'
			'def'
			'find_max'
			'('
			'parameters'
				'atom'
					'a'
				','
				'parameters'
					'atom'
						'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'atom'
									'literal'
										'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'a'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'/'
									'arithmetic_expr'
										'atom'
											'literal'
												'2'
					'statement_suite'
						'\t'
						'statement'
							'return_stmt'
								'return'
								'expression'
									'arithmetic_expr'
										'atom'
											'literal'
												'"hel"'

Programs with 1 errors
REMOVE:
def ( a , b ) : 	 a = 2 	 a = a / 2 	 return "hel" 

------------------------------

ADD:
def errnode find_max ( a , b ) : 	 a = 2 	 a = a / 2 	 return "hel" 

------------------------------

REPLACE:
def @@@ ( a , b ) : 	 a = 2 	 a = a / 2 	 return "hel" 

------------------------------


REMOVE:
def find_max ( a , b ) : 	 a = 2 	 a = a / 	 return "hel" 

------------------------------

ADD:
def find_max ( a , b ) : 	 a = 2 	 a = a / errnode 2 	 return "hel" 

------------------------------

REPLACE:
def find_max ( a , b ) : 	 a = 2 	 a = a / @@@ 	 return "hel" 

------------------------------


Programs with 2 errors
REMOVE:
def find_max ( a , b : 	 a = 2 	 = a / 2 	 return "hel" 

------------------------------

ADD:
def find_max ( a , b errnode ) : 	 a = 2 	 errnode a = a / 2 	 return "hel" 

------------------------------

REPLACE:
def find_max ( a , b @@@ : 	 a = 2 	 @@@ = a / 2 	 return "hel" 

------------------------------


REMOVE:
def find_max ( , ) : 	 a = 2 	 a = a / 2 	 return "hel" 

------------------------------

ADD:
def find_max ( errnode a , errnode b ) : 	 a = 2 	 a = a / 2 	 return "hel" 

------------------------------

REPLACE:
def find_max ( @@@ , @@@ ) : 	 a = 2 	 a = a / 2 	 return "hel" 

------------------------------


Programs with 3 errors
REMOVE:
def find_max a , ) : 	 a = 2 	 a = / 2 	 return "hel" 

------------------------------

ADD:
def find_max errnode ( a , errnode b ) : 	 a = 2 	 a = errnode a / 2 	 return "hel" 

------------------------------

REPLACE:
def find_max @@@ a , @@@ ) : 	 a = 2 	 a = @@@ / 2 	 return "hel" 

------------------------------


REMOVE:
def find_max a , b ) : 	 = 2 	 a = / 2 	 return "hel" 

------------------------------

ADD:
def find_max errnode ( a , b ) : 	 errnode a = 2 	 a = errnode a / 2 	 return "hel" 

------------------------------

REPLACE:
def find_max @@@ a , b ) : 	 @@@ = 2 	 a = @@@ / 2 	 return "hel" 

------------------------------


'start'
	'construct'
		'funcdef'
			'def'
			'find_max'
			'('
			'parameters'
				'atom'
					'a'
				','
				'parameters'
					'atom'
						'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'atom'
									'literal'
										'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'a'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'/'
									'arithmetic_expr'
										'atom'
											'literal'
												'2'
					'statement_suite'
						'\t'
						'statement'
							'func_call_stmt'
								'call'
								'('
								'parameters'
									'atom'
										'a'
								')'

'start'
	'construct'
		'funcdef'
			'def'
			'find_max'
			'('
			'parameters'
				'atom'
					'a'
				','
				'parameters'
					'atom'
						'b'
			')'
			':'
			'statement_suite'
				'\t'
				'statement'
					'assignment_stmt'
						'a'
						'='
						'expression'
							'arithmetic_expr'
								'atom'
									'literal'
										'2'
				'statement_suite'
					'\t'
					'statement'
						'assignment_stmt'
							'a'
							'='
							'expression'
								'arithmetic_expr'
									'arithmetic_expr'
										'atom'
											'a'
									'arithmetic_op'
										'/'
									'arithmetic_expr'
										'atom'
											'literal'
												'2'
					'statement_suite'
						'\t'
						'statement'
							'func_call_stmt'
								'call'
								'('
								'parameters'
									'atom'
										'a'
								')'

Programs with 1 errors
REMOVE:
def ( a , b ) : 	 a = 2 	 a = a / 2 	 call ( a ) 

------------------------------

ADD:
def errnode find_max ( a , b ) : 	 a = 2 	 a = a / 2 	 call ( a ) 

------------------------------

REPLACE:
def @@@ ( a , b ) : 	 a = 2 	 a = a / 2 	 call ( a ) 

------------------------------


REMOVE:
def find_max ( a , b ) : 	 a = 2 	 = a / 2 	 call ( a ) 

------------------------------

ADD:
def find_max ( a , b ) : 	 a = 2 	 errnode a = a / 2 	 call ( a ) 

------------------------------

REPLACE:
def find_max ( a , b ) : 	 a = 2 	 @@@ = a / 2 	 call ( a ) 

------------------------------


Programs with 2 errors
REMOVE:
def find_max a , b ) : 	 a = 2 	 a = / 2 	 call ( a ) 

------------------------------

ADD:
def find_max errnode ( a , b ) : 	 a = 2 	 a = errnode a / 2 	 call ( a ) 

------------------------------

REPLACE:
def find_max @@@ a , b ) : 	 a = 2 	 a = @@@ / 2 	 call ( a ) 

------------------------------


REMOVE:
def ( a , b ) : 	 a 2 	 a = a / 2 	 call ( a ) 

------------------------------

ADD:
def errnode find_max ( a , b ) : 	 a errnode = 2 	 a = a / 2 	 call ( a ) 

------------------------------

REPLACE:
def @@@ ( a , b ) : 	 a @@@ 2 	 a = a / 2 	 call ( a ) 

------------------------------


Programs with 3 errors
REMOVE:
def find_max ( a , b ) : 	 a = a = a / 2 	 call ( ) 

------------------------------

ADD:
def find_max ( a , b ) : 	 a = errnode 2 errnode 	 a = a / 2 	 call ( errnode a ) 

------------------------------

REPLACE:
def find_max ( a , b ) : 	 a = @@@ @@@ a = a / 2 	 call ( @@@ ) 

------------------------------


REMOVE:
def find_max a , b ) : 	 a 2 	 a = a / 2 	 call a ) 

------------------------------

ADD:
def find_max errnode ( a , b ) : 	 a errnode = 2 	 a = a / 2 	 call errnode ( a ) 

------------------------------

REPLACE:
def find_max @@@ a , b ) : 	 a @@@ 2 	 a = a / 2 	 call @@@ a ) 

------------------------------


Syntax error at ''='
'
'start'
	'construct'
		'statement'
			'return_stmt'
				'return'
				'expression'
					'arithmetic_expr'
						'atom'
							'a'

'start'
	'construct'
		'statement'
			'return_stmt'
				'return'
				'expression'
					'arithmetic_expr'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
return 

------------------------------

ADD:
return errnode a 

------------------------------

REPLACE:
return @@@ 

------------------------------


REMOVE:
return 

------------------------------

ADD:
return errnode a 

------------------------------

REPLACE:
return @@@ 

------------------------------


Programs with 2 errors
Syntax error at ''\t'
'
'start'
	'construct'
		'statement'
			'return_stmt'
				'return'
				'expression'
					'arithmetic_expr'
						'atom'
							'a'

'start'
	'construct'
		'statement'
			'return_stmt'
				'return'
				'expression'
					'arithmetic_expr'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
return 

------------------------------

ADD:
return errnode a 

------------------------------

REPLACE:
return @@@ 

------------------------------


REMOVE:
return 

------------------------------

ADD:
return errnode a 

------------------------------

REPLACE:
return @@@ 

------------------------------


Programs with 2 errors
Syntax error at ''\t'
'
'start'
	'construct'
		'statement'
			'return_stmt'
				'return'
				'expression'
					'arithmetic_expr'
						'atom'
							'a'

'start'
	'construct'
		'statement'
			'return_stmt'
				'return'
				'expression'
					'arithmetic_expr'
						'atom'
							'a'

Programs with 1 errors
REMOVE:
return 

------------------------------

ADD:
return errnode a 

------------------------------

REPLACE:
return @@@ 

------------------------------


REMOVE:
return 

------------------------------

ADD:
return errnode a 

------------------------------

REPLACE:
return @@@ 

------------------------------


Programs with 2 errors
'start'
	'construct'
		'statement'
			'assignment_stmt'
				'a'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'1'
		'construct'
			'statement'
				'assignment_stmt'
					'b'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'1'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'a'
							'arithmetic_op'
								'=='
							'arithmetic_expr'
								'atom'
									'literal'
										'0'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'assignment_stmt'
									'a'
									'='
									'expression'
										'arithmetic_expr'
											'arithmetic_expr'
												'atom'
													'a'
											'arithmetic_op'
												'*'
											'arithmetic_expr'
												'atom'
													'literal'
														'2'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'a'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'>='
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'literal'
														'0'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'assignment_stmt'
											'b'
											'='
											'expression'
												'func_call_stmt'
													'find'
													'('
													'parameters'
														'atom'
															'b'
													')'
									'statement_suite'
										'\t'
										'statement'
											'func_call_stmt'
												'print'
												'('
												'parameters'
													'atom'
														'literal'
															'"calculated b"'
												')'

'start'
	'construct'
		'statement'
			'assignment_stmt'
				'a'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'1'
		'construct'
			'statement'
				'assignment_stmt'
					'b'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'1'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'a'
							'arithmetic_op'
								'=='
							'arithmetic_expr'
								'atom'
									'literal'
										'0'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'assignment_stmt'
									'a'
									'='
									'expression'
										'arithmetic_expr'
											'arithmetic_expr'
												'atom'
													'a'
											'arithmetic_op'
												'*'
											'arithmetic_expr'
												'atom'
													'literal'
														'2'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'a'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'a'
								'arithmetic_op'
									'>='
								'arithmetic_expr'
									'atom'
										'literal'
											'0'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'return_stmt'
										'return'
										'expression'
											'arithmetic_expr'
												'atom'
													'literal'
														'0'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'assignment_stmt'
											'b'
											'='
											'expression'
												'func_call_stmt'
													'find'
													'('
													'parameters'
														'atom'
															'b'
													')'
									'statement_suite'
										'\t'
										'statement'
											'func_call_stmt'
												'print'
												'('
												'parameters'
													'atom'
														'literal'
															'"calculated b"'
												')'

Programs with 1 errors
REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = find ( b ) 	 print ( "calculated b" ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = errnode a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = find ( b ) 	 print ( "calculated b" ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = @@@ * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = find ( b ) 	 print ( "calculated b" ) 

------------------------------


REMOVE:
a = 1 b = if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = find ( b ) 	 print ( "calculated b" ) 

------------------------------

ADD:
a = 1 b = errnode 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = find ( b ) 	 print ( "calculated b" ) 

------------------------------

REPLACE:
a = 1 b = @@@ if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : 	 b = find ( b ) 	 print ( "calculated b" ) 

------------------------------


Programs with 2 errors
REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a 2 	 return a elif ( a >= 0 : 	 return 0 else : 	 b = find ( b ) 	 print ( "calculated b" ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a errnode * 2 	 return a elif ( a >= 0 errnode ) : 	 return 0 else : 	 b = find ( b ) 	 print ( "calculated b" ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a @@@ 2 	 return a elif ( a >= 0 @@@ : 	 return 0 else : 	 b = find ( b ) 	 print ( "calculated b" ) 

------------------------------


REMOVE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : b = find ( b ) print ( "calculated b" ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : errnode 	 b = find ( b ) errnode 	 print ( "calculated b" ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 return 0 else : @@@ b = find ( b ) @@@ print ( "calculated b" ) 

------------------------------


Programs with 3 errors
REMOVE:
a = 1 b = 1 if ( a == 0 ) 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 0 else 	 b = find ( b ) 	 print ( "calculated b" ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) errnode : 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 errnode return 0 else errnode : 	 b = find ( b ) 	 print ( "calculated b" ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) @@@ 	 a = a * 2 	 return a elif ( a >= 0 ) : 	 @@@ 0 else @@@ 	 b = find ( b ) 	 print ( "calculated b" ) 

------------------------------


REMOVE:
a = 1 b = 1 if ( a == 0 ) : a = a * 2 	 return elif ( a >= 0 ) : 	 return else : 	 b = find ( b ) 	 print ( "calculated b" ) 

------------------------------

ADD:
a = 1 b = 1 if ( a == 0 ) : errnode 	 a = a * 2 	 return errnode a elif ( a >= 0 ) : 	 return errnode 0 else : 	 b = find ( b ) 	 print ( "calculated b" ) 

------------------------------

REPLACE:
a = 1 b = 1 if ( a == 0 ) : @@@ a = a * 2 	 return @@@ elif ( a >= 0 ) : 	 return @@@ else : 	 b = find ( b ) 	 print ( "calculated b" ) 

------------------------------


Illegal character '"'
Syntax error at ''='
'
Illegal character '"'
Illegal character '"'
Syntax error at ''='
'
Illegal character '"'
'start'
	'construct'
		'statement'
			'func_call_stmt'
				'print'
				'('
				'parameters'
					'atom'
						'literal'
							'"They are equal"'
				')'

'start'
	'construct'
		'statement'
			'func_call_stmt'
				'print'
				'('
				'parameters'
					'atom'
						'literal'
							'"They are equal"'
				')'

Programs with 1 errors
REMOVE:
print ( ) 

------------------------------

ADD:
print ( errnode "They are equal" ) 

------------------------------

REPLACE:
print ( @@@ ) 

------------------------------


REMOVE:
print ( "They are equal" 

------------------------------

ADD:
print ( "They are equal" errnode ) 

------------------------------

REPLACE:
print ( "They are equal" @@@ 

------------------------------


Programs with 2 errors
REMOVE:
print ) 

------------------------------

ADD:
print errnode ( errnode "They are equal" ) 

------------------------------

REPLACE:
print @@@ @@@ ) 

------------------------------


REMOVE:
print ( 

------------------------------

ADD:
print ( errnode "They are equal" errnode ) 

------------------------------

REPLACE:
print ( @@@ @@@ 

------------------------------


Programs with 3 errors
REMOVE:
print 

------------------------------

ADD:
print errnode ( errnode "They are equal" errnode ) 

------------------------------

REPLACE:
print @@@ @@@ @@@ 

------------------------------


REMOVE:
print 

------------------------------

ADD:
print errnode ( errnode "They are equal" errnode ) 

------------------------------

REPLACE:
print @@@ @@@ @@@ 

------------------------------


'start'
	'construct'
		'statement'
			'assignment_stmt'
				'n1'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'10'
		'construct'
			'statement'
				'assignment_stmt'
					'n2'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'20'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'n1'
							'arithmetic_op'
								'<'
							'arithmetic_expr'
								'atom'
									'n2'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'func_call_stmt'
									'print'
									'('
									'parameters'
										'atom'
											'literal'
												'"n1"'
									')'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'n2'
								'arithmetic_op'
									'<'
								'arithmetic_expr'
									'atom'
										'n1'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'func_call_stmt'
										'print'
										'('
										'parameters'
											'atom'
												'literal'
													'"n2"'
										')'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'func_call_stmt'
											'print'
											'('
											'parameters'
												'atom'
													'literal'
														'"They are equal"'
											')'

'start'
	'construct'
		'statement'
			'assignment_stmt'
				'n1'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'10'
		'construct'
			'statement'
				'assignment_stmt'
					'n2'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'20'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'n1'
							'arithmetic_op'
								'<'
							'arithmetic_expr'
								'atom'
									'n2'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'func_call_stmt'
									'print'
									'('
									'parameters'
										'atom'
											'literal'
												'"n1"'
									')'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'n2'
								'arithmetic_op'
									'<'
								'arithmetic_expr'
									'atom'
										'n1'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'func_call_stmt'
										'print'
										'('
										'parameters'
											'atom'
												'literal'
													'"n2"'
										')'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'func_call_stmt'
											'print'
											'('
											'parameters'
												'atom'
													'literal'
														'"They are equal"'
											')'

Programs with 1 errors
REMOVE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( "n1" ) ( n2 < n1 ) : 	 print ( "n2" ) else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( "n1" ) errnode elif ( n2 < n1 ) : 	 print ( "n2" ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( "n1" ) @@@ ( n2 < n1 ) : 	 print ( "n2" ) else : 	 print ( "They are equal" ) 

------------------------------


REMOVE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( "n1" ) elif ( n2 < n1 ) : 	 print ( "n2" ) else : 	 print "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( "n1" ) elif ( n2 < n1 ) : 	 print ( "n2" ) else : 	 print errnode ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( "n1" ) elif ( n2 < n1 ) : 	 print ( "n2" ) else : 	 print @@@ "They are equal" ) 

------------------------------


Programs with 2 errors
REMOVE:
n1 = 10 n2 = 20 ( n1 n2 ) : 	 print ( "n1" ) elif ( n2 < n1 ) : 	 print ( "n2" ) else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 errnode if ( n1 errnode < n2 ) : 	 print ( "n1" ) elif ( n2 < n1 ) : 	 print ( "n2" ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 @@@ ( n1 @@@ n2 ) : 	 print ( "n1" ) elif ( n2 < n1 ) : 	 print ( "n2" ) else : 	 print ( "They are equal" ) 

------------------------------


REMOVE:
n1 = 10 n2 = 20 if ( n1 < ) : 	 print ( "n1" ) elif n2 < n1 ) : 	 print ( "n2" ) else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 if ( n1 < errnode n2 ) : 	 print ( "n1" ) elif errnode ( n2 < n1 ) : 	 print ( "n2" ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 if ( n1 < @@@ ) : 	 print ( "n1" ) elif @@@ n2 < n1 ) : 	 print ( "n2" ) else : 	 print ( "They are equal" ) 

------------------------------


Programs with 3 errors
REMOVE:
n1 = n2 = 20 if ( n1 n2 ) : 	 print ( "n1" ) elif ( n2 < n1 ) : 	 print ( ) else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 = errnode 10 n2 = 20 if ( n1 errnode < n2 ) : 	 print ( "n1" ) elif ( n2 < n1 ) : 	 print ( errnode "n2" ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = @@@ n2 = 20 if ( n1 @@@ n2 ) : 	 print ( "n1" ) elif ( n2 < n1 ) : 	 print ( @@@ ) else : 	 print ( "They are equal" ) 

------------------------------


REMOVE:
n1 = 10 n2 20 if ( n1 < n2 ) : print ( "n1" ) elif ( n2 < n1 ) : print ( "n2" ) else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 errnode = 20 if ( n1 < n2 ) : errnode 	 print ( "n1" ) elif ( n2 < n1 ) : errnode 	 print ( "n2" ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 @@@ 20 if ( n1 < n2 ) : @@@ print ( "n1" ) elif ( n2 < n1 ) : @@@ print ( "n2" ) else : 	 print ( "They are equal" ) 

------------------------------


'start'
	'construct'
		'statement'
			'assignment_stmt'
				'n1'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'10'
		'construct'
			'statement'
				'assignment_stmt'
					'n2'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'20'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'n1'
							'arithmetic_op'
								'<'
							'arithmetic_expr'
								'atom'
									'n2'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'func_call_stmt'
									'print'
									'('
									'parameters'
										'atom'
											'n2'
									')'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'n2'
								'arithmetic_op'
									'<'
								'arithmetic_expr'
									'atom'
										'n1'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'func_call_stmt'
										'print'
										'('
										'parameters'
											'atom'
												'n2'
										')'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'func_call_stmt'
											'print'
											'('
											'parameters'
												'atom'
													'literal'
														'"They are equal"'
											')'

'start'
	'construct'
		'statement'
			'assignment_stmt'
				'n1'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'10'
		'construct'
			'statement'
				'assignment_stmt'
					'n2'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'20'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'n1'
							'arithmetic_op'
								'<'
							'arithmetic_expr'
								'atom'
									'n2'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'func_call_stmt'
									'print'
									'('
									'parameters'
										'atom'
											'n2'
									')'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'n2'
								'arithmetic_op'
									'<'
								'arithmetic_expr'
									'atom'
										'n1'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'func_call_stmt'
										'print'
										'('
										'parameters'
											'atom'
												'n2'
										')'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'func_call_stmt'
											'print'
											'('
											'parameters'
												'atom'
													'literal'
														'"They are equal"'
											')'

Programs with 1 errors
REMOVE:
n1 = 10 n2 = 20 if ( < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 if ( errnode n1 < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 if ( @@@ < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------


REMOVE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif errnode ( n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif @@@ n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------


Programs with 2 errors
REMOVE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( errnode n2 ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 errnode print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( @@@ ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 @@@ ( "They are equal" ) 

------------------------------


REMOVE:
n1 = 10 n2 = 20 if ( < n2 ) : 	 print ( ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 if ( errnode n1 < n2 ) : 	 print ( errnode n2 ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 if ( @@@ < n2 ) : 	 print ( @@@ ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------


Programs with 3 errors
REMOVE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 n1 : 	 print ( n2 ) else : 	 ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 errnode < n1 errnode ) : 	 print ( n2 ) else : 	 errnode print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 @@@ n1 @@@ : 	 print ( n2 ) else : 	 @@@ ( "They are equal" ) 

------------------------------


REMOVE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 ( n2 ) ( n2 < n1 ) 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 errnode print ( n2 ) errnode elif ( n2 < n1 ) errnode : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 @@@ ( n2 ) @@@ ( n2 < n1 ) @@@ 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------


'start'
	'construct'
		'statement'
			'assignment_stmt'
				'n1'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'10'
		'construct'
			'statement'
				'assignment_stmt'
					'n2'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'20'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'n1'
							'arithmetic_op'
								'<'
							'arithmetic_expr'
								'atom'
									'n2'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'func_call_stmt'
									'print'
									'('
									'parameters'
										'atom'
											'n2'
									')'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'n2'
								'arithmetic_op'
									'<'
								'arithmetic_expr'
									'atom'
										'n1'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'func_call_stmt'
										'print'
										'('
										'parameters'
											'atom'
												'n2'
										')'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'func_call_stmt'
											'print'
											'('
											'parameters'
												'atom'
													'literal'
														'"They are equal"'
											')'

'start'
	'construct'
		'statement'
			'assignment_stmt'
				'n1'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'10'
		'construct'
			'statement'
				'assignment_stmt'
					'n2'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'20'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'n1'
							'arithmetic_op'
								'<'
							'arithmetic_expr'
								'atom'
									'n2'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'func_call_stmt'
									'print'
									'('
									'parameters'
										'atom'
											'n2'
									')'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'n2'
								'arithmetic_op'
									'<'
								'arithmetic_expr'
									'atom'
										'n1'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'func_call_stmt'
										'print'
										'('
										'parameters'
											'atom'
												'n2'
										')'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'func_call_stmt'
											'print'
											'('
											'parameters'
												'atom'
													'literal'
														'"They are equal"'
											')'

Programs with 1 errors
REMOVE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print errnode ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print @@@ "They are equal" ) 

------------------------------


REMOVE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : 	 print ( n2 else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : 	 print ( n2 errnode ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : 	 print ( n2 @@@ else : 	 print ( "They are equal" ) 

------------------------------


Programs with 2 errors
REMOVE:
n1 10 n2 = 20 if ( n1 < n2 ) : 	 print n2 ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 errnode = 10 n2 = 20 if ( n1 < n2 ) : 	 print errnode ( n2 ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 @@@ 10 n2 = 20 if ( n1 < n2 ) : 	 print @@@ n2 ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------


REMOVE:
n1 = n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : 	 print ( n2 else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 = errnode 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : 	 print ( n2 errnode ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = @@@ n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : 	 print ( n2 @@@ else : 	 print ( "They are equal" ) 

------------------------------


Programs with 3 errors
REMOVE:
n1 = 10 n2 = 20 if ( n1 < n2 : 	 print ( n2 ) elif ( < n1 ) : 	 print n2 ) else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 if ( n1 < n2 errnode ) : 	 print ( n2 ) elif ( errnode n2 < n1 ) : 	 print errnode ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 if ( n1 < n2 @@@ : 	 print ( n2 ) elif ( @@@ < n1 ) : 	 print @@@ n2 ) else : 	 print ( "They are equal" ) 

------------------------------


REMOVE:
n1 = 10 n2 = 20 if ( n1 n2 ) : 	 print ( n2 ) elif ( < n1 ) : print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 if ( n1 errnode < n2 ) : 	 print ( n2 ) elif ( errnode n2 < n1 ) : errnode 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 if ( n1 @@@ n2 ) : 	 print ( n2 ) elif ( @@@ < n1 ) : @@@ print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------


'start'
	'construct'
		'statement'
			'assignment_stmt'
				'n1'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'10'
		'construct'
			'statement'
				'assignment_stmt'
					'n2'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'20'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'n1'
							'arithmetic_op'
								'<'
							'arithmetic_expr'
								'atom'
									'n2'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'func_call_stmt'
									'print'
									'('
									'parameters'
										'atom'
											'n2'
									')'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'n2'
								'arithmetic_op'
									'<'
								'arithmetic_expr'
									'atom'
										'n1'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'func_call_stmt'
										'print'
										'('
										'parameters'
											'atom'
												'n2'
										')'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'func_call_stmt'
											'print'
											'('
											'parameters'
												'atom'
													'literal'
														'"They are equal"'
											')'

'start'
	'construct'
		'statement'
			'assignment_stmt'
				'n1'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'10'
		'construct'
			'statement'
				'assignment_stmt'
					'n2'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'20'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'n1'
							'arithmetic_op'
								'<'
							'arithmetic_expr'
								'atom'
									'n2'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'func_call_stmt'
									'print'
									'('
									'parameters'
										'atom'
											'n2'
									')'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'n2'
								'arithmetic_op'
									'<'
								'arithmetic_expr'
									'atom'
										'n1'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'func_call_stmt'
										'print'
										'('
										'parameters'
											'atom'
												'n2'
										')'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'func_call_stmt'
											'print'
											'('
											'parameters'
												'atom'
													'literal'
														'"They are equal"'
											')'

Programs with 1 errors
REMOVE:
'start'
	'construct'
		'statement'
			'assignment_stmt'
				'n1'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'10'
		'construct'
			'statement'
				'assignment_stmt'
					'n2'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'20'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'n1'
							'arithmetic_op'
								'<'
							'arithmetic_expr'
								'atom'
									'n2'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'func_call_stmt'
									'print'
									'('
									'parameters'
										'atom'
											'n2'
									')'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'n2'
								'arithmetic_op'
									'<'
								'arithmetic_expr'
									'atom'
										'n1'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'func_call_stmt'
										'print'
										'('
										'parameters'
											'atom'
												'n2'
										')'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'func_call_stmt'
											'print'
											'('
											'parameters'
												'atom'
													'literal'
														'"They are equal"'
											')'

'start'
	'construct'
		'statement'
			'assignment_stmt'
				'n1'
				'='
				'expression'
					'arithmetic_expr'
						'atom'
							'literal'
								'10'
		'construct'
			'statement'
				'assignment_stmt'
					'n2'
					'='
					'expression'
						'arithmetic_expr'
							'atom'
								'literal'
									'20'
			'construct'
				'statement'
					'if_stmt'
						'if'
						'('
						'arithmetic_expr'
							'arithmetic_expr'
								'atom'
									'n1'
							'arithmetic_op'
								'<'
							'arithmetic_expr'
								'atom'
									'n2'
						')'
						':'
						'statement_suite'
							'\t'
							'statement'
								'func_call_stmt'
									'print'
									'('
									'parameters'
										'atom'
											'n2'
									')'
						'elif_stmt'
							'elif'
							'('
							'arithmetic_expr'
								'arithmetic_expr'
									'atom'
										'n2'
								'arithmetic_op'
									'<'
								'arithmetic_expr'
									'atom'
										'n1'
							')'
							':'
							'statement_suite'
								'\t'
								'statement'
									'func_call_stmt'
										'print'
										'('
										'parameters'
											'atom'
												'n2'
										')'
							'else_stmt'
								'else'
								':'
								'statement_suite'
									'\t'
									'statement'
										'func_call_stmt'
											'print'
											'('
											'parameters'
												'atom'
													'literal'
														'"They are equal"'
											')'

Programs with 1 errors
REMOVE:
n1 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 errnode = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 @@@ 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------


REMOVE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 errnode < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 @@@ n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------


Programs with 2 errors
REMOVE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : errnode 	 errnode print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( n2 < n1 ) : @@@ @@@ ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------


REMOVE:
n1 = 10 n2 = 20 ( n1 < n2 ) : 	 print ( n2 elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 errnode if ( n1 < n2 ) : 	 print ( n2 errnode ) elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 @@@ ( n1 < n2 ) : 	 print ( n2 @@@ elif ( n2 < n1 ) : 	 print ( n2 ) else : 	 print ( "They are equal" ) 

------------------------------


Programs with 3 errors
REMOVE:
n1 = 10 n2 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( < n1 ) : 	 print ( ) else : 	 print ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 errnode = 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( errnode n2 < n1 ) : 	 print ( errnode n2 ) else : 	 print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 @@@ 20 if ( n1 < n2 ) : 	 print ( n2 ) elif ( @@@ < n1 ) : 	 print ( @@@ ) else : 	 print ( "They are equal" ) 

------------------------------


REMOVE:
n1 = 10 n2 = 20 if ( n1 < n2 : 	 print ( n2 ) elif ( n2 < n1 ) : print ( n2 ) else : 	 ( "They are equal" ) 

------------------------------

ADD:
n1 = 10 n2 = 20 if ( n1 < n2 errnode ) : 	 print ( n2 ) elif ( n2 < n1 ) : errnode 	 print ( n2 ) else : 	 errnode print ( "They are equal" ) 

------------------------------

REPLACE:
n1 = 10 n2 = 20 if ( n1 < n2 @@@ : 	 print ( n2 ) elif ( n2 < n1 ) : @@@ print ( n2 ) else : 	 @@@ ( "They are equal" ) 

------------------------------


=======
>>>>>>> 9ccdc3f3c3e14c454244aee114e8b892152bcc91
