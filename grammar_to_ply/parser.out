Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> construct
Rule 2     construct -> funcdef
Rule 3     construct -> if_stmt
Rule 4     construct -> loop_stmt
Rule 5     construct -> assignment_stmt
Rule 6     loop_stmt -> for_loop
Rule 7     for_loop -> FOR IDENTIFIER IN IDENTIFIER COLON statement_suite
Rule 8     if_stmt -> IF LPAREN arithmetic_expr RPAREN COLON statement_suite
Rule 9     if_stmt -> IF LPAREN arithmetic_expr RPAREN COLON statement_suite elif_stmt
Rule 10    elif_stmt -> ELIF LPAREN arithmetic_expr RPAREN COLON statement_suite else_stmt
Rule 11    elif_stmt -> else_stmt
Rule 12    else_stmt -> ELSE COLON statement_suite
Rule 13    funcdef -> DEF IDENTIFIER LPAREN parameters RPAREN COLON statement_suite
Rule 14    parameters -> IDENTIFIER
Rule 15    parameters -> IDENTIFIER COMMA parameters
Rule 16    parameters -> literal
Rule 17    parameters -> literal COMMA parameters
Rule 18    parameters -> empty
Rule 19    statement_suite -> TAB statement
Rule 20    statement_suite -> TAB statement statement_suite
Rule 21    statement -> return_stmt
Rule 22    statement -> assignment_stmt
Rule 23    statement -> func_call_stmt
Rule 24    func_call_stmt -> IDENTIFIER LPAREN parameters RPAREN
Rule 25    assignment_stmt -> IDENTIFIER EQUALS expression
Rule 26    expression -> arithmetic_expr
Rule 27    expression -> func_call_stmt
Rule 28    arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr
Rule 29    arithmetic_expr -> atom
Rule 30    return_stmt -> RETURN expression
Rule 31    atom -> IDENTIFIER
Rule 32    atom -> literal
Rule 33    literal -> NUMBER
Rule 34    literal -> NONE
Rule 35    literal -> TRUE
Rule 36    literal -> FALSE
Rule 37    literal -> STRING
Rule 38    literal -> list
Rule 39    list -> LSQUARE parameters RSQUARE
Rule 40    arithmetic_op -> PLUS
Rule 41    arithmetic_op -> MINUS
Rule 42    arithmetic_op -> MODULUS
Rule 43    arithmetic_op -> DIVIDE
Rule 44    arithmetic_op -> MULTIPLY
Rule 45    arithmetic_op -> GR
Rule 46    arithmetic_op -> LE
Rule 47    arithmetic_op -> EQ
Rule 48    arithmetic_op -> GREQ
Rule 49    arithmetic_op -> LEEQ
Rule 50    empty -> <empty>

Terminals, with rules where they appear

COLON                : 7 8 9 10 12 13
COMMA                : 15 17
DEF                  : 13
DIVIDE               : 43
ELIF                 : 10
ELSE                 : 12
EQ                   : 47
EQUALS               : 25
FALSE                : 36
FOR                  : 7
GR                   : 45
GREQ                 : 48
IDENTIFIER           : 7 7 13 14 15 24 25 31
IF                   : 8 9
IN                   : 7
LE                   : 46
LEEQ                 : 49
LPAREN               : 8 9 10 13 24
LSQUARE              : 39
MINUS                : 41
MODULUS              : 42
MULTIPLY             : 44
NONE                 : 34
NUMBER               : 33
PLUS                 : 40
RETURN               : 30
RPAREN               : 8 9 10 13 24
RSQUARE              : 39
STRING               : 37
TAB                  : 19 20
TRUE                 : 35
error                : 

Nonterminals, with rules where they appear

arithmetic_expr      : 8 9 10 26 28 28
arithmetic_op        : 28
assignment_stmt      : 5 22
atom                 : 29
construct            : 1
elif_stmt            : 9
else_stmt            : 10 11
empty                : 18
expression           : 25 30
for_loop             : 6
func_call_stmt       : 23 27
funcdef              : 2
if_stmt              : 3
list                 : 38
literal              : 16 17 32
loop_stmt            : 4
parameters           : 13 15 17 24 39
return_stmt          : 21
start                : 0
statement            : 19 20
statement_suite      : 7 8 9 10 12 13 20

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . construct
    (2) construct -> . funcdef
    (3) construct -> . if_stmt
    (4) construct -> . loop_stmt
    (5) construct -> . assignment_stmt
    (13) funcdef -> . DEF IDENTIFIER LPAREN parameters RPAREN COLON statement_suite
    (8) if_stmt -> . IF LPAREN arithmetic_expr RPAREN COLON statement_suite
    (9) if_stmt -> . IF LPAREN arithmetic_expr RPAREN COLON statement_suite elif_stmt
    (6) loop_stmt -> . for_loop
    (25) assignment_stmt -> . IDENTIFIER EQUALS expression
    (7) for_loop -> . FOR IDENTIFIER IN IDENTIFIER COLON statement_suite

    DEF             shift and go to state 7
    IF              shift and go to state 9
    IDENTIFIER      shift and go to state 8
    FOR             shift and go to state 11

    start                          shift and go to state 1
    construct                      shift and go to state 2
    funcdef                        shift and go to state 3
    if_stmt                        shift and go to state 4
    loop_stmt                      shift and go to state 5
    assignment_stmt                shift and go to state 6
    for_loop                       shift and go to state 10

state 1

    (0) S' -> start .



state 2

    (1) start -> construct .

    $end            reduce using rule 1 (start -> construct .)


state 3

    (2) construct -> funcdef .

    $end            reduce using rule 2 (construct -> funcdef .)


state 4

    (3) construct -> if_stmt .

    $end            reduce using rule 3 (construct -> if_stmt .)


state 5

    (4) construct -> loop_stmt .

    $end            reduce using rule 4 (construct -> loop_stmt .)


state 6

    (5) construct -> assignment_stmt .

    $end            reduce using rule 5 (construct -> assignment_stmt .)


state 7

    (13) funcdef -> DEF . IDENTIFIER LPAREN parameters RPAREN COLON statement_suite

    IDENTIFIER      shift and go to state 12


state 8

    (25) assignment_stmt -> IDENTIFIER . EQUALS expression

    EQUALS          shift and go to state 13


state 9

    (8) if_stmt -> IF . LPAREN arithmetic_expr RPAREN COLON statement_suite
    (9) if_stmt -> IF . LPAREN arithmetic_expr RPAREN COLON statement_suite elif_stmt

    LPAREN          shift and go to state 14


state 10

    (6) loop_stmt -> for_loop .

    $end            reduce using rule 6 (loop_stmt -> for_loop .)


state 11

    (7) for_loop -> FOR . IDENTIFIER IN IDENTIFIER COLON statement_suite

    IDENTIFIER      shift and go to state 15


state 12

    (13) funcdef -> DEF IDENTIFIER . LPAREN parameters RPAREN COLON statement_suite

    LPAREN          shift and go to state 16


state 13

    (25) assignment_stmt -> IDENTIFIER EQUALS . expression
    (26) expression -> . arithmetic_expr
    (27) expression -> . func_call_stmt
    (28) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (29) arithmetic_expr -> . atom
    (24) func_call_stmt -> . IDENTIFIER LPAREN parameters RPAREN
    (31) atom -> . IDENTIFIER
    (32) atom -> . literal
    (33) literal -> . NUMBER
    (34) literal -> . NONE
    (35) literal -> . TRUE
    (36) literal -> . FALSE
    (37) literal -> . STRING
    (38) literal -> . list
    (39) list -> . LSQUARE parameters RSQUARE

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 23
    NONE            shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    LSQUARE         shift and go to state 29

    expression                     shift and go to state 18
    arithmetic_expr                shift and go to state 19
    func_call_stmt                 shift and go to state 20
    atom                           shift and go to state 21
    literal                        shift and go to state 22
    list                           shift and go to state 28

state 14

    (8) if_stmt -> IF LPAREN . arithmetic_expr RPAREN COLON statement_suite
    (9) if_stmt -> IF LPAREN . arithmetic_expr RPAREN COLON statement_suite elif_stmt
    (28) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (29) arithmetic_expr -> . atom
    (31) atom -> . IDENTIFIER
    (32) atom -> . literal
    (33) literal -> . NUMBER
    (34) literal -> . NONE
    (35) literal -> . TRUE
    (36) literal -> . FALSE
    (37) literal -> . STRING
    (38) literal -> . list
    (39) list -> . LSQUARE parameters RSQUARE

    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 23
    NONE            shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    LSQUARE         shift and go to state 29

    arithmetic_expr                shift and go to state 30
    atom                           shift and go to state 21
    literal                        shift and go to state 22
    list                           shift and go to state 28

state 15

    (7) for_loop -> FOR IDENTIFIER . IN IDENTIFIER COLON statement_suite

    IN              shift and go to state 32


state 16

    (13) funcdef -> DEF IDENTIFIER LPAREN . parameters RPAREN COLON statement_suite
    (14) parameters -> . IDENTIFIER
    (15) parameters -> . IDENTIFIER COMMA parameters
    (16) parameters -> . literal
    (17) parameters -> . literal COMMA parameters
    (18) parameters -> . empty
    (33) literal -> . NUMBER
    (34) literal -> . NONE
    (35) literal -> . TRUE
    (36) literal -> . FALSE
    (37) literal -> . STRING
    (38) literal -> . list
    (50) empty -> .
    (39) list -> . LSQUARE parameters RSQUARE

    IDENTIFIER      shift and go to state 33
    NUMBER          shift and go to state 23
    NONE            shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    RPAREN          reduce using rule 50 (empty -> .)
    LSQUARE         shift and go to state 29

    parameters                     shift and go to state 34
    literal                        shift and go to state 35
    empty                          shift and go to state 36
    list                           shift and go to state 28

state 17

    (24) func_call_stmt -> IDENTIFIER . LPAREN parameters RPAREN
    (31) atom -> IDENTIFIER .

    LPAREN          shift and go to state 37
    PLUS            reduce using rule 31 (atom -> IDENTIFIER .)
    MINUS           reduce using rule 31 (atom -> IDENTIFIER .)
    MODULUS         reduce using rule 31 (atom -> IDENTIFIER .)
    DIVIDE          reduce using rule 31 (atom -> IDENTIFIER .)
    MULTIPLY        reduce using rule 31 (atom -> IDENTIFIER .)
    GR              reduce using rule 31 (atom -> IDENTIFIER .)
    LE              reduce using rule 31 (atom -> IDENTIFIER .)
    EQ              reduce using rule 31 (atom -> IDENTIFIER .)
    GREQ            reduce using rule 31 (atom -> IDENTIFIER .)
    LEEQ            reduce using rule 31 (atom -> IDENTIFIER .)
    $end            reduce using rule 31 (atom -> IDENTIFIER .)
    TAB             reduce using rule 31 (atom -> IDENTIFIER .)
    ELIF            reduce using rule 31 (atom -> IDENTIFIER .)
    ELSE            reduce using rule 31 (atom -> IDENTIFIER .)


state 18

    (25) assignment_stmt -> IDENTIFIER EQUALS expression .

    $end            reduce using rule 25 (assignment_stmt -> IDENTIFIER EQUALS expression .)
    TAB             reduce using rule 25 (assignment_stmt -> IDENTIFIER EQUALS expression .)
    ELIF            reduce using rule 25 (assignment_stmt -> IDENTIFIER EQUALS expression .)
    ELSE            reduce using rule 25 (assignment_stmt -> IDENTIFIER EQUALS expression .)


state 19

    (26) expression -> arithmetic_expr .
    (28) arithmetic_expr -> arithmetic_expr . arithmetic_op arithmetic_expr
    (40) arithmetic_op -> . PLUS
    (41) arithmetic_op -> . MINUS
    (42) arithmetic_op -> . MODULUS
    (43) arithmetic_op -> . DIVIDE
    (44) arithmetic_op -> . MULTIPLY
    (45) arithmetic_op -> . GR
    (46) arithmetic_op -> . LE
    (47) arithmetic_op -> . EQ
    (48) arithmetic_op -> . GREQ
    (49) arithmetic_op -> . LEEQ

    $end            reduce using rule 26 (expression -> arithmetic_expr .)
    TAB             reduce using rule 26 (expression -> arithmetic_expr .)
    ELIF            reduce using rule 26 (expression -> arithmetic_expr .)
    ELSE            reduce using rule 26 (expression -> arithmetic_expr .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MODULUS         shift and go to state 41
    DIVIDE          shift and go to state 42
    MULTIPLY        shift and go to state 43
    GR              shift and go to state 44
    LE              shift and go to state 45
    EQ              shift and go to state 46
    GREQ            shift and go to state 47
    LEEQ            shift and go to state 48

    arithmetic_op                  shift and go to state 38

state 20

    (27) expression -> func_call_stmt .

    $end            reduce using rule 27 (expression -> func_call_stmt .)
    TAB             reduce using rule 27 (expression -> func_call_stmt .)
    ELIF            reduce using rule 27 (expression -> func_call_stmt .)
    ELSE            reduce using rule 27 (expression -> func_call_stmt .)


state 21

    (29) arithmetic_expr -> atom .

    PLUS            reduce using rule 29 (arithmetic_expr -> atom .)
    MINUS           reduce using rule 29 (arithmetic_expr -> atom .)
    MODULUS         reduce using rule 29 (arithmetic_expr -> atom .)
    DIVIDE          reduce using rule 29 (arithmetic_expr -> atom .)
    MULTIPLY        reduce using rule 29 (arithmetic_expr -> atom .)
    GR              reduce using rule 29 (arithmetic_expr -> atom .)
    LE              reduce using rule 29 (arithmetic_expr -> atom .)
    EQ              reduce using rule 29 (arithmetic_expr -> atom .)
    GREQ            reduce using rule 29 (arithmetic_expr -> atom .)
    LEEQ            reduce using rule 29 (arithmetic_expr -> atom .)
    $end            reduce using rule 29 (arithmetic_expr -> atom .)
    TAB             reduce using rule 29 (arithmetic_expr -> atom .)
    ELIF            reduce using rule 29 (arithmetic_expr -> atom .)
    ELSE            reduce using rule 29 (arithmetic_expr -> atom .)
    RPAREN          reduce using rule 29 (arithmetic_expr -> atom .)


state 22

    (32) atom -> literal .

    PLUS            reduce using rule 32 (atom -> literal .)
    MINUS           reduce using rule 32 (atom -> literal .)
    MODULUS         reduce using rule 32 (atom -> literal .)
    DIVIDE          reduce using rule 32 (atom -> literal .)
    MULTIPLY        reduce using rule 32 (atom -> literal .)
    GR              reduce using rule 32 (atom -> literal .)
    LE              reduce using rule 32 (atom -> literal .)
    EQ              reduce using rule 32 (atom -> literal .)
    GREQ            reduce using rule 32 (atom -> literal .)
    LEEQ            reduce using rule 32 (atom -> literal .)
    $end            reduce using rule 32 (atom -> literal .)
    TAB             reduce using rule 32 (atom -> literal .)
    ELIF            reduce using rule 32 (atom -> literal .)
    ELSE            reduce using rule 32 (atom -> literal .)
    RPAREN          reduce using rule 32 (atom -> literal .)


state 23

    (33) literal -> NUMBER .

    PLUS            reduce using rule 33 (literal -> NUMBER .)
    MINUS           reduce using rule 33 (literal -> NUMBER .)
    MODULUS         reduce using rule 33 (literal -> NUMBER .)
    DIVIDE          reduce using rule 33 (literal -> NUMBER .)
    MULTIPLY        reduce using rule 33 (literal -> NUMBER .)
    GR              reduce using rule 33 (literal -> NUMBER .)
    LE              reduce using rule 33 (literal -> NUMBER .)
    EQ              reduce using rule 33 (literal -> NUMBER .)
    GREQ            reduce using rule 33 (literal -> NUMBER .)
    LEEQ            reduce using rule 33 (literal -> NUMBER .)
    $end            reduce using rule 33 (literal -> NUMBER .)
    TAB             reduce using rule 33 (literal -> NUMBER .)
    ELIF            reduce using rule 33 (literal -> NUMBER .)
    ELSE            reduce using rule 33 (literal -> NUMBER .)
    RPAREN          reduce using rule 33 (literal -> NUMBER .)
    COMMA           reduce using rule 33 (literal -> NUMBER .)
    RSQUARE         reduce using rule 33 (literal -> NUMBER .)


state 24

    (34) literal -> NONE .

    PLUS            reduce using rule 34 (literal -> NONE .)
    MINUS           reduce using rule 34 (literal -> NONE .)
    MODULUS         reduce using rule 34 (literal -> NONE .)
    DIVIDE          reduce using rule 34 (literal -> NONE .)
    MULTIPLY        reduce using rule 34 (literal -> NONE .)
    GR              reduce using rule 34 (literal -> NONE .)
    LE              reduce using rule 34 (literal -> NONE .)
    EQ              reduce using rule 34 (literal -> NONE .)
    GREQ            reduce using rule 34 (literal -> NONE .)
    LEEQ            reduce using rule 34 (literal -> NONE .)
    $end            reduce using rule 34 (literal -> NONE .)
    TAB             reduce using rule 34 (literal -> NONE .)
    ELIF            reduce using rule 34 (literal -> NONE .)
    ELSE            reduce using rule 34 (literal -> NONE .)
    RPAREN          reduce using rule 34 (literal -> NONE .)
    COMMA           reduce using rule 34 (literal -> NONE .)
    RSQUARE         reduce using rule 34 (literal -> NONE .)


state 25

    (35) literal -> TRUE .

    PLUS            reduce using rule 35 (literal -> TRUE .)
    MINUS           reduce using rule 35 (literal -> TRUE .)
    MODULUS         reduce using rule 35 (literal -> TRUE .)
    DIVIDE          reduce using rule 35 (literal -> TRUE .)
    MULTIPLY        reduce using rule 35 (literal -> TRUE .)
    GR              reduce using rule 35 (literal -> TRUE .)
    LE              reduce using rule 35 (literal -> TRUE .)
    EQ              reduce using rule 35 (literal -> TRUE .)
    GREQ            reduce using rule 35 (literal -> TRUE .)
    LEEQ            reduce using rule 35 (literal -> TRUE .)
    $end            reduce using rule 35 (literal -> TRUE .)
    TAB             reduce using rule 35 (literal -> TRUE .)
    ELIF            reduce using rule 35 (literal -> TRUE .)
    ELSE            reduce using rule 35 (literal -> TRUE .)
    RPAREN          reduce using rule 35 (literal -> TRUE .)
    COMMA           reduce using rule 35 (literal -> TRUE .)
    RSQUARE         reduce using rule 35 (literal -> TRUE .)


state 26

    (36) literal -> FALSE .

    PLUS            reduce using rule 36 (literal -> FALSE .)
    MINUS           reduce using rule 36 (literal -> FALSE .)
    MODULUS         reduce using rule 36 (literal -> FALSE .)
    DIVIDE          reduce using rule 36 (literal -> FALSE .)
    MULTIPLY        reduce using rule 36 (literal -> FALSE .)
    GR              reduce using rule 36 (literal -> FALSE .)
    LE              reduce using rule 36 (literal -> FALSE .)
    EQ              reduce using rule 36 (literal -> FALSE .)
    GREQ            reduce using rule 36 (literal -> FALSE .)
    LEEQ            reduce using rule 36 (literal -> FALSE .)
    $end            reduce using rule 36 (literal -> FALSE .)
    TAB             reduce using rule 36 (literal -> FALSE .)
    ELIF            reduce using rule 36 (literal -> FALSE .)
    ELSE            reduce using rule 36 (literal -> FALSE .)
    RPAREN          reduce using rule 36 (literal -> FALSE .)
    COMMA           reduce using rule 36 (literal -> FALSE .)
    RSQUARE         reduce using rule 36 (literal -> FALSE .)


state 27

    (37) literal -> STRING .

    PLUS            reduce using rule 37 (literal -> STRING .)
    MINUS           reduce using rule 37 (literal -> STRING .)
    MODULUS         reduce using rule 37 (literal -> STRING .)
    DIVIDE          reduce using rule 37 (literal -> STRING .)
    MULTIPLY        reduce using rule 37 (literal -> STRING .)
    GR              reduce using rule 37 (literal -> STRING .)
    LE              reduce using rule 37 (literal -> STRING .)
    EQ              reduce using rule 37 (literal -> STRING .)
    GREQ            reduce using rule 37 (literal -> STRING .)
    LEEQ            reduce using rule 37 (literal -> STRING .)
    $end            reduce using rule 37 (literal -> STRING .)
    TAB             reduce using rule 37 (literal -> STRING .)
    ELIF            reduce using rule 37 (literal -> STRING .)
    ELSE            reduce using rule 37 (literal -> STRING .)
    RPAREN          reduce using rule 37 (literal -> STRING .)
    COMMA           reduce using rule 37 (literal -> STRING .)
    RSQUARE         reduce using rule 37 (literal -> STRING .)


state 28

    (38) literal -> list .

    PLUS            reduce using rule 38 (literal -> list .)
    MINUS           reduce using rule 38 (literal -> list .)
    MODULUS         reduce using rule 38 (literal -> list .)
    DIVIDE          reduce using rule 38 (literal -> list .)
    MULTIPLY        reduce using rule 38 (literal -> list .)
    GR              reduce using rule 38 (literal -> list .)
    LE              reduce using rule 38 (literal -> list .)
    EQ              reduce using rule 38 (literal -> list .)
    GREQ            reduce using rule 38 (literal -> list .)
    LEEQ            reduce using rule 38 (literal -> list .)
    $end            reduce using rule 38 (literal -> list .)
    TAB             reduce using rule 38 (literal -> list .)
    ELIF            reduce using rule 38 (literal -> list .)
    ELSE            reduce using rule 38 (literal -> list .)
    RPAREN          reduce using rule 38 (literal -> list .)
    COMMA           reduce using rule 38 (literal -> list .)
    RSQUARE         reduce using rule 38 (literal -> list .)


state 29

    (39) list -> LSQUARE . parameters RSQUARE
    (14) parameters -> . IDENTIFIER
    (15) parameters -> . IDENTIFIER COMMA parameters
    (16) parameters -> . literal
    (17) parameters -> . literal COMMA parameters
    (18) parameters -> . empty
    (33) literal -> . NUMBER
    (34) literal -> . NONE
    (35) literal -> . TRUE
    (36) literal -> . FALSE
    (37) literal -> . STRING
    (38) literal -> . list
    (50) empty -> .
    (39) list -> . LSQUARE parameters RSQUARE

    IDENTIFIER      shift and go to state 33
    NUMBER          shift and go to state 23
    NONE            shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    RSQUARE         reduce using rule 50 (empty -> .)
    LSQUARE         shift and go to state 29

    parameters                     shift and go to state 49
    literal                        shift and go to state 35
    empty                          shift and go to state 36
    list                           shift and go to state 28

state 30

    (8) if_stmt -> IF LPAREN arithmetic_expr . RPAREN COLON statement_suite
    (9) if_stmt -> IF LPAREN arithmetic_expr . RPAREN COLON statement_suite elif_stmt
    (28) arithmetic_expr -> arithmetic_expr . arithmetic_op arithmetic_expr
    (40) arithmetic_op -> . PLUS
    (41) arithmetic_op -> . MINUS
    (42) arithmetic_op -> . MODULUS
    (43) arithmetic_op -> . DIVIDE
    (44) arithmetic_op -> . MULTIPLY
    (45) arithmetic_op -> . GR
    (46) arithmetic_op -> . LE
    (47) arithmetic_op -> . EQ
    (48) arithmetic_op -> . GREQ
    (49) arithmetic_op -> . LEEQ

    RPAREN          shift and go to state 50
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MODULUS         shift and go to state 41
    DIVIDE          shift and go to state 42
    MULTIPLY        shift and go to state 43
    GR              shift and go to state 44
    LE              shift and go to state 45
    EQ              shift and go to state 46
    GREQ            shift and go to state 47
    LEEQ            shift and go to state 48

    arithmetic_op                  shift and go to state 38

state 31

    (31) atom -> IDENTIFIER .

    RPAREN          reduce using rule 31 (atom -> IDENTIFIER .)
    PLUS            reduce using rule 31 (atom -> IDENTIFIER .)
    MINUS           reduce using rule 31 (atom -> IDENTIFIER .)
    MODULUS         reduce using rule 31 (atom -> IDENTIFIER .)
    DIVIDE          reduce using rule 31 (atom -> IDENTIFIER .)
    MULTIPLY        reduce using rule 31 (atom -> IDENTIFIER .)
    GR              reduce using rule 31 (atom -> IDENTIFIER .)
    LE              reduce using rule 31 (atom -> IDENTIFIER .)
    EQ              reduce using rule 31 (atom -> IDENTIFIER .)
    GREQ            reduce using rule 31 (atom -> IDENTIFIER .)
    LEEQ            reduce using rule 31 (atom -> IDENTIFIER .)
    $end            reduce using rule 31 (atom -> IDENTIFIER .)
    TAB             reduce using rule 31 (atom -> IDENTIFIER .)
    ELIF            reduce using rule 31 (atom -> IDENTIFIER .)
    ELSE            reduce using rule 31 (atom -> IDENTIFIER .)


state 32

    (7) for_loop -> FOR IDENTIFIER IN . IDENTIFIER COLON statement_suite

    IDENTIFIER      shift and go to state 51


state 33

    (14) parameters -> IDENTIFIER .
    (15) parameters -> IDENTIFIER . COMMA parameters

    RPAREN          reduce using rule 14 (parameters -> IDENTIFIER .)
    RSQUARE         reduce using rule 14 (parameters -> IDENTIFIER .)
    COMMA           shift and go to state 52


state 34

    (13) funcdef -> DEF IDENTIFIER LPAREN parameters . RPAREN COLON statement_suite

    RPAREN          shift and go to state 53


state 35

    (16) parameters -> literal .
    (17) parameters -> literal . COMMA parameters

    RPAREN          reduce using rule 16 (parameters -> literal .)
    RSQUARE         reduce using rule 16 (parameters -> literal .)
    COMMA           shift and go to state 54


state 36

    (18) parameters -> empty .

    RPAREN          reduce using rule 18 (parameters -> empty .)
    RSQUARE         reduce using rule 18 (parameters -> empty .)


state 37

    (24) func_call_stmt -> IDENTIFIER LPAREN . parameters RPAREN
    (14) parameters -> . IDENTIFIER
    (15) parameters -> . IDENTIFIER COMMA parameters
    (16) parameters -> . literal
    (17) parameters -> . literal COMMA parameters
    (18) parameters -> . empty
    (33) literal -> . NUMBER
    (34) literal -> . NONE
    (35) literal -> . TRUE
    (36) literal -> . FALSE
    (37) literal -> . STRING
    (38) literal -> . list
    (50) empty -> .
    (39) list -> . LSQUARE parameters RSQUARE

    IDENTIFIER      shift and go to state 33
    NUMBER          shift and go to state 23
    NONE            shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    RPAREN          reduce using rule 50 (empty -> .)
    LSQUARE         shift and go to state 29

    parameters                     shift and go to state 55
    literal                        shift and go to state 35
    empty                          shift and go to state 36
    list                           shift and go to state 28

state 38

    (28) arithmetic_expr -> arithmetic_expr arithmetic_op . arithmetic_expr
    (28) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (29) arithmetic_expr -> . atom
    (31) atom -> . IDENTIFIER
    (32) atom -> . literal
    (33) literal -> . NUMBER
    (34) literal -> . NONE
    (35) literal -> . TRUE
    (36) literal -> . FALSE
    (37) literal -> . STRING
    (38) literal -> . list
    (39) list -> . LSQUARE parameters RSQUARE

    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 23
    NONE            shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    LSQUARE         shift and go to state 29

    arithmetic_expr                shift and go to state 56
    atom                           shift and go to state 21
    literal                        shift and go to state 22
    list                           shift and go to state 28

state 39

    (40) arithmetic_op -> PLUS .

    IDENTIFIER      reduce using rule 40 (arithmetic_op -> PLUS .)
    NUMBER          reduce using rule 40 (arithmetic_op -> PLUS .)
    NONE            reduce using rule 40 (arithmetic_op -> PLUS .)
    TRUE            reduce using rule 40 (arithmetic_op -> PLUS .)
    FALSE           reduce using rule 40 (arithmetic_op -> PLUS .)
    STRING          reduce using rule 40 (arithmetic_op -> PLUS .)
    LSQUARE         reduce using rule 40 (arithmetic_op -> PLUS .)


state 40

    (41) arithmetic_op -> MINUS .

    IDENTIFIER      reduce using rule 41 (arithmetic_op -> MINUS .)
    NUMBER          reduce using rule 41 (arithmetic_op -> MINUS .)
    NONE            reduce using rule 41 (arithmetic_op -> MINUS .)
    TRUE            reduce using rule 41 (arithmetic_op -> MINUS .)
    FALSE           reduce using rule 41 (arithmetic_op -> MINUS .)
    STRING          reduce using rule 41 (arithmetic_op -> MINUS .)
    LSQUARE         reduce using rule 41 (arithmetic_op -> MINUS .)


state 41

    (42) arithmetic_op -> MODULUS .

    IDENTIFIER      reduce using rule 42 (arithmetic_op -> MODULUS .)
    NUMBER          reduce using rule 42 (arithmetic_op -> MODULUS .)
    NONE            reduce using rule 42 (arithmetic_op -> MODULUS .)
    TRUE            reduce using rule 42 (arithmetic_op -> MODULUS .)
    FALSE           reduce using rule 42 (arithmetic_op -> MODULUS .)
    STRING          reduce using rule 42 (arithmetic_op -> MODULUS .)
    LSQUARE         reduce using rule 42 (arithmetic_op -> MODULUS .)


state 42

    (43) arithmetic_op -> DIVIDE .

    IDENTIFIER      reduce using rule 43 (arithmetic_op -> DIVIDE .)
    NUMBER          reduce using rule 43 (arithmetic_op -> DIVIDE .)
    NONE            reduce using rule 43 (arithmetic_op -> DIVIDE .)
    TRUE            reduce using rule 43 (arithmetic_op -> DIVIDE .)
    FALSE           reduce using rule 43 (arithmetic_op -> DIVIDE .)
    STRING          reduce using rule 43 (arithmetic_op -> DIVIDE .)
    LSQUARE         reduce using rule 43 (arithmetic_op -> DIVIDE .)


state 43

    (44) arithmetic_op -> MULTIPLY .

    IDENTIFIER      reduce using rule 44 (arithmetic_op -> MULTIPLY .)
    NUMBER          reduce using rule 44 (arithmetic_op -> MULTIPLY .)
    NONE            reduce using rule 44 (arithmetic_op -> MULTIPLY .)
    TRUE            reduce using rule 44 (arithmetic_op -> MULTIPLY .)
    FALSE           reduce using rule 44 (arithmetic_op -> MULTIPLY .)
    STRING          reduce using rule 44 (arithmetic_op -> MULTIPLY .)
    LSQUARE         reduce using rule 44 (arithmetic_op -> MULTIPLY .)


state 44

    (45) arithmetic_op -> GR .

    IDENTIFIER      reduce using rule 45 (arithmetic_op -> GR .)
    NUMBER          reduce using rule 45 (arithmetic_op -> GR .)
    NONE            reduce using rule 45 (arithmetic_op -> GR .)
    TRUE            reduce using rule 45 (arithmetic_op -> GR .)
    FALSE           reduce using rule 45 (arithmetic_op -> GR .)
    STRING          reduce using rule 45 (arithmetic_op -> GR .)
    LSQUARE         reduce using rule 45 (arithmetic_op -> GR .)


state 45

    (46) arithmetic_op -> LE .

    IDENTIFIER      reduce using rule 46 (arithmetic_op -> LE .)
    NUMBER          reduce using rule 46 (arithmetic_op -> LE .)
    NONE            reduce using rule 46 (arithmetic_op -> LE .)
    TRUE            reduce using rule 46 (arithmetic_op -> LE .)
    FALSE           reduce using rule 46 (arithmetic_op -> LE .)
    STRING          reduce using rule 46 (arithmetic_op -> LE .)
    LSQUARE         reduce using rule 46 (arithmetic_op -> LE .)


state 46

    (47) arithmetic_op -> EQ .

    IDENTIFIER      reduce using rule 47 (arithmetic_op -> EQ .)
    NUMBER          reduce using rule 47 (arithmetic_op -> EQ .)
    NONE            reduce using rule 47 (arithmetic_op -> EQ .)
    TRUE            reduce using rule 47 (arithmetic_op -> EQ .)
    FALSE           reduce using rule 47 (arithmetic_op -> EQ .)
    STRING          reduce using rule 47 (arithmetic_op -> EQ .)
    LSQUARE         reduce using rule 47 (arithmetic_op -> EQ .)


state 47

    (48) arithmetic_op -> GREQ .

    IDENTIFIER      reduce using rule 48 (arithmetic_op -> GREQ .)
    NUMBER          reduce using rule 48 (arithmetic_op -> GREQ .)
    NONE            reduce using rule 48 (arithmetic_op -> GREQ .)
    TRUE            reduce using rule 48 (arithmetic_op -> GREQ .)
    FALSE           reduce using rule 48 (arithmetic_op -> GREQ .)
    STRING          reduce using rule 48 (arithmetic_op -> GREQ .)
    LSQUARE         reduce using rule 48 (arithmetic_op -> GREQ .)


state 48

    (49) arithmetic_op -> LEEQ .

    IDENTIFIER      reduce using rule 49 (arithmetic_op -> LEEQ .)
    NUMBER          reduce using rule 49 (arithmetic_op -> LEEQ .)
    NONE            reduce using rule 49 (arithmetic_op -> LEEQ .)
    TRUE            reduce using rule 49 (arithmetic_op -> LEEQ .)
    FALSE           reduce using rule 49 (arithmetic_op -> LEEQ .)
    STRING          reduce using rule 49 (arithmetic_op -> LEEQ .)
    LSQUARE         reduce using rule 49 (arithmetic_op -> LEEQ .)


state 49

    (39) list -> LSQUARE parameters . RSQUARE

    RSQUARE         shift and go to state 57


state 50

    (8) if_stmt -> IF LPAREN arithmetic_expr RPAREN . COLON statement_suite
    (9) if_stmt -> IF LPAREN arithmetic_expr RPAREN . COLON statement_suite elif_stmt

    COLON           shift and go to state 58


state 51

    (7) for_loop -> FOR IDENTIFIER IN IDENTIFIER . COLON statement_suite

    COLON           shift and go to state 59


state 52

    (15) parameters -> IDENTIFIER COMMA . parameters
    (14) parameters -> . IDENTIFIER
    (15) parameters -> . IDENTIFIER COMMA parameters
    (16) parameters -> . literal
    (17) parameters -> . literal COMMA parameters
    (18) parameters -> . empty
    (33) literal -> . NUMBER
    (34) literal -> . NONE
    (35) literal -> . TRUE
    (36) literal -> . FALSE
    (37) literal -> . STRING
    (38) literal -> . list
    (50) empty -> .
    (39) list -> . LSQUARE parameters RSQUARE

    IDENTIFIER      shift and go to state 33
    NUMBER          shift and go to state 23
    NONE            shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    RPAREN          reduce using rule 50 (empty -> .)
    RSQUARE         reduce using rule 50 (empty -> .)
    LSQUARE         shift and go to state 29

    parameters                     shift and go to state 60
    literal                        shift and go to state 35
    empty                          shift and go to state 36
    list                           shift and go to state 28

state 53

    (13) funcdef -> DEF IDENTIFIER LPAREN parameters RPAREN . COLON statement_suite

    COLON           shift and go to state 61


state 54

    (17) parameters -> literal COMMA . parameters
    (14) parameters -> . IDENTIFIER
    (15) parameters -> . IDENTIFIER COMMA parameters
    (16) parameters -> . literal
    (17) parameters -> . literal COMMA parameters
    (18) parameters -> . empty
    (33) literal -> . NUMBER
    (34) literal -> . NONE
    (35) literal -> . TRUE
    (36) literal -> . FALSE
    (37) literal -> . STRING
    (38) literal -> . list
    (50) empty -> .
    (39) list -> . LSQUARE parameters RSQUARE

    IDENTIFIER      shift and go to state 33
    NUMBER          shift and go to state 23
    NONE            shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    RPAREN          reduce using rule 50 (empty -> .)
    RSQUARE         reduce using rule 50 (empty -> .)
    LSQUARE         shift and go to state 29

    literal                        shift and go to state 35
    parameters                     shift and go to state 62
    empty                          shift and go to state 36
    list                           shift and go to state 28

state 55

    (24) func_call_stmt -> IDENTIFIER LPAREN parameters . RPAREN

    RPAREN          shift and go to state 63


state 56

    (28) arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .
    (28) arithmetic_expr -> arithmetic_expr . arithmetic_op arithmetic_expr
    (40) arithmetic_op -> . PLUS
    (41) arithmetic_op -> . MINUS
    (42) arithmetic_op -> . MODULUS
    (43) arithmetic_op -> . DIVIDE
    (44) arithmetic_op -> . MULTIPLY
    (45) arithmetic_op -> . GR
    (46) arithmetic_op -> . LE
    (47) arithmetic_op -> . EQ
    (48) arithmetic_op -> . GREQ
    (49) arithmetic_op -> . LEEQ

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for GR resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GREQ resolved as shift
  ! shift/reduce conflict for LEEQ resolved as shift
    $end            reduce using rule 28 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .)
    TAB             reduce using rule 28 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .)
    ELIF            reduce using rule 28 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .)
    ELSE            reduce using rule 28 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .)
    RPAREN          reduce using rule 28 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MODULUS         shift and go to state 41
    DIVIDE          shift and go to state 42
    MULTIPLY        shift and go to state 43
    GR              shift and go to state 44
    LE              shift and go to state 45
    EQ              shift and go to state 46
    GREQ            shift and go to state 47
    LEEQ            shift and go to state 48

  ! PLUS            [ reduce using rule 28 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .) ]
  ! MINUS           [ reduce using rule 28 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .) ]
  ! MODULUS         [ reduce using rule 28 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .) ]
  ! DIVIDE          [ reduce using rule 28 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .) ]
  ! MULTIPLY        [ reduce using rule 28 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .) ]
  ! GR              [ reduce using rule 28 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .) ]
  ! LE              [ reduce using rule 28 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .) ]
  ! EQ              [ reduce using rule 28 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .) ]
  ! GREQ            [ reduce using rule 28 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .) ]
  ! LEEQ            [ reduce using rule 28 (arithmetic_expr -> arithmetic_expr arithmetic_op arithmetic_expr .) ]

    arithmetic_op                  shift and go to state 38

state 57

    (39) list -> LSQUARE parameters RSQUARE .

    PLUS            reduce using rule 39 (list -> LSQUARE parameters RSQUARE .)
    MINUS           reduce using rule 39 (list -> LSQUARE parameters RSQUARE .)
    MODULUS         reduce using rule 39 (list -> LSQUARE parameters RSQUARE .)
    DIVIDE          reduce using rule 39 (list -> LSQUARE parameters RSQUARE .)
    MULTIPLY        reduce using rule 39 (list -> LSQUARE parameters RSQUARE .)
    GR              reduce using rule 39 (list -> LSQUARE parameters RSQUARE .)
    LE              reduce using rule 39 (list -> LSQUARE parameters RSQUARE .)
    EQ              reduce using rule 39 (list -> LSQUARE parameters RSQUARE .)
    GREQ            reduce using rule 39 (list -> LSQUARE parameters RSQUARE .)
    LEEQ            reduce using rule 39 (list -> LSQUARE parameters RSQUARE .)
    $end            reduce using rule 39 (list -> LSQUARE parameters RSQUARE .)
    TAB             reduce using rule 39 (list -> LSQUARE parameters RSQUARE .)
    ELIF            reduce using rule 39 (list -> LSQUARE parameters RSQUARE .)
    ELSE            reduce using rule 39 (list -> LSQUARE parameters RSQUARE .)
    RPAREN          reduce using rule 39 (list -> LSQUARE parameters RSQUARE .)
    COMMA           reduce using rule 39 (list -> LSQUARE parameters RSQUARE .)
    RSQUARE         reduce using rule 39 (list -> LSQUARE parameters RSQUARE .)


state 58

    (8) if_stmt -> IF LPAREN arithmetic_expr RPAREN COLON . statement_suite
    (9) if_stmt -> IF LPAREN arithmetic_expr RPAREN COLON . statement_suite elif_stmt
    (19) statement_suite -> . TAB statement
    (20) statement_suite -> . TAB statement statement_suite

    TAB             shift and go to state 65

    statement_suite                shift and go to state 64

state 59

    (7) for_loop -> FOR IDENTIFIER IN IDENTIFIER COLON . statement_suite
    (19) statement_suite -> . TAB statement
    (20) statement_suite -> . TAB statement statement_suite

    TAB             shift and go to state 65

    statement_suite                shift and go to state 66

state 60

    (15) parameters -> IDENTIFIER COMMA parameters .

    RPAREN          reduce using rule 15 (parameters -> IDENTIFIER COMMA parameters .)
    RSQUARE         reduce using rule 15 (parameters -> IDENTIFIER COMMA parameters .)


state 61

    (13) funcdef -> DEF IDENTIFIER LPAREN parameters RPAREN COLON . statement_suite
    (19) statement_suite -> . TAB statement
    (20) statement_suite -> . TAB statement statement_suite

    TAB             shift and go to state 65

    statement_suite                shift and go to state 67

state 62

    (17) parameters -> literal COMMA parameters .

    RPAREN          reduce using rule 17 (parameters -> literal COMMA parameters .)
    RSQUARE         reduce using rule 17 (parameters -> literal COMMA parameters .)


state 63

    (24) func_call_stmt -> IDENTIFIER LPAREN parameters RPAREN .

    $end            reduce using rule 24 (func_call_stmt -> IDENTIFIER LPAREN parameters RPAREN .)
    TAB             reduce using rule 24 (func_call_stmt -> IDENTIFIER LPAREN parameters RPAREN .)
    ELIF            reduce using rule 24 (func_call_stmt -> IDENTIFIER LPAREN parameters RPAREN .)
    ELSE            reduce using rule 24 (func_call_stmt -> IDENTIFIER LPAREN parameters RPAREN .)


state 64

    (8) if_stmt -> IF LPAREN arithmetic_expr RPAREN COLON statement_suite .
    (9) if_stmt -> IF LPAREN arithmetic_expr RPAREN COLON statement_suite . elif_stmt
    (10) elif_stmt -> . ELIF LPAREN arithmetic_expr RPAREN COLON statement_suite else_stmt
    (11) elif_stmt -> . else_stmt
    (12) else_stmt -> . ELSE COLON statement_suite

    $end            reduce using rule 8 (if_stmt -> IF LPAREN arithmetic_expr RPAREN COLON statement_suite .)
    ELIF            shift and go to state 69
    ELSE            shift and go to state 71

    elif_stmt                      shift and go to state 68
    else_stmt                      shift and go to state 70

state 65

    (19) statement_suite -> TAB . statement
    (20) statement_suite -> TAB . statement statement_suite
    (21) statement -> . return_stmt
    (22) statement -> . assignment_stmt
    (23) statement -> . func_call_stmt
    (30) return_stmt -> . RETURN expression
    (25) assignment_stmt -> . IDENTIFIER EQUALS expression
    (24) func_call_stmt -> . IDENTIFIER LPAREN parameters RPAREN

    RETURN          shift and go to state 76
    IDENTIFIER      shift and go to state 77

    statement                      shift and go to state 72
    return_stmt                    shift and go to state 73
    assignment_stmt                shift and go to state 74
    func_call_stmt                 shift and go to state 75

state 66

    (7) for_loop -> FOR IDENTIFIER IN IDENTIFIER COLON statement_suite .

    $end            reduce using rule 7 (for_loop -> FOR IDENTIFIER IN IDENTIFIER COLON statement_suite .)


state 67

    (13) funcdef -> DEF IDENTIFIER LPAREN parameters RPAREN COLON statement_suite .

    $end            reduce using rule 13 (funcdef -> DEF IDENTIFIER LPAREN parameters RPAREN COLON statement_suite .)


state 68

    (9) if_stmt -> IF LPAREN arithmetic_expr RPAREN COLON statement_suite elif_stmt .

    $end            reduce using rule 9 (if_stmt -> IF LPAREN arithmetic_expr RPAREN COLON statement_suite elif_stmt .)


state 69

    (10) elif_stmt -> ELIF . LPAREN arithmetic_expr RPAREN COLON statement_suite else_stmt

    LPAREN          shift and go to state 78


state 70

    (11) elif_stmt -> else_stmt .

    $end            reduce using rule 11 (elif_stmt -> else_stmt .)


state 71

    (12) else_stmt -> ELSE . COLON statement_suite

    COLON           shift and go to state 79


state 72

    (19) statement_suite -> TAB statement .
    (20) statement_suite -> TAB statement . statement_suite
    (19) statement_suite -> . TAB statement
    (20) statement_suite -> . TAB statement statement_suite

    ELIF            reduce using rule 19 (statement_suite -> TAB statement .)
    ELSE            reduce using rule 19 (statement_suite -> TAB statement .)
    $end            reduce using rule 19 (statement_suite -> TAB statement .)
    TAB             shift and go to state 65

    statement_suite                shift and go to state 80

state 73

    (21) statement -> return_stmt .

    TAB             reduce using rule 21 (statement -> return_stmt .)
    ELIF            reduce using rule 21 (statement -> return_stmt .)
    ELSE            reduce using rule 21 (statement -> return_stmt .)
    $end            reduce using rule 21 (statement -> return_stmt .)


state 74

    (22) statement -> assignment_stmt .

    TAB             reduce using rule 22 (statement -> assignment_stmt .)
    ELIF            reduce using rule 22 (statement -> assignment_stmt .)
    ELSE            reduce using rule 22 (statement -> assignment_stmt .)
    $end            reduce using rule 22 (statement -> assignment_stmt .)


state 75

    (23) statement -> func_call_stmt .

    TAB             reduce using rule 23 (statement -> func_call_stmt .)
    ELIF            reduce using rule 23 (statement -> func_call_stmt .)
    ELSE            reduce using rule 23 (statement -> func_call_stmt .)
    $end            reduce using rule 23 (statement -> func_call_stmt .)


state 76

    (30) return_stmt -> RETURN . expression
    (26) expression -> . arithmetic_expr
    (27) expression -> . func_call_stmt
    (28) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (29) arithmetic_expr -> . atom
    (24) func_call_stmt -> . IDENTIFIER LPAREN parameters RPAREN
    (31) atom -> . IDENTIFIER
    (32) atom -> . literal
    (33) literal -> . NUMBER
    (34) literal -> . NONE
    (35) literal -> . TRUE
    (36) literal -> . FALSE
    (37) literal -> . STRING
    (38) literal -> . list
    (39) list -> . LSQUARE parameters RSQUARE

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 23
    NONE            shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    LSQUARE         shift and go to state 29

    expression                     shift and go to state 81
    arithmetic_expr                shift and go to state 19
    func_call_stmt                 shift and go to state 20
    atom                           shift and go to state 21
    literal                        shift and go to state 22
    list                           shift and go to state 28

state 77

    (25) assignment_stmt -> IDENTIFIER . EQUALS expression
    (24) func_call_stmt -> IDENTIFIER . LPAREN parameters RPAREN

    EQUALS          shift and go to state 13
    LPAREN          shift and go to state 37


state 78

    (10) elif_stmt -> ELIF LPAREN . arithmetic_expr RPAREN COLON statement_suite else_stmt
    (28) arithmetic_expr -> . arithmetic_expr arithmetic_op arithmetic_expr
    (29) arithmetic_expr -> . atom
    (31) atom -> . IDENTIFIER
    (32) atom -> . literal
    (33) literal -> . NUMBER
    (34) literal -> . NONE
    (35) literal -> . TRUE
    (36) literal -> . FALSE
    (37) literal -> . STRING
    (38) literal -> . list
    (39) list -> . LSQUARE parameters RSQUARE

    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 23
    NONE            shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    LSQUARE         shift and go to state 29

    arithmetic_expr                shift and go to state 82
    atom                           shift and go to state 21
    literal                        shift and go to state 22
    list                           shift and go to state 28

state 79

    (12) else_stmt -> ELSE COLON . statement_suite
    (19) statement_suite -> . TAB statement
    (20) statement_suite -> . TAB statement statement_suite

    TAB             shift and go to state 65

    statement_suite                shift and go to state 83

state 80

    (20) statement_suite -> TAB statement statement_suite .

    ELIF            reduce using rule 20 (statement_suite -> TAB statement statement_suite .)
    ELSE            reduce using rule 20 (statement_suite -> TAB statement statement_suite .)
    $end            reduce using rule 20 (statement_suite -> TAB statement statement_suite .)


state 81

    (30) return_stmt -> RETURN expression .

    TAB             reduce using rule 30 (return_stmt -> RETURN expression .)
    ELIF            reduce using rule 30 (return_stmt -> RETURN expression .)
    ELSE            reduce using rule 30 (return_stmt -> RETURN expression .)
    $end            reduce using rule 30 (return_stmt -> RETURN expression .)


state 82

    (10) elif_stmt -> ELIF LPAREN arithmetic_expr . RPAREN COLON statement_suite else_stmt
    (28) arithmetic_expr -> arithmetic_expr . arithmetic_op arithmetic_expr
    (40) arithmetic_op -> . PLUS
    (41) arithmetic_op -> . MINUS
    (42) arithmetic_op -> . MODULUS
    (43) arithmetic_op -> . DIVIDE
    (44) arithmetic_op -> . MULTIPLY
    (45) arithmetic_op -> . GR
    (46) arithmetic_op -> . LE
    (47) arithmetic_op -> . EQ
    (48) arithmetic_op -> . GREQ
    (49) arithmetic_op -> . LEEQ

    RPAREN          shift and go to state 84
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    MODULUS         shift and go to state 41
    DIVIDE          shift and go to state 42
    MULTIPLY        shift and go to state 43
    GR              shift and go to state 44
    LE              shift and go to state 45
    EQ              shift and go to state 46
    GREQ            shift and go to state 47
    LEEQ            shift and go to state 48

    arithmetic_op                  shift and go to state 38

state 83

    (12) else_stmt -> ELSE COLON statement_suite .

    $end            reduce using rule 12 (else_stmt -> ELSE COLON statement_suite .)


state 84

    (10) elif_stmt -> ELIF LPAREN arithmetic_expr RPAREN . COLON statement_suite else_stmt

    COLON           shift and go to state 85


state 85

    (10) elif_stmt -> ELIF LPAREN arithmetic_expr RPAREN COLON . statement_suite else_stmt
    (19) statement_suite -> . TAB statement
    (20) statement_suite -> . TAB statement statement_suite

    TAB             shift and go to state 65

    statement_suite                shift and go to state 86

state 86

    (10) elif_stmt -> ELIF LPAREN arithmetic_expr RPAREN COLON statement_suite . else_stmt
    (12) else_stmt -> . ELSE COLON statement_suite

    ELSE            shift and go to state 71

    else_stmt                      shift and go to state 87

state 87

    (10) elif_stmt -> ELIF LPAREN arithmetic_expr RPAREN COLON statement_suite else_stmt .

    $end            reduce using rule 10 (elif_stmt -> ELIF LPAREN arithmetic_expr RPAREN COLON statement_suite else_stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 56 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 56 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 56 resolved as shift
WARNING: shift/reduce conflict for GR in state 56 resolved as shift
WARNING: shift/reduce conflict for LE in state 56 resolved as shift
WARNING: shift/reduce conflict for EQ in state 56 resolved as shift
WARNING: shift/reduce conflict for GREQ in state 56 resolved as shift
WARNING: shift/reduce conflict for LEEQ in state 56 resolved as shift
