Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    LSQUARE
    RSQUARE
    STRING
    TAB

Grammar

Rule 0     S' -> start
Rule 1     start -> declarationList
Rule 2     declarationList -> declaration
Rule 3     declarationList -> declarationList declaration
Rule 4     declaration -> varDeclaration
Rule 5     declaration -> funcdef
Rule 6     varDeclaration -> typeSpecifier NAME SCOLON
Rule 7     varDeclaration -> typeSpecifier NAME EQUALS NAME
Rule 8     varDeclaration -> typeSpecifier NAME EQUALS NUMBER
Rule 9     typeSpecifier -> INT
Rule 10    typeSpecifier -> BOOL
Rule 11    typeSpecifier -> CHAR
Rule 12    typeSpecifier -> FLOAT
Rule 13    funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN
Rule 14    funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN
Rule 15    parameters -> typeSpecifier NAME
Rule 16    parameters -> typeSpecifier NAME COMMA parameters
Rule 17    parameters -> empty
Rule 18    funcbody -> statement
Rule 19    funcbody -> statement funcbody
Rule 20    funcbody -> statement SCOLON funcbody
Rule 21    blockitemlist -> blockitem
Rule 22    blockitemlist -> blockitemlist blockitem
Rule 23    blockitem -> statement
Rule 24    blockitem -> varDeclaration
Rule 25    cstatement -> LFPAREN RFPAREN
Rule 26    cstatement -> LFPAREN blockitemlist RFPAREN
Rule 27    statement -> cstatement
Rule 28    statement -> selectionStmt
Rule 29    statement -> iterationStmt
Rule 30    statement -> NAME SCOLON
Rule 31    statement -> NAME statement
Rule 32    statement -> varDeclaration statement
Rule 33    statement -> expressionStmt SCOLON statement
Rule 34    statement -> expressionStmt SCOLON
Rule 35    statement -> RETURN VALUE SCOLON
Rule 36    expressionStmt -> expressionStmt PLUS VALUE
Rule 37    expressionStmt -> expressionStmt MINUS VALUE
Rule 38    expressionStmt -> expressionStmt TIMES VALUE
Rule 39    expressionStmt -> expressionStmt DIVIDES VALUE
Rule 40    expressionStmt -> expressionStmt EQUALS VALUE
Rule 41    expressionStmt -> expressionStmt GREATERTHAN VALUE
Rule 42    expressionStmt -> expressionStmt LESSTHAN VALUE
Rule 43    expressionStmt -> expressionStmt GREATEQ VALUE
Rule 44    expressionStmt -> expressionStmt LESSEQ VALUE
Rule 45    expressionStmt -> expressionStmt EQUALEQUAL VALUE
Rule 46    expressionStmt -> expressionStmt MODULUS VALUE
Rule 47    expressionStmt -> VALUE
Rule 48    selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement
Rule 49    selectionStmt -> IF LPAREN expressionStmt RPAREN statement
Rule 50    iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement
Rule 51    iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON
Rule 52    iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
Rule 53    forcondition -> NAME EQUALS NAME
Rule 54    forcondition -> NAME GREATERTHAN NAME
Rule 55    forcondition -> NAME LESSTHAN NAME
Rule 56    forcondition -> NAME GREATEQ NAME
Rule 57    forcondition -> NAME LESSEQ NAME
Rule 58    forchange -> NAME PLUS PLUS
Rule 59    forchange -> NAME MINUS MINUS
Rule 60    forchange -> expressionStmt
Rule 61    empty -> <empty>

Terminals, with rules where they appear

BOOL                 : 10
CHAR                 : 11
COLON                : 
COMMA                : 16
DIVIDES              : 39
DO                   : 51
ELSE                 : 48
EQUALEQUAL           : 45
EQUALS               : 7 8 40 53
FLOAT                : 12
FOR                  : 52
GREATEQ              : 43 56
GREATERTHAN          : 41 54
IF                   : 48 49
INT                  : 9 14
LESSEQ               : 44 57
LESSTHAN             : 42 55
LFPAREN              : 13 14 25 26
LPAREN               : 13 14 48 49 50 51 52
LSQUARE              : 
MINUS                : 37 59 59
MODULUS              : 46
NAME                 : 6 7 7 8 13 14 15 16 30 31 53 53 54 54 55 55 56 56 57 57 58 59
NUMBER               : 8
PLUS                 : 36 58 58
RETURN               : 35
RFPAREN              : 13 14 25 26
RPAREN               : 13 14 48 49 50 51 52
RSQUARE              : 
SCOLON               : 6 20 30 33 34 35 51 52 52
STRING               : 
TAB                  : 
TIMES                : 38
VALUE                : 35 36 37 38 39 40 41 42 43 44 45 46 47
VOID                 : 13
WHILE                : 50 51
error                : 

Nonterminals, with rules where they appear

blockitem            : 21 22
blockitemlist        : 22 26
cstatement           : 27
declaration          : 2 3
declarationList      : 1 3
empty                : 17
expressionStmt       : 33 34 36 37 38 39 40 41 42 43 44 45 46 48 49 50 51 60
forchange            : 52
forcondition         : 52
funcbody             : 13 14 19 20
funcdef              : 5
iterationStmt        : 29
parameters           : 13 14 16
selectionStmt        : 28
start                : 0
statement            : 18 19 20 23 31 32 33 48 48 49 50 51 52
typeSpecifier        : 6 7 8 15 16
varDeclaration       : 4 24 32 52

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . declarationList
    (2) declarationList -> . declaration
    (3) declarationList -> . declarationList declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . funcdef
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (13) funcdef -> . VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN
    (14) funcdef -> . INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

    VOID            shift and go to state 7
    INT             shift and go to state 8
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

    start                          shift and go to state 1
    declarationList                shift and go to state 2
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4
    funcdef                        shift and go to state 5
    typeSpecifier                  shift and go to state 6

state 1

    (0) S' -> start .



state 2

    (1) start -> declarationList .
    (3) declarationList -> declarationList . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . funcdef
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (13) funcdef -> . VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN
    (14) funcdef -> . INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

    $end            reduce using rule 1 (start -> declarationList .)
    VOID            shift and go to state 7
    INT             shift and go to state 8
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

    declaration                    shift and go to state 12
    varDeclaration                 shift and go to state 4
    funcdef                        shift and go to state 5
    typeSpecifier                  shift and go to state 6

state 3

    (2) declarationList -> declaration .

    VOID            reduce using rule 2 (declarationList -> declaration .)
    INT             reduce using rule 2 (declarationList -> declaration .)
    BOOL            reduce using rule 2 (declarationList -> declaration .)
    CHAR            reduce using rule 2 (declarationList -> declaration .)
    FLOAT           reduce using rule 2 (declarationList -> declaration .)
    $end            reduce using rule 2 (declarationList -> declaration .)


state 4

    (4) declaration -> varDeclaration .

    VOID            reduce using rule 4 (declaration -> varDeclaration .)
    INT             reduce using rule 4 (declaration -> varDeclaration .)
    BOOL            reduce using rule 4 (declaration -> varDeclaration .)
    CHAR            reduce using rule 4 (declaration -> varDeclaration .)
    FLOAT           reduce using rule 4 (declaration -> varDeclaration .)
    $end            reduce using rule 4 (declaration -> varDeclaration .)


state 5

    (5) declaration -> funcdef .

    VOID            reduce using rule 5 (declaration -> funcdef .)
    INT             reduce using rule 5 (declaration -> funcdef .)
    BOOL            reduce using rule 5 (declaration -> funcdef .)
    CHAR            reduce using rule 5 (declaration -> funcdef .)
    FLOAT           reduce using rule 5 (declaration -> funcdef .)
    $end            reduce using rule 5 (declaration -> funcdef .)


state 6

    (6) varDeclaration -> typeSpecifier . NAME SCOLON
    (7) varDeclaration -> typeSpecifier . NAME EQUALS NAME
    (8) varDeclaration -> typeSpecifier . NAME EQUALS NUMBER

    NAME            shift and go to state 13


state 7

    (13) funcdef -> VOID . NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN

    NAME            shift and go to state 14


state 8

    (14) funcdef -> INT . NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN
    (9) typeSpecifier -> INT .

  ! shift/reduce conflict for NAME resolved as shift
    NAME            shift and go to state 15

  ! NAME            [ reduce using rule 9 (typeSpecifier -> INT .) ]


state 9

    (10) typeSpecifier -> BOOL .

    NAME            reduce using rule 10 (typeSpecifier -> BOOL .)


state 10

    (11) typeSpecifier -> CHAR .

    NAME            reduce using rule 11 (typeSpecifier -> CHAR .)


state 11

    (12) typeSpecifier -> FLOAT .

    NAME            reduce using rule 12 (typeSpecifier -> FLOAT .)


state 12

    (3) declarationList -> declarationList declaration .

    VOID            reduce using rule 3 (declarationList -> declarationList declaration .)
    INT             reduce using rule 3 (declarationList -> declarationList declaration .)
    BOOL            reduce using rule 3 (declarationList -> declarationList declaration .)
    CHAR            reduce using rule 3 (declarationList -> declarationList declaration .)
    FLOAT           reduce using rule 3 (declarationList -> declarationList declaration .)
    $end            reduce using rule 3 (declarationList -> declarationList declaration .)


state 13

    (6) varDeclaration -> typeSpecifier NAME . SCOLON
    (7) varDeclaration -> typeSpecifier NAME . EQUALS NAME
    (8) varDeclaration -> typeSpecifier NAME . EQUALS NUMBER

    SCOLON          shift and go to state 16
    EQUALS          shift and go to state 17


state 14

    (13) funcdef -> VOID NAME . LPAREN parameters RPAREN LFPAREN funcbody RFPAREN

    LPAREN          shift and go to state 18


state 15

    (14) funcdef -> INT NAME . LPAREN parameters RPAREN LFPAREN funcbody RFPAREN

    LPAREN          shift and go to state 19


state 16

    (6) varDeclaration -> typeSpecifier NAME SCOLON .

    VOID            reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    INT             reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    BOOL            reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    CHAR            reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    FLOAT           reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    $end            reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    NAME            reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    RETURN          reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    LFPAREN         reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    IF              reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    WHILE           reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    DO              reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    FOR             reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    VALUE           reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    RFPAREN         reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    SCOLON          reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)


state 17

    (7) varDeclaration -> typeSpecifier NAME EQUALS . NAME
    (8) varDeclaration -> typeSpecifier NAME EQUALS . NUMBER

    NAME            shift and go to state 20
    NUMBER          shift and go to state 21


state 18

    (13) funcdef -> VOID NAME LPAREN . parameters RPAREN LFPAREN funcbody RFPAREN
    (15) parameters -> . typeSpecifier NAME
    (16) parameters -> . typeSpecifier NAME COMMA parameters
    (17) parameters -> . empty
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT
    (61) empty -> .

    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    RPAREN          reduce using rule 61 (empty -> .)

    parameters                     shift and go to state 22
    typeSpecifier                  shift and go to state 23
    empty                          shift and go to state 24

state 19

    (14) funcdef -> INT NAME LPAREN . parameters RPAREN LFPAREN funcbody RFPAREN
    (15) parameters -> . typeSpecifier NAME
    (16) parameters -> . typeSpecifier NAME COMMA parameters
    (17) parameters -> . empty
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT
    (61) empty -> .

    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    RPAREN          reduce using rule 61 (empty -> .)

    parameters                     shift and go to state 26
    typeSpecifier                  shift and go to state 23
    empty                          shift and go to state 24

state 20

    (7) varDeclaration -> typeSpecifier NAME EQUALS NAME .

    VOID            reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    INT             reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    BOOL            reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    CHAR            reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    FLOAT           reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    $end            reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    NAME            reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    RETURN          reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    LFPAREN         reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    IF              reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    WHILE           reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    DO              reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    FOR             reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    VALUE           reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    RFPAREN         reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    SCOLON          reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)


state 21

    (8) varDeclaration -> typeSpecifier NAME EQUALS NUMBER .

    VOID            reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    INT             reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    BOOL            reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    CHAR            reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    FLOAT           reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    $end            reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    NAME            reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    RETURN          reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    LFPAREN         reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    IF              reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    WHILE           reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    DO              reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    FOR             reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    VALUE           reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    RFPAREN         reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    SCOLON          reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)


state 22

    (13) funcdef -> VOID NAME LPAREN parameters . RPAREN LFPAREN funcbody RFPAREN

    RPAREN          shift and go to state 27


state 23

    (15) parameters -> typeSpecifier . NAME
    (16) parameters -> typeSpecifier . NAME COMMA parameters

    NAME            shift and go to state 28


state 24

    (17) parameters -> empty .

    RPAREN          reduce using rule 17 (parameters -> empty .)


state 25

    (9) typeSpecifier -> INT .

    NAME            reduce using rule 9 (typeSpecifier -> INT .)


state 26

    (14) funcdef -> INT NAME LPAREN parameters . RPAREN LFPAREN funcbody RFPAREN

    RPAREN          shift and go to state 29


state 27

    (13) funcdef -> VOID NAME LPAREN parameters RPAREN . LFPAREN funcbody RFPAREN

    LFPAREN         shift and go to state 30


state 28

    (15) parameters -> typeSpecifier NAME .
    (16) parameters -> typeSpecifier NAME . COMMA parameters

    RPAREN          reduce using rule 15 (parameters -> typeSpecifier NAME .)
    COMMA           shift and go to state 31


state 29

    (14) funcdef -> INT NAME LPAREN parameters RPAREN . LFPAREN funcbody RFPAREN

    LFPAREN         shift and go to state 32


state 30

    (13) funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN . funcbody RFPAREN
    (18) funcbody -> . statement
    (19) funcbody -> . statement funcbody
    (20) funcbody -> . statement SCOLON funcbody
    (27) statement -> . cstatement
    (28) statement -> . selectionStmt
    (29) statement -> . iterationStmt
    (30) statement -> . NAME SCOLON
    (31) statement -> . NAME statement
    (32) statement -> . varDeclaration statement
    (33) statement -> . expressionStmt SCOLON statement
    (34) statement -> . expressionStmt SCOLON
    (35) statement -> . RETURN VALUE SCOLON
    (25) cstatement -> . LFPAREN RFPAREN
    (26) cstatement -> . LFPAREN blockitemlist RFPAREN
    (48) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement ELSE statement
    (49) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement
    (50) iterationStmt -> . WHILE LPAREN expressionStmt RPAREN statement
    (51) iterationStmt -> . DO statement WHILE LPAREN expressionStmt RPAREN SCOLON
    (52) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

    NAME            shift and go to state 33
    RETURN          shift and go to state 42
    LFPAREN         shift and go to state 34
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    VALUE           shift and go to state 43
    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

    funcbody                       shift and go to state 35
    statement                      shift and go to state 36
    cstatement                     shift and go to state 37
    selectionStmt                  shift and go to state 38
    iterationStmt                  shift and go to state 39
    varDeclaration                 shift and go to state 40
    expressionStmt                 shift and go to state 41
    typeSpecifier                  shift and go to state 6

state 31

    (16) parameters -> typeSpecifier NAME COMMA . parameters
    (15) parameters -> . typeSpecifier NAME
    (16) parameters -> . typeSpecifier NAME COMMA parameters
    (17) parameters -> . empty
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT
    (61) empty -> .

    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11
    RPAREN          reduce using rule 61 (empty -> .)

    typeSpecifier                  shift and go to state 23
    parameters                     shift and go to state 48
    empty                          shift and go to state 24

state 32

    (14) funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN . funcbody RFPAREN
    (18) funcbody -> . statement
    (19) funcbody -> . statement funcbody
    (20) funcbody -> . statement SCOLON funcbody
    (27) statement -> . cstatement
    (28) statement -> . selectionStmt
    (29) statement -> . iterationStmt
    (30) statement -> . NAME SCOLON
    (31) statement -> . NAME statement
    (32) statement -> . varDeclaration statement
    (33) statement -> . expressionStmt SCOLON statement
    (34) statement -> . expressionStmt SCOLON
    (35) statement -> . RETURN VALUE SCOLON
    (25) cstatement -> . LFPAREN RFPAREN
    (26) cstatement -> . LFPAREN blockitemlist RFPAREN
    (48) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement ELSE statement
    (49) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement
    (50) iterationStmt -> . WHILE LPAREN expressionStmt RPAREN statement
    (51) iterationStmt -> . DO statement WHILE LPAREN expressionStmt RPAREN SCOLON
    (52) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

    NAME            shift and go to state 33
    RETURN          shift and go to state 42
    LFPAREN         shift and go to state 34
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    VALUE           shift and go to state 43
    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

    funcbody                       shift and go to state 49
    statement                      shift and go to state 36
    cstatement                     shift and go to state 37
    selectionStmt                  shift and go to state 38
    iterationStmt                  shift and go to state 39
    varDeclaration                 shift and go to state 40
    expressionStmt                 shift and go to state 41
    typeSpecifier                  shift and go to state 6

state 33

    (30) statement -> NAME . SCOLON
    (31) statement -> NAME . statement
    (27) statement -> . cstatement
    (28) statement -> . selectionStmt
    (29) statement -> . iterationStmt
    (30) statement -> . NAME SCOLON
    (31) statement -> . NAME statement
    (32) statement -> . varDeclaration statement
    (33) statement -> . expressionStmt SCOLON statement
    (34) statement -> . expressionStmt SCOLON
    (35) statement -> . RETURN VALUE SCOLON
    (25) cstatement -> . LFPAREN RFPAREN
    (26) cstatement -> . LFPAREN blockitemlist RFPAREN
    (48) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement ELSE statement
    (49) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement
    (50) iterationStmt -> . WHILE LPAREN expressionStmt RPAREN statement
    (51) iterationStmt -> . DO statement WHILE LPAREN expressionStmt RPAREN SCOLON
    (52) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

    SCOLON          shift and go to state 50
    NAME            shift and go to state 33
    RETURN          shift and go to state 42
    LFPAREN         shift and go to state 34
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    VALUE           shift and go to state 43
    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

    statement                      shift and go to state 51
    cstatement                     shift and go to state 37
    selectionStmt                  shift and go to state 38
    iterationStmt                  shift and go to state 39
    varDeclaration                 shift and go to state 40
    expressionStmt                 shift and go to state 41
    typeSpecifier                  shift and go to state 6

state 34

    (25) cstatement -> LFPAREN . RFPAREN
    (26) cstatement -> LFPAREN . blockitemlist RFPAREN
    (21) blockitemlist -> . blockitem
    (22) blockitemlist -> . blockitemlist blockitem
    (23) blockitem -> . statement
    (24) blockitem -> . varDeclaration
    (27) statement -> . cstatement
    (28) statement -> . selectionStmt
    (29) statement -> . iterationStmt
    (30) statement -> . NAME SCOLON
    (31) statement -> . NAME statement
    (32) statement -> . varDeclaration statement
    (33) statement -> . expressionStmt SCOLON statement
    (34) statement -> . expressionStmt SCOLON
    (35) statement -> . RETURN VALUE SCOLON
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (25) cstatement -> . LFPAREN RFPAREN
    (26) cstatement -> . LFPAREN blockitemlist RFPAREN
    (48) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement ELSE statement
    (49) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement
    (50) iterationStmt -> . WHILE LPAREN expressionStmt RPAREN statement
    (51) iterationStmt -> . DO statement WHILE LPAREN expressionStmt RPAREN SCOLON
    (52) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

    RFPAREN         shift and go to state 52
    NAME            shift and go to state 33
    RETURN          shift and go to state 42
    LFPAREN         shift and go to state 34
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    VALUE           shift and go to state 43
    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

    blockitemlist                  shift and go to state 53
    blockitem                      shift and go to state 54
    statement                      shift and go to state 55
    varDeclaration                 shift and go to state 56
    cstatement                     shift and go to state 37
    selectionStmt                  shift and go to state 38
    iterationStmt                  shift and go to state 39
    expressionStmt                 shift and go to state 41
    typeSpecifier                  shift and go to state 6

state 35

    (13) funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody . RFPAREN

    RFPAREN         shift and go to state 57


state 36

    (18) funcbody -> statement .
    (19) funcbody -> statement . funcbody
    (20) funcbody -> statement . SCOLON funcbody
    (18) funcbody -> . statement
    (19) funcbody -> . statement funcbody
    (20) funcbody -> . statement SCOLON funcbody
    (27) statement -> . cstatement
    (28) statement -> . selectionStmt
    (29) statement -> . iterationStmt
    (30) statement -> . NAME SCOLON
    (31) statement -> . NAME statement
    (32) statement -> . varDeclaration statement
    (33) statement -> . expressionStmt SCOLON statement
    (34) statement -> . expressionStmt SCOLON
    (35) statement -> . RETURN VALUE SCOLON
    (25) cstatement -> . LFPAREN RFPAREN
    (26) cstatement -> . LFPAREN blockitemlist RFPAREN
    (48) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement ELSE statement
    (49) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement
    (50) iterationStmt -> . WHILE LPAREN expressionStmt RPAREN statement
    (51) iterationStmt -> . DO statement WHILE LPAREN expressionStmt RPAREN SCOLON
    (52) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

    RFPAREN         reduce using rule 18 (funcbody -> statement .)
    SCOLON          shift and go to state 59
    NAME            shift and go to state 33
    RETURN          shift and go to state 42
    LFPAREN         shift and go to state 34
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    VALUE           shift and go to state 43
    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

    statement                      shift and go to state 36
    funcbody                       shift and go to state 58
    cstatement                     shift and go to state 37
    selectionStmt                  shift and go to state 38
    iterationStmt                  shift and go to state 39
    varDeclaration                 shift and go to state 40
    expressionStmt                 shift and go to state 41
    typeSpecifier                  shift and go to state 6

state 37

    (27) statement -> cstatement .

    SCOLON          reduce using rule 27 (statement -> cstatement .)
    NAME            reduce using rule 27 (statement -> cstatement .)
    RETURN          reduce using rule 27 (statement -> cstatement .)
    LFPAREN         reduce using rule 27 (statement -> cstatement .)
    IF              reduce using rule 27 (statement -> cstatement .)
    WHILE           reduce using rule 27 (statement -> cstatement .)
    DO              reduce using rule 27 (statement -> cstatement .)
    FOR             reduce using rule 27 (statement -> cstatement .)
    VALUE           reduce using rule 27 (statement -> cstatement .)
    INT             reduce using rule 27 (statement -> cstatement .)
    BOOL            reduce using rule 27 (statement -> cstatement .)
    CHAR            reduce using rule 27 (statement -> cstatement .)
    FLOAT           reduce using rule 27 (statement -> cstatement .)
    RFPAREN         reduce using rule 27 (statement -> cstatement .)
    ELSE            reduce using rule 27 (statement -> cstatement .)


state 38

    (28) statement -> selectionStmt .

    SCOLON          reduce using rule 28 (statement -> selectionStmt .)
    NAME            reduce using rule 28 (statement -> selectionStmt .)
    RETURN          reduce using rule 28 (statement -> selectionStmt .)
    LFPAREN         reduce using rule 28 (statement -> selectionStmt .)
    IF              reduce using rule 28 (statement -> selectionStmt .)
    WHILE           reduce using rule 28 (statement -> selectionStmt .)
    DO              reduce using rule 28 (statement -> selectionStmt .)
    FOR             reduce using rule 28 (statement -> selectionStmt .)
    VALUE           reduce using rule 28 (statement -> selectionStmt .)
    INT             reduce using rule 28 (statement -> selectionStmt .)
    BOOL            reduce using rule 28 (statement -> selectionStmt .)
    CHAR            reduce using rule 28 (statement -> selectionStmt .)
    FLOAT           reduce using rule 28 (statement -> selectionStmt .)
    RFPAREN         reduce using rule 28 (statement -> selectionStmt .)
    ELSE            reduce using rule 28 (statement -> selectionStmt .)


state 39

    (29) statement -> iterationStmt .

    SCOLON          reduce using rule 29 (statement -> iterationStmt .)
    NAME            reduce using rule 29 (statement -> iterationStmt .)
    RETURN          reduce using rule 29 (statement -> iterationStmt .)
    LFPAREN         reduce using rule 29 (statement -> iterationStmt .)
    IF              reduce using rule 29 (statement -> iterationStmt .)
    WHILE           reduce using rule 29 (statement -> iterationStmt .)
    DO              reduce using rule 29 (statement -> iterationStmt .)
    FOR             reduce using rule 29 (statement -> iterationStmt .)
    VALUE           reduce using rule 29 (statement -> iterationStmt .)
    INT             reduce using rule 29 (statement -> iterationStmt .)
    BOOL            reduce using rule 29 (statement -> iterationStmt .)
    CHAR            reduce using rule 29 (statement -> iterationStmt .)
    FLOAT           reduce using rule 29 (statement -> iterationStmt .)
    RFPAREN         reduce using rule 29 (statement -> iterationStmt .)
    ELSE            reduce using rule 29 (statement -> iterationStmt .)


state 40

    (32) statement -> varDeclaration . statement
    (27) statement -> . cstatement
    (28) statement -> . selectionStmt
    (29) statement -> . iterationStmt
    (30) statement -> . NAME SCOLON
    (31) statement -> . NAME statement
    (32) statement -> . varDeclaration statement
    (33) statement -> . expressionStmt SCOLON statement
    (34) statement -> . expressionStmt SCOLON
    (35) statement -> . RETURN VALUE SCOLON
    (25) cstatement -> . LFPAREN RFPAREN
    (26) cstatement -> . LFPAREN blockitemlist RFPAREN
    (48) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement ELSE statement
    (49) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement
    (50) iterationStmt -> . WHILE LPAREN expressionStmt RPAREN statement
    (51) iterationStmt -> . DO statement WHILE LPAREN expressionStmt RPAREN SCOLON
    (52) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

    NAME            shift and go to state 33
    RETURN          shift and go to state 42
    LFPAREN         shift and go to state 34
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    VALUE           shift and go to state 43
    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

    varDeclaration                 shift and go to state 40
    statement                      shift and go to state 60
    cstatement                     shift and go to state 37
    selectionStmt                  shift and go to state 38
    iterationStmt                  shift and go to state 39
    expressionStmt                 shift and go to state 41
    typeSpecifier                  shift and go to state 6

state 41

    (33) statement -> expressionStmt . SCOLON statement
    (34) statement -> expressionStmt . SCOLON
    (36) expressionStmt -> expressionStmt . PLUS VALUE
    (37) expressionStmt -> expressionStmt . MINUS VALUE
    (38) expressionStmt -> expressionStmt . TIMES VALUE
    (39) expressionStmt -> expressionStmt . DIVIDES VALUE
    (40) expressionStmt -> expressionStmt . EQUALS VALUE
    (41) expressionStmt -> expressionStmt . GREATERTHAN VALUE
    (42) expressionStmt -> expressionStmt . LESSTHAN VALUE
    (43) expressionStmt -> expressionStmt . GREATEQ VALUE
    (44) expressionStmt -> expressionStmt . LESSEQ VALUE
    (45) expressionStmt -> expressionStmt . EQUALEQUAL VALUE
    (46) expressionStmt -> expressionStmt . MODULUS VALUE

    SCOLON          shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    TIMES           shift and go to state 64
    DIVIDES         shift and go to state 65
    EQUALS          shift and go to state 66
    GREATERTHAN     shift and go to state 67
    LESSTHAN        shift and go to state 68
    GREATEQ         shift and go to state 69
    LESSEQ          shift and go to state 70
    EQUALEQUAL      shift and go to state 71
    MODULUS         shift and go to state 72


state 42

    (35) statement -> RETURN . VALUE SCOLON

    VALUE           shift and go to state 73


state 43

    (47) expressionStmt -> VALUE .

    SCOLON          reduce using rule 47 (expressionStmt -> VALUE .)
    PLUS            reduce using rule 47 (expressionStmt -> VALUE .)
    MINUS           reduce using rule 47 (expressionStmt -> VALUE .)
    TIMES           reduce using rule 47 (expressionStmt -> VALUE .)
    DIVIDES         reduce using rule 47 (expressionStmt -> VALUE .)
    EQUALS          reduce using rule 47 (expressionStmt -> VALUE .)
    GREATERTHAN     reduce using rule 47 (expressionStmt -> VALUE .)
    LESSTHAN        reduce using rule 47 (expressionStmt -> VALUE .)
    GREATEQ         reduce using rule 47 (expressionStmt -> VALUE .)
    LESSEQ          reduce using rule 47 (expressionStmt -> VALUE .)
    EQUALEQUAL      reduce using rule 47 (expressionStmt -> VALUE .)
    MODULUS         reduce using rule 47 (expressionStmt -> VALUE .)
    RPAREN          reduce using rule 47 (expressionStmt -> VALUE .)


state 44

    (48) selectionStmt -> IF . LPAREN expressionStmt RPAREN statement ELSE statement
    (49) selectionStmt -> IF . LPAREN expressionStmt RPAREN statement

    LPAREN          shift and go to state 74


state 45

    (50) iterationStmt -> WHILE . LPAREN expressionStmt RPAREN statement

    LPAREN          shift and go to state 75


state 46

    (51) iterationStmt -> DO . statement WHILE LPAREN expressionStmt RPAREN SCOLON
    (27) statement -> . cstatement
    (28) statement -> . selectionStmt
    (29) statement -> . iterationStmt
    (30) statement -> . NAME SCOLON
    (31) statement -> . NAME statement
    (32) statement -> . varDeclaration statement
    (33) statement -> . expressionStmt SCOLON statement
    (34) statement -> . expressionStmt SCOLON
    (35) statement -> . RETURN VALUE SCOLON
    (25) cstatement -> . LFPAREN RFPAREN
    (26) cstatement -> . LFPAREN blockitemlist RFPAREN
    (48) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement ELSE statement
    (49) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement
    (50) iterationStmt -> . WHILE LPAREN expressionStmt RPAREN statement
    (51) iterationStmt -> . DO statement WHILE LPAREN expressionStmt RPAREN SCOLON
    (52) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

    NAME            shift and go to state 33
    RETURN          shift and go to state 42
    LFPAREN         shift and go to state 34
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    VALUE           shift and go to state 43
    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

    statement                      shift and go to state 76
    expressionStmt                 shift and go to state 41
    cstatement                     shift and go to state 37
    selectionStmt                  shift and go to state 38
    iterationStmt                  shift and go to state 39
    varDeclaration                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 47

    (52) iterationStmt -> FOR . LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement

    LPAREN          shift and go to state 77


state 48

    (16) parameters -> typeSpecifier NAME COMMA parameters .

    RPAREN          reduce using rule 16 (parameters -> typeSpecifier NAME COMMA parameters .)


state 49

    (14) funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody . RFPAREN

    RFPAREN         shift and go to state 78


state 50

    (30) statement -> NAME SCOLON .

    SCOLON          reduce using rule 30 (statement -> NAME SCOLON .)
    NAME            reduce using rule 30 (statement -> NAME SCOLON .)
    RETURN          reduce using rule 30 (statement -> NAME SCOLON .)
    LFPAREN         reduce using rule 30 (statement -> NAME SCOLON .)
    IF              reduce using rule 30 (statement -> NAME SCOLON .)
    WHILE           reduce using rule 30 (statement -> NAME SCOLON .)
    DO              reduce using rule 30 (statement -> NAME SCOLON .)
    FOR             reduce using rule 30 (statement -> NAME SCOLON .)
    VALUE           reduce using rule 30 (statement -> NAME SCOLON .)
    INT             reduce using rule 30 (statement -> NAME SCOLON .)
    BOOL            reduce using rule 30 (statement -> NAME SCOLON .)
    CHAR            reduce using rule 30 (statement -> NAME SCOLON .)
    FLOAT           reduce using rule 30 (statement -> NAME SCOLON .)
    RFPAREN         reduce using rule 30 (statement -> NAME SCOLON .)
    ELSE            reduce using rule 30 (statement -> NAME SCOLON .)


state 51

    (31) statement -> NAME statement .

    SCOLON          reduce using rule 31 (statement -> NAME statement .)
    NAME            reduce using rule 31 (statement -> NAME statement .)
    RETURN          reduce using rule 31 (statement -> NAME statement .)
    LFPAREN         reduce using rule 31 (statement -> NAME statement .)
    IF              reduce using rule 31 (statement -> NAME statement .)
    WHILE           reduce using rule 31 (statement -> NAME statement .)
    DO              reduce using rule 31 (statement -> NAME statement .)
    FOR             reduce using rule 31 (statement -> NAME statement .)
    VALUE           reduce using rule 31 (statement -> NAME statement .)
    INT             reduce using rule 31 (statement -> NAME statement .)
    BOOL            reduce using rule 31 (statement -> NAME statement .)
    CHAR            reduce using rule 31 (statement -> NAME statement .)
    FLOAT           reduce using rule 31 (statement -> NAME statement .)
    RFPAREN         reduce using rule 31 (statement -> NAME statement .)
    ELSE            reduce using rule 31 (statement -> NAME statement .)


state 52

    (25) cstatement -> LFPAREN RFPAREN .

    SCOLON          reduce using rule 25 (cstatement -> LFPAREN RFPAREN .)
    NAME            reduce using rule 25 (cstatement -> LFPAREN RFPAREN .)
    RETURN          reduce using rule 25 (cstatement -> LFPAREN RFPAREN .)
    LFPAREN         reduce using rule 25 (cstatement -> LFPAREN RFPAREN .)
    IF              reduce using rule 25 (cstatement -> LFPAREN RFPAREN .)
    WHILE           reduce using rule 25 (cstatement -> LFPAREN RFPAREN .)
    DO              reduce using rule 25 (cstatement -> LFPAREN RFPAREN .)
    FOR             reduce using rule 25 (cstatement -> LFPAREN RFPAREN .)
    VALUE           reduce using rule 25 (cstatement -> LFPAREN RFPAREN .)
    INT             reduce using rule 25 (cstatement -> LFPAREN RFPAREN .)
    BOOL            reduce using rule 25 (cstatement -> LFPAREN RFPAREN .)
    CHAR            reduce using rule 25 (cstatement -> LFPAREN RFPAREN .)
    FLOAT           reduce using rule 25 (cstatement -> LFPAREN RFPAREN .)
    RFPAREN         reduce using rule 25 (cstatement -> LFPAREN RFPAREN .)
    ELSE            reduce using rule 25 (cstatement -> LFPAREN RFPAREN .)


state 53

    (26) cstatement -> LFPAREN blockitemlist . RFPAREN
    (22) blockitemlist -> blockitemlist . blockitem
    (23) blockitem -> . statement
    (24) blockitem -> . varDeclaration
    (27) statement -> . cstatement
    (28) statement -> . selectionStmt
    (29) statement -> . iterationStmt
    (30) statement -> . NAME SCOLON
    (31) statement -> . NAME statement
    (32) statement -> . varDeclaration statement
    (33) statement -> . expressionStmt SCOLON statement
    (34) statement -> . expressionStmt SCOLON
    (35) statement -> . RETURN VALUE SCOLON
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (25) cstatement -> . LFPAREN RFPAREN
    (26) cstatement -> . LFPAREN blockitemlist RFPAREN
    (48) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement ELSE statement
    (49) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement
    (50) iterationStmt -> . WHILE LPAREN expressionStmt RPAREN statement
    (51) iterationStmt -> . DO statement WHILE LPAREN expressionStmt RPAREN SCOLON
    (52) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

    RFPAREN         shift and go to state 79
    NAME            shift and go to state 33
    RETURN          shift and go to state 42
    LFPAREN         shift and go to state 34
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    VALUE           shift and go to state 43
    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

    blockitem                      shift and go to state 80
    statement                      shift and go to state 55
    varDeclaration                 shift and go to state 56
    cstatement                     shift and go to state 37
    selectionStmt                  shift and go to state 38
    iterationStmt                  shift and go to state 39
    expressionStmt                 shift and go to state 41
    typeSpecifier                  shift and go to state 6

state 54

    (21) blockitemlist -> blockitem .

    RFPAREN         reduce using rule 21 (blockitemlist -> blockitem .)
    NAME            reduce using rule 21 (blockitemlist -> blockitem .)
    RETURN          reduce using rule 21 (blockitemlist -> blockitem .)
    LFPAREN         reduce using rule 21 (blockitemlist -> blockitem .)
    IF              reduce using rule 21 (blockitemlist -> blockitem .)
    WHILE           reduce using rule 21 (blockitemlist -> blockitem .)
    DO              reduce using rule 21 (blockitemlist -> blockitem .)
    FOR             reduce using rule 21 (blockitemlist -> blockitem .)
    VALUE           reduce using rule 21 (blockitemlist -> blockitem .)
    INT             reduce using rule 21 (blockitemlist -> blockitem .)
    BOOL            reduce using rule 21 (blockitemlist -> blockitem .)
    CHAR            reduce using rule 21 (blockitemlist -> blockitem .)
    FLOAT           reduce using rule 21 (blockitemlist -> blockitem .)


state 55

    (23) blockitem -> statement .

    RFPAREN         reduce using rule 23 (blockitem -> statement .)
    NAME            reduce using rule 23 (blockitem -> statement .)
    RETURN          reduce using rule 23 (blockitem -> statement .)
    LFPAREN         reduce using rule 23 (blockitem -> statement .)
    IF              reduce using rule 23 (blockitem -> statement .)
    WHILE           reduce using rule 23 (blockitem -> statement .)
    DO              reduce using rule 23 (blockitem -> statement .)
    FOR             reduce using rule 23 (blockitem -> statement .)
    VALUE           reduce using rule 23 (blockitem -> statement .)
    INT             reduce using rule 23 (blockitem -> statement .)
    BOOL            reduce using rule 23 (blockitem -> statement .)
    CHAR            reduce using rule 23 (blockitem -> statement .)
    FLOAT           reduce using rule 23 (blockitem -> statement .)


state 56

    (24) blockitem -> varDeclaration .
    (32) statement -> varDeclaration . statement
    (27) statement -> . cstatement
    (28) statement -> . selectionStmt
    (29) statement -> . iterationStmt
    (30) statement -> . NAME SCOLON
    (31) statement -> . NAME statement
    (32) statement -> . varDeclaration statement
    (33) statement -> . expressionStmt SCOLON statement
    (34) statement -> . expressionStmt SCOLON
    (35) statement -> . RETURN VALUE SCOLON
    (25) cstatement -> . LFPAREN RFPAREN
    (26) cstatement -> . LFPAREN blockitemlist RFPAREN
    (48) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement ELSE statement
    (49) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement
    (50) iterationStmt -> . WHILE LPAREN expressionStmt RPAREN statement
    (51) iterationStmt -> . DO statement WHILE LPAREN expressionStmt RPAREN SCOLON
    (52) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LFPAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for VALUE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    RFPAREN         reduce using rule 24 (blockitem -> varDeclaration .)
    NAME            shift and go to state 33
    RETURN          shift and go to state 42
    LFPAREN         shift and go to state 34
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    VALUE           shift and go to state 43
    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

  ! NAME            [ reduce using rule 24 (blockitem -> varDeclaration .) ]
  ! RETURN          [ reduce using rule 24 (blockitem -> varDeclaration .) ]
  ! LFPAREN         [ reduce using rule 24 (blockitem -> varDeclaration .) ]
  ! IF              [ reduce using rule 24 (blockitem -> varDeclaration .) ]
  ! WHILE           [ reduce using rule 24 (blockitem -> varDeclaration .) ]
  ! DO              [ reduce using rule 24 (blockitem -> varDeclaration .) ]
  ! FOR             [ reduce using rule 24 (blockitem -> varDeclaration .) ]
  ! VALUE           [ reduce using rule 24 (blockitem -> varDeclaration .) ]
  ! INT             [ reduce using rule 24 (blockitem -> varDeclaration .) ]
  ! BOOL            [ reduce using rule 24 (blockitem -> varDeclaration .) ]
  ! CHAR            [ reduce using rule 24 (blockitem -> varDeclaration .) ]
  ! FLOAT           [ reduce using rule 24 (blockitem -> varDeclaration .) ]

    varDeclaration                 shift and go to state 40
    statement                      shift and go to state 60
    cstatement                     shift and go to state 37
    selectionStmt                  shift and go to state 38
    iterationStmt                  shift and go to state 39
    expressionStmt                 shift and go to state 41
    typeSpecifier                  shift and go to state 6

state 57

    (13) funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .

    VOID            reduce using rule 13 (funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    INT             reduce using rule 13 (funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    BOOL            reduce using rule 13 (funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    CHAR            reduce using rule 13 (funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    FLOAT           reduce using rule 13 (funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    $end            reduce using rule 13 (funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)


state 58

    (19) funcbody -> statement funcbody .

    RFPAREN         reduce using rule 19 (funcbody -> statement funcbody .)


state 59

    (20) funcbody -> statement SCOLON . funcbody
    (18) funcbody -> . statement
    (19) funcbody -> . statement funcbody
    (20) funcbody -> . statement SCOLON funcbody
    (27) statement -> . cstatement
    (28) statement -> . selectionStmt
    (29) statement -> . iterationStmt
    (30) statement -> . NAME SCOLON
    (31) statement -> . NAME statement
    (32) statement -> . varDeclaration statement
    (33) statement -> . expressionStmt SCOLON statement
    (34) statement -> . expressionStmt SCOLON
    (35) statement -> . RETURN VALUE SCOLON
    (25) cstatement -> . LFPAREN RFPAREN
    (26) cstatement -> . LFPAREN blockitemlist RFPAREN
    (48) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement ELSE statement
    (49) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement
    (50) iterationStmt -> . WHILE LPAREN expressionStmt RPAREN statement
    (51) iterationStmt -> . DO statement WHILE LPAREN expressionStmt RPAREN SCOLON
    (52) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

    NAME            shift and go to state 33
    RETURN          shift and go to state 42
    LFPAREN         shift and go to state 34
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    VALUE           shift and go to state 43
    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

    statement                      shift and go to state 36
    funcbody                       shift and go to state 81
    cstatement                     shift and go to state 37
    selectionStmt                  shift and go to state 38
    iterationStmt                  shift and go to state 39
    varDeclaration                 shift and go to state 40
    expressionStmt                 shift and go to state 41
    typeSpecifier                  shift and go to state 6

state 60

    (32) statement -> varDeclaration statement .

    SCOLON          reduce using rule 32 (statement -> varDeclaration statement .)
    NAME            reduce using rule 32 (statement -> varDeclaration statement .)
    RETURN          reduce using rule 32 (statement -> varDeclaration statement .)
    LFPAREN         reduce using rule 32 (statement -> varDeclaration statement .)
    IF              reduce using rule 32 (statement -> varDeclaration statement .)
    WHILE           reduce using rule 32 (statement -> varDeclaration statement .)
    DO              reduce using rule 32 (statement -> varDeclaration statement .)
    FOR             reduce using rule 32 (statement -> varDeclaration statement .)
    VALUE           reduce using rule 32 (statement -> varDeclaration statement .)
    INT             reduce using rule 32 (statement -> varDeclaration statement .)
    BOOL            reduce using rule 32 (statement -> varDeclaration statement .)
    CHAR            reduce using rule 32 (statement -> varDeclaration statement .)
    FLOAT           reduce using rule 32 (statement -> varDeclaration statement .)
    RFPAREN         reduce using rule 32 (statement -> varDeclaration statement .)
    ELSE            reduce using rule 32 (statement -> varDeclaration statement .)


state 61

    (33) statement -> expressionStmt SCOLON . statement
    (34) statement -> expressionStmt SCOLON .
    (27) statement -> . cstatement
    (28) statement -> . selectionStmt
    (29) statement -> . iterationStmt
    (30) statement -> . NAME SCOLON
    (31) statement -> . NAME statement
    (32) statement -> . varDeclaration statement
    (33) statement -> . expressionStmt SCOLON statement
    (34) statement -> . expressionStmt SCOLON
    (35) statement -> . RETURN VALUE SCOLON
    (25) cstatement -> . LFPAREN RFPAREN
    (26) cstatement -> . LFPAREN blockitemlist RFPAREN
    (48) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement ELSE statement
    (49) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement
    (50) iterationStmt -> . WHILE LPAREN expressionStmt RPAREN statement
    (51) iterationStmt -> . DO statement WHILE LPAREN expressionStmt RPAREN SCOLON
    (52) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LFPAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for VALUE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    SCOLON          reduce using rule 34 (statement -> expressionStmt SCOLON .)
    RFPAREN         reduce using rule 34 (statement -> expressionStmt SCOLON .)
    ELSE            reduce using rule 34 (statement -> expressionStmt SCOLON .)
    NAME            shift and go to state 33
    RETURN          shift and go to state 42
    LFPAREN         shift and go to state 34
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    VALUE           shift and go to state 43
    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

  ! NAME            [ reduce using rule 34 (statement -> expressionStmt SCOLON .) ]
  ! RETURN          [ reduce using rule 34 (statement -> expressionStmt SCOLON .) ]
  ! LFPAREN         [ reduce using rule 34 (statement -> expressionStmt SCOLON .) ]
  ! IF              [ reduce using rule 34 (statement -> expressionStmt SCOLON .) ]
  ! WHILE           [ reduce using rule 34 (statement -> expressionStmt SCOLON .) ]
  ! DO              [ reduce using rule 34 (statement -> expressionStmt SCOLON .) ]
  ! FOR             [ reduce using rule 34 (statement -> expressionStmt SCOLON .) ]
  ! VALUE           [ reduce using rule 34 (statement -> expressionStmt SCOLON .) ]
  ! INT             [ reduce using rule 34 (statement -> expressionStmt SCOLON .) ]
  ! BOOL            [ reduce using rule 34 (statement -> expressionStmt SCOLON .) ]
  ! CHAR            [ reduce using rule 34 (statement -> expressionStmt SCOLON .) ]
  ! FLOAT           [ reduce using rule 34 (statement -> expressionStmt SCOLON .) ]

    expressionStmt                 shift and go to state 41
    statement                      shift and go to state 82
    cstatement                     shift and go to state 37
    selectionStmt                  shift and go to state 38
    iterationStmt                  shift and go to state 39
    varDeclaration                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 62

    (36) expressionStmt -> expressionStmt PLUS . VALUE

    VALUE           shift and go to state 83


state 63

    (37) expressionStmt -> expressionStmt MINUS . VALUE

    VALUE           shift and go to state 84


state 64

    (38) expressionStmt -> expressionStmt TIMES . VALUE

    VALUE           shift and go to state 85


state 65

    (39) expressionStmt -> expressionStmt DIVIDES . VALUE

    VALUE           shift and go to state 86


state 66

    (40) expressionStmt -> expressionStmt EQUALS . VALUE

    VALUE           shift and go to state 87


state 67

    (41) expressionStmt -> expressionStmt GREATERTHAN . VALUE

    VALUE           shift and go to state 88


state 68

    (42) expressionStmt -> expressionStmt LESSTHAN . VALUE

    VALUE           shift and go to state 89


state 69

    (43) expressionStmt -> expressionStmt GREATEQ . VALUE

    VALUE           shift and go to state 90


state 70

    (44) expressionStmt -> expressionStmt LESSEQ . VALUE

    VALUE           shift and go to state 91


state 71

    (45) expressionStmt -> expressionStmt EQUALEQUAL . VALUE

    VALUE           shift and go to state 92


state 72

    (46) expressionStmt -> expressionStmt MODULUS . VALUE

    VALUE           shift and go to state 93


state 73

    (35) statement -> RETURN VALUE . SCOLON

    SCOLON          shift and go to state 94


state 74

    (48) selectionStmt -> IF LPAREN . expressionStmt RPAREN statement ELSE statement
    (49) selectionStmt -> IF LPAREN . expressionStmt RPAREN statement
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE

    VALUE           shift and go to state 43

    expressionStmt                 shift and go to state 95

state 75

    (50) iterationStmt -> WHILE LPAREN . expressionStmt RPAREN statement
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE

    VALUE           shift and go to state 43

    expressionStmt                 shift and go to state 96

state 76

    (51) iterationStmt -> DO statement . WHILE LPAREN expressionStmt RPAREN SCOLON

    WHILE           shift and go to state 97


state 77

    (52) iterationStmt -> FOR LPAREN . varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

    varDeclaration                 shift and go to state 98
    typeSpecifier                  shift and go to state 6

state 78

    (14) funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .

    VOID            reduce using rule 14 (funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    INT             reduce using rule 14 (funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    BOOL            reduce using rule 14 (funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    CHAR            reduce using rule 14 (funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    FLOAT           reduce using rule 14 (funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    $end            reduce using rule 14 (funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)


state 79

    (26) cstatement -> LFPAREN blockitemlist RFPAREN .

    SCOLON          reduce using rule 26 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    NAME            reduce using rule 26 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    RETURN          reduce using rule 26 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    LFPAREN         reduce using rule 26 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    IF              reduce using rule 26 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    WHILE           reduce using rule 26 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    DO              reduce using rule 26 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    FOR             reduce using rule 26 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    VALUE           reduce using rule 26 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    INT             reduce using rule 26 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    BOOL            reduce using rule 26 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    CHAR            reduce using rule 26 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    FLOAT           reduce using rule 26 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    RFPAREN         reduce using rule 26 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    ELSE            reduce using rule 26 (cstatement -> LFPAREN blockitemlist RFPAREN .)


state 80

    (22) blockitemlist -> blockitemlist blockitem .

    RFPAREN         reduce using rule 22 (blockitemlist -> blockitemlist blockitem .)
    NAME            reduce using rule 22 (blockitemlist -> blockitemlist blockitem .)
    RETURN          reduce using rule 22 (blockitemlist -> blockitemlist blockitem .)
    LFPAREN         reduce using rule 22 (blockitemlist -> blockitemlist blockitem .)
    IF              reduce using rule 22 (blockitemlist -> blockitemlist blockitem .)
    WHILE           reduce using rule 22 (blockitemlist -> blockitemlist blockitem .)
    DO              reduce using rule 22 (blockitemlist -> blockitemlist blockitem .)
    FOR             reduce using rule 22 (blockitemlist -> blockitemlist blockitem .)
    VALUE           reduce using rule 22 (blockitemlist -> blockitemlist blockitem .)
    INT             reduce using rule 22 (blockitemlist -> blockitemlist blockitem .)
    BOOL            reduce using rule 22 (blockitemlist -> blockitemlist blockitem .)
    CHAR            reduce using rule 22 (blockitemlist -> blockitemlist blockitem .)
    FLOAT           reduce using rule 22 (blockitemlist -> blockitemlist blockitem .)


state 81

    (20) funcbody -> statement SCOLON funcbody .

    RFPAREN         reduce using rule 20 (funcbody -> statement SCOLON funcbody .)


state 82

    (33) statement -> expressionStmt SCOLON statement .

    SCOLON          reduce using rule 33 (statement -> expressionStmt SCOLON statement .)
    NAME            reduce using rule 33 (statement -> expressionStmt SCOLON statement .)
    RETURN          reduce using rule 33 (statement -> expressionStmt SCOLON statement .)
    LFPAREN         reduce using rule 33 (statement -> expressionStmt SCOLON statement .)
    IF              reduce using rule 33 (statement -> expressionStmt SCOLON statement .)
    WHILE           reduce using rule 33 (statement -> expressionStmt SCOLON statement .)
    DO              reduce using rule 33 (statement -> expressionStmt SCOLON statement .)
    FOR             reduce using rule 33 (statement -> expressionStmt SCOLON statement .)
    VALUE           reduce using rule 33 (statement -> expressionStmt SCOLON statement .)
    INT             reduce using rule 33 (statement -> expressionStmt SCOLON statement .)
    BOOL            reduce using rule 33 (statement -> expressionStmt SCOLON statement .)
    CHAR            reduce using rule 33 (statement -> expressionStmt SCOLON statement .)
    FLOAT           reduce using rule 33 (statement -> expressionStmt SCOLON statement .)
    RFPAREN         reduce using rule 33 (statement -> expressionStmt SCOLON statement .)
    ELSE            reduce using rule 33 (statement -> expressionStmt SCOLON statement .)


state 83

    (36) expressionStmt -> expressionStmt PLUS VALUE .

    SCOLON          reduce using rule 36 (expressionStmt -> expressionStmt PLUS VALUE .)
    PLUS            reduce using rule 36 (expressionStmt -> expressionStmt PLUS VALUE .)
    MINUS           reduce using rule 36 (expressionStmt -> expressionStmt PLUS VALUE .)
    TIMES           reduce using rule 36 (expressionStmt -> expressionStmt PLUS VALUE .)
    DIVIDES         reduce using rule 36 (expressionStmt -> expressionStmt PLUS VALUE .)
    EQUALS          reduce using rule 36 (expressionStmt -> expressionStmt PLUS VALUE .)
    GREATERTHAN     reduce using rule 36 (expressionStmt -> expressionStmt PLUS VALUE .)
    LESSTHAN        reduce using rule 36 (expressionStmt -> expressionStmt PLUS VALUE .)
    GREATEQ         reduce using rule 36 (expressionStmt -> expressionStmt PLUS VALUE .)
    LESSEQ          reduce using rule 36 (expressionStmt -> expressionStmt PLUS VALUE .)
    EQUALEQUAL      reduce using rule 36 (expressionStmt -> expressionStmt PLUS VALUE .)
    MODULUS         reduce using rule 36 (expressionStmt -> expressionStmt PLUS VALUE .)
    RPAREN          reduce using rule 36 (expressionStmt -> expressionStmt PLUS VALUE .)


state 84

    (37) expressionStmt -> expressionStmt MINUS VALUE .

    SCOLON          reduce using rule 37 (expressionStmt -> expressionStmt MINUS VALUE .)
    PLUS            reduce using rule 37 (expressionStmt -> expressionStmt MINUS VALUE .)
    MINUS           reduce using rule 37 (expressionStmt -> expressionStmt MINUS VALUE .)
    TIMES           reduce using rule 37 (expressionStmt -> expressionStmt MINUS VALUE .)
    DIVIDES         reduce using rule 37 (expressionStmt -> expressionStmt MINUS VALUE .)
    EQUALS          reduce using rule 37 (expressionStmt -> expressionStmt MINUS VALUE .)
    GREATERTHAN     reduce using rule 37 (expressionStmt -> expressionStmt MINUS VALUE .)
    LESSTHAN        reduce using rule 37 (expressionStmt -> expressionStmt MINUS VALUE .)
    GREATEQ         reduce using rule 37 (expressionStmt -> expressionStmt MINUS VALUE .)
    LESSEQ          reduce using rule 37 (expressionStmt -> expressionStmt MINUS VALUE .)
    EQUALEQUAL      reduce using rule 37 (expressionStmt -> expressionStmt MINUS VALUE .)
    MODULUS         reduce using rule 37 (expressionStmt -> expressionStmt MINUS VALUE .)
    RPAREN          reduce using rule 37 (expressionStmt -> expressionStmt MINUS VALUE .)


state 85

    (38) expressionStmt -> expressionStmt TIMES VALUE .

    SCOLON          reduce using rule 38 (expressionStmt -> expressionStmt TIMES VALUE .)
    PLUS            reduce using rule 38 (expressionStmt -> expressionStmt TIMES VALUE .)
    MINUS           reduce using rule 38 (expressionStmt -> expressionStmt TIMES VALUE .)
    TIMES           reduce using rule 38 (expressionStmt -> expressionStmt TIMES VALUE .)
    DIVIDES         reduce using rule 38 (expressionStmt -> expressionStmt TIMES VALUE .)
    EQUALS          reduce using rule 38 (expressionStmt -> expressionStmt TIMES VALUE .)
    GREATERTHAN     reduce using rule 38 (expressionStmt -> expressionStmt TIMES VALUE .)
    LESSTHAN        reduce using rule 38 (expressionStmt -> expressionStmt TIMES VALUE .)
    GREATEQ         reduce using rule 38 (expressionStmt -> expressionStmt TIMES VALUE .)
    LESSEQ          reduce using rule 38 (expressionStmt -> expressionStmt TIMES VALUE .)
    EQUALEQUAL      reduce using rule 38 (expressionStmt -> expressionStmt TIMES VALUE .)
    MODULUS         reduce using rule 38 (expressionStmt -> expressionStmt TIMES VALUE .)
    RPAREN          reduce using rule 38 (expressionStmt -> expressionStmt TIMES VALUE .)


state 86

    (39) expressionStmt -> expressionStmt DIVIDES VALUE .

    SCOLON          reduce using rule 39 (expressionStmt -> expressionStmt DIVIDES VALUE .)
    PLUS            reduce using rule 39 (expressionStmt -> expressionStmt DIVIDES VALUE .)
    MINUS           reduce using rule 39 (expressionStmt -> expressionStmt DIVIDES VALUE .)
    TIMES           reduce using rule 39 (expressionStmt -> expressionStmt DIVIDES VALUE .)
    DIVIDES         reduce using rule 39 (expressionStmt -> expressionStmt DIVIDES VALUE .)
    EQUALS          reduce using rule 39 (expressionStmt -> expressionStmt DIVIDES VALUE .)
    GREATERTHAN     reduce using rule 39 (expressionStmt -> expressionStmt DIVIDES VALUE .)
    LESSTHAN        reduce using rule 39 (expressionStmt -> expressionStmt DIVIDES VALUE .)
    GREATEQ         reduce using rule 39 (expressionStmt -> expressionStmt DIVIDES VALUE .)
    LESSEQ          reduce using rule 39 (expressionStmt -> expressionStmt DIVIDES VALUE .)
    EQUALEQUAL      reduce using rule 39 (expressionStmt -> expressionStmt DIVIDES VALUE .)
    MODULUS         reduce using rule 39 (expressionStmt -> expressionStmt DIVIDES VALUE .)
    RPAREN          reduce using rule 39 (expressionStmt -> expressionStmt DIVIDES VALUE .)


state 87

    (40) expressionStmt -> expressionStmt EQUALS VALUE .

    SCOLON          reduce using rule 40 (expressionStmt -> expressionStmt EQUALS VALUE .)
    PLUS            reduce using rule 40 (expressionStmt -> expressionStmt EQUALS VALUE .)
    MINUS           reduce using rule 40 (expressionStmt -> expressionStmt EQUALS VALUE .)
    TIMES           reduce using rule 40 (expressionStmt -> expressionStmt EQUALS VALUE .)
    DIVIDES         reduce using rule 40 (expressionStmt -> expressionStmt EQUALS VALUE .)
    EQUALS          reduce using rule 40 (expressionStmt -> expressionStmt EQUALS VALUE .)
    GREATERTHAN     reduce using rule 40 (expressionStmt -> expressionStmt EQUALS VALUE .)
    LESSTHAN        reduce using rule 40 (expressionStmt -> expressionStmt EQUALS VALUE .)
    GREATEQ         reduce using rule 40 (expressionStmt -> expressionStmt EQUALS VALUE .)
    LESSEQ          reduce using rule 40 (expressionStmt -> expressionStmt EQUALS VALUE .)
    EQUALEQUAL      reduce using rule 40 (expressionStmt -> expressionStmt EQUALS VALUE .)
    MODULUS         reduce using rule 40 (expressionStmt -> expressionStmt EQUALS VALUE .)
    RPAREN          reduce using rule 40 (expressionStmt -> expressionStmt EQUALS VALUE .)


state 88

    (41) expressionStmt -> expressionStmt GREATERTHAN VALUE .

    SCOLON          reduce using rule 41 (expressionStmt -> expressionStmt GREATERTHAN VALUE .)
    PLUS            reduce using rule 41 (expressionStmt -> expressionStmt GREATERTHAN VALUE .)
    MINUS           reduce using rule 41 (expressionStmt -> expressionStmt GREATERTHAN VALUE .)
    TIMES           reduce using rule 41 (expressionStmt -> expressionStmt GREATERTHAN VALUE .)
    DIVIDES         reduce using rule 41 (expressionStmt -> expressionStmt GREATERTHAN VALUE .)
    EQUALS          reduce using rule 41 (expressionStmt -> expressionStmt GREATERTHAN VALUE .)
    GREATERTHAN     reduce using rule 41 (expressionStmt -> expressionStmt GREATERTHAN VALUE .)
    LESSTHAN        reduce using rule 41 (expressionStmt -> expressionStmt GREATERTHAN VALUE .)
    GREATEQ         reduce using rule 41 (expressionStmt -> expressionStmt GREATERTHAN VALUE .)
    LESSEQ          reduce using rule 41 (expressionStmt -> expressionStmt GREATERTHAN VALUE .)
    EQUALEQUAL      reduce using rule 41 (expressionStmt -> expressionStmt GREATERTHAN VALUE .)
    MODULUS         reduce using rule 41 (expressionStmt -> expressionStmt GREATERTHAN VALUE .)
    RPAREN          reduce using rule 41 (expressionStmt -> expressionStmt GREATERTHAN VALUE .)


state 89

    (42) expressionStmt -> expressionStmt LESSTHAN VALUE .

    SCOLON          reduce using rule 42 (expressionStmt -> expressionStmt LESSTHAN VALUE .)
    PLUS            reduce using rule 42 (expressionStmt -> expressionStmt LESSTHAN VALUE .)
    MINUS           reduce using rule 42 (expressionStmt -> expressionStmt LESSTHAN VALUE .)
    TIMES           reduce using rule 42 (expressionStmt -> expressionStmt LESSTHAN VALUE .)
    DIVIDES         reduce using rule 42 (expressionStmt -> expressionStmt LESSTHAN VALUE .)
    EQUALS          reduce using rule 42 (expressionStmt -> expressionStmt LESSTHAN VALUE .)
    GREATERTHAN     reduce using rule 42 (expressionStmt -> expressionStmt LESSTHAN VALUE .)
    LESSTHAN        reduce using rule 42 (expressionStmt -> expressionStmt LESSTHAN VALUE .)
    GREATEQ         reduce using rule 42 (expressionStmt -> expressionStmt LESSTHAN VALUE .)
    LESSEQ          reduce using rule 42 (expressionStmt -> expressionStmt LESSTHAN VALUE .)
    EQUALEQUAL      reduce using rule 42 (expressionStmt -> expressionStmt LESSTHAN VALUE .)
    MODULUS         reduce using rule 42 (expressionStmt -> expressionStmt LESSTHAN VALUE .)
    RPAREN          reduce using rule 42 (expressionStmt -> expressionStmt LESSTHAN VALUE .)


state 90

    (43) expressionStmt -> expressionStmt GREATEQ VALUE .

    SCOLON          reduce using rule 43 (expressionStmt -> expressionStmt GREATEQ VALUE .)
    PLUS            reduce using rule 43 (expressionStmt -> expressionStmt GREATEQ VALUE .)
    MINUS           reduce using rule 43 (expressionStmt -> expressionStmt GREATEQ VALUE .)
    TIMES           reduce using rule 43 (expressionStmt -> expressionStmt GREATEQ VALUE .)
    DIVIDES         reduce using rule 43 (expressionStmt -> expressionStmt GREATEQ VALUE .)
    EQUALS          reduce using rule 43 (expressionStmt -> expressionStmt GREATEQ VALUE .)
    GREATERTHAN     reduce using rule 43 (expressionStmt -> expressionStmt GREATEQ VALUE .)
    LESSTHAN        reduce using rule 43 (expressionStmt -> expressionStmt GREATEQ VALUE .)
    GREATEQ         reduce using rule 43 (expressionStmt -> expressionStmt GREATEQ VALUE .)
    LESSEQ          reduce using rule 43 (expressionStmt -> expressionStmt GREATEQ VALUE .)
    EQUALEQUAL      reduce using rule 43 (expressionStmt -> expressionStmt GREATEQ VALUE .)
    MODULUS         reduce using rule 43 (expressionStmt -> expressionStmt GREATEQ VALUE .)
    RPAREN          reduce using rule 43 (expressionStmt -> expressionStmt GREATEQ VALUE .)


state 91

    (44) expressionStmt -> expressionStmt LESSEQ VALUE .

    SCOLON          reduce using rule 44 (expressionStmt -> expressionStmt LESSEQ VALUE .)
    PLUS            reduce using rule 44 (expressionStmt -> expressionStmt LESSEQ VALUE .)
    MINUS           reduce using rule 44 (expressionStmt -> expressionStmt LESSEQ VALUE .)
    TIMES           reduce using rule 44 (expressionStmt -> expressionStmt LESSEQ VALUE .)
    DIVIDES         reduce using rule 44 (expressionStmt -> expressionStmt LESSEQ VALUE .)
    EQUALS          reduce using rule 44 (expressionStmt -> expressionStmt LESSEQ VALUE .)
    GREATERTHAN     reduce using rule 44 (expressionStmt -> expressionStmt LESSEQ VALUE .)
    LESSTHAN        reduce using rule 44 (expressionStmt -> expressionStmt LESSEQ VALUE .)
    GREATEQ         reduce using rule 44 (expressionStmt -> expressionStmt LESSEQ VALUE .)
    LESSEQ          reduce using rule 44 (expressionStmt -> expressionStmt LESSEQ VALUE .)
    EQUALEQUAL      reduce using rule 44 (expressionStmt -> expressionStmt LESSEQ VALUE .)
    MODULUS         reduce using rule 44 (expressionStmt -> expressionStmt LESSEQ VALUE .)
    RPAREN          reduce using rule 44 (expressionStmt -> expressionStmt LESSEQ VALUE .)


state 92

    (45) expressionStmt -> expressionStmt EQUALEQUAL VALUE .

    SCOLON          reduce using rule 45 (expressionStmt -> expressionStmt EQUALEQUAL VALUE .)
    PLUS            reduce using rule 45 (expressionStmt -> expressionStmt EQUALEQUAL VALUE .)
    MINUS           reduce using rule 45 (expressionStmt -> expressionStmt EQUALEQUAL VALUE .)
    TIMES           reduce using rule 45 (expressionStmt -> expressionStmt EQUALEQUAL VALUE .)
    DIVIDES         reduce using rule 45 (expressionStmt -> expressionStmt EQUALEQUAL VALUE .)
    EQUALS          reduce using rule 45 (expressionStmt -> expressionStmt EQUALEQUAL VALUE .)
    GREATERTHAN     reduce using rule 45 (expressionStmt -> expressionStmt EQUALEQUAL VALUE .)
    LESSTHAN        reduce using rule 45 (expressionStmt -> expressionStmt EQUALEQUAL VALUE .)
    GREATEQ         reduce using rule 45 (expressionStmt -> expressionStmt EQUALEQUAL VALUE .)
    LESSEQ          reduce using rule 45 (expressionStmt -> expressionStmt EQUALEQUAL VALUE .)
    EQUALEQUAL      reduce using rule 45 (expressionStmt -> expressionStmt EQUALEQUAL VALUE .)
    MODULUS         reduce using rule 45 (expressionStmt -> expressionStmt EQUALEQUAL VALUE .)
    RPAREN          reduce using rule 45 (expressionStmt -> expressionStmt EQUALEQUAL VALUE .)


state 93

    (46) expressionStmt -> expressionStmt MODULUS VALUE .

    SCOLON          reduce using rule 46 (expressionStmt -> expressionStmt MODULUS VALUE .)
    PLUS            reduce using rule 46 (expressionStmt -> expressionStmt MODULUS VALUE .)
    MINUS           reduce using rule 46 (expressionStmt -> expressionStmt MODULUS VALUE .)
    TIMES           reduce using rule 46 (expressionStmt -> expressionStmt MODULUS VALUE .)
    DIVIDES         reduce using rule 46 (expressionStmt -> expressionStmt MODULUS VALUE .)
    EQUALS          reduce using rule 46 (expressionStmt -> expressionStmt MODULUS VALUE .)
    GREATERTHAN     reduce using rule 46 (expressionStmt -> expressionStmt MODULUS VALUE .)
    LESSTHAN        reduce using rule 46 (expressionStmt -> expressionStmt MODULUS VALUE .)
    GREATEQ         reduce using rule 46 (expressionStmt -> expressionStmt MODULUS VALUE .)
    LESSEQ          reduce using rule 46 (expressionStmt -> expressionStmt MODULUS VALUE .)
    EQUALEQUAL      reduce using rule 46 (expressionStmt -> expressionStmt MODULUS VALUE .)
    MODULUS         reduce using rule 46 (expressionStmt -> expressionStmt MODULUS VALUE .)
    RPAREN          reduce using rule 46 (expressionStmt -> expressionStmt MODULUS VALUE .)


state 94

    (35) statement -> RETURN VALUE SCOLON .

    SCOLON          reduce using rule 35 (statement -> RETURN VALUE SCOLON .)
    NAME            reduce using rule 35 (statement -> RETURN VALUE SCOLON .)
    RETURN          reduce using rule 35 (statement -> RETURN VALUE SCOLON .)
    LFPAREN         reduce using rule 35 (statement -> RETURN VALUE SCOLON .)
    IF              reduce using rule 35 (statement -> RETURN VALUE SCOLON .)
    WHILE           reduce using rule 35 (statement -> RETURN VALUE SCOLON .)
    DO              reduce using rule 35 (statement -> RETURN VALUE SCOLON .)
    FOR             reduce using rule 35 (statement -> RETURN VALUE SCOLON .)
    VALUE           reduce using rule 35 (statement -> RETURN VALUE SCOLON .)
    INT             reduce using rule 35 (statement -> RETURN VALUE SCOLON .)
    BOOL            reduce using rule 35 (statement -> RETURN VALUE SCOLON .)
    CHAR            reduce using rule 35 (statement -> RETURN VALUE SCOLON .)
    FLOAT           reduce using rule 35 (statement -> RETURN VALUE SCOLON .)
    RFPAREN         reduce using rule 35 (statement -> RETURN VALUE SCOLON .)
    ELSE            reduce using rule 35 (statement -> RETURN VALUE SCOLON .)


state 95

    (48) selectionStmt -> IF LPAREN expressionStmt . RPAREN statement ELSE statement
    (49) selectionStmt -> IF LPAREN expressionStmt . RPAREN statement
    (36) expressionStmt -> expressionStmt . PLUS VALUE
    (37) expressionStmt -> expressionStmt . MINUS VALUE
    (38) expressionStmt -> expressionStmt . TIMES VALUE
    (39) expressionStmt -> expressionStmt . DIVIDES VALUE
    (40) expressionStmt -> expressionStmt . EQUALS VALUE
    (41) expressionStmt -> expressionStmt . GREATERTHAN VALUE
    (42) expressionStmt -> expressionStmt . LESSTHAN VALUE
    (43) expressionStmt -> expressionStmt . GREATEQ VALUE
    (44) expressionStmt -> expressionStmt . LESSEQ VALUE
    (45) expressionStmt -> expressionStmt . EQUALEQUAL VALUE
    (46) expressionStmt -> expressionStmt . MODULUS VALUE

    RPAREN          shift and go to state 99
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    TIMES           shift and go to state 64
    DIVIDES         shift and go to state 65
    EQUALS          shift and go to state 66
    GREATERTHAN     shift and go to state 67
    LESSTHAN        shift and go to state 68
    GREATEQ         shift and go to state 69
    LESSEQ          shift and go to state 70
    EQUALEQUAL      shift and go to state 71
    MODULUS         shift and go to state 72


state 96

    (50) iterationStmt -> WHILE LPAREN expressionStmt . RPAREN statement
    (36) expressionStmt -> expressionStmt . PLUS VALUE
    (37) expressionStmt -> expressionStmt . MINUS VALUE
    (38) expressionStmt -> expressionStmt . TIMES VALUE
    (39) expressionStmt -> expressionStmt . DIVIDES VALUE
    (40) expressionStmt -> expressionStmt . EQUALS VALUE
    (41) expressionStmt -> expressionStmt . GREATERTHAN VALUE
    (42) expressionStmt -> expressionStmt . LESSTHAN VALUE
    (43) expressionStmt -> expressionStmt . GREATEQ VALUE
    (44) expressionStmt -> expressionStmt . LESSEQ VALUE
    (45) expressionStmt -> expressionStmt . EQUALEQUAL VALUE
    (46) expressionStmt -> expressionStmt . MODULUS VALUE

    RPAREN          shift and go to state 100
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    TIMES           shift and go to state 64
    DIVIDES         shift and go to state 65
    EQUALS          shift and go to state 66
    GREATERTHAN     shift and go to state 67
    LESSTHAN        shift and go to state 68
    GREATEQ         shift and go to state 69
    LESSEQ          shift and go to state 70
    EQUALEQUAL      shift and go to state 71
    MODULUS         shift and go to state 72


state 97

    (51) iterationStmt -> DO statement WHILE . LPAREN expressionStmt RPAREN SCOLON

    LPAREN          shift and go to state 101


state 98

    (52) iterationStmt -> FOR LPAREN varDeclaration . SCOLON forcondition SCOLON forchange RPAREN statement

    SCOLON          shift and go to state 102


state 99

    (48) selectionStmt -> IF LPAREN expressionStmt RPAREN . statement ELSE statement
    (49) selectionStmt -> IF LPAREN expressionStmt RPAREN . statement
    (27) statement -> . cstatement
    (28) statement -> . selectionStmt
    (29) statement -> . iterationStmt
    (30) statement -> . NAME SCOLON
    (31) statement -> . NAME statement
    (32) statement -> . varDeclaration statement
    (33) statement -> . expressionStmt SCOLON statement
    (34) statement -> . expressionStmt SCOLON
    (35) statement -> . RETURN VALUE SCOLON
    (25) cstatement -> . LFPAREN RFPAREN
    (26) cstatement -> . LFPAREN blockitemlist RFPAREN
    (48) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement ELSE statement
    (49) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement
    (50) iterationStmt -> . WHILE LPAREN expressionStmt RPAREN statement
    (51) iterationStmt -> . DO statement WHILE LPAREN expressionStmt RPAREN SCOLON
    (52) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

    NAME            shift and go to state 33
    RETURN          shift and go to state 42
    LFPAREN         shift and go to state 34
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    VALUE           shift and go to state 43
    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

    expressionStmt                 shift and go to state 41
    statement                      shift and go to state 103
    cstatement                     shift and go to state 37
    selectionStmt                  shift and go to state 38
    iterationStmt                  shift and go to state 39
    varDeclaration                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 100

    (50) iterationStmt -> WHILE LPAREN expressionStmt RPAREN . statement
    (27) statement -> . cstatement
    (28) statement -> . selectionStmt
    (29) statement -> . iterationStmt
    (30) statement -> . NAME SCOLON
    (31) statement -> . NAME statement
    (32) statement -> . varDeclaration statement
    (33) statement -> . expressionStmt SCOLON statement
    (34) statement -> . expressionStmt SCOLON
    (35) statement -> . RETURN VALUE SCOLON
    (25) cstatement -> . LFPAREN RFPAREN
    (26) cstatement -> . LFPAREN blockitemlist RFPAREN
    (48) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement ELSE statement
    (49) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement
    (50) iterationStmt -> . WHILE LPAREN expressionStmt RPAREN statement
    (51) iterationStmt -> . DO statement WHILE LPAREN expressionStmt RPAREN SCOLON
    (52) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

    NAME            shift and go to state 33
    RETURN          shift and go to state 42
    LFPAREN         shift and go to state 34
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    VALUE           shift and go to state 43
    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

    expressionStmt                 shift and go to state 41
    statement                      shift and go to state 104
    cstatement                     shift and go to state 37
    selectionStmt                  shift and go to state 38
    iterationStmt                  shift and go to state 39
    varDeclaration                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 101

    (51) iterationStmt -> DO statement WHILE LPAREN . expressionStmt RPAREN SCOLON
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE

    VALUE           shift and go to state 43

    expressionStmt                 shift and go to state 105

state 102

    (52) iterationStmt -> FOR LPAREN varDeclaration SCOLON . forcondition SCOLON forchange RPAREN statement
    (53) forcondition -> . NAME EQUALS NAME
    (54) forcondition -> . NAME GREATERTHAN NAME
    (55) forcondition -> . NAME LESSTHAN NAME
    (56) forcondition -> . NAME GREATEQ NAME
    (57) forcondition -> . NAME LESSEQ NAME

    NAME            shift and go to state 107

    forcondition                   shift and go to state 106

state 103

    (48) selectionStmt -> IF LPAREN expressionStmt RPAREN statement . ELSE statement
    (49) selectionStmt -> IF LPAREN expressionStmt RPAREN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 108
    SCOLON          reduce using rule 49 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement .)
    NAME            reduce using rule 49 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement .)
    RETURN          reduce using rule 49 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement .)
    LFPAREN         reduce using rule 49 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement .)
    IF              reduce using rule 49 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement .)
    WHILE           reduce using rule 49 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement .)
    DO              reduce using rule 49 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement .)
    FOR             reduce using rule 49 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement .)
    VALUE           reduce using rule 49 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement .)
    INT             reduce using rule 49 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement .)
    BOOL            reduce using rule 49 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement .)
    CHAR            reduce using rule 49 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement .)
    FLOAT           reduce using rule 49 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement .)
    RFPAREN         reduce using rule 49 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement .)

  ! ELSE            [ reduce using rule 49 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement .) ]


state 104

    (50) iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement .

    SCOLON          reduce using rule 50 (iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement .)
    NAME            reduce using rule 50 (iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement .)
    RETURN          reduce using rule 50 (iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement .)
    LFPAREN         reduce using rule 50 (iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement .)
    IF              reduce using rule 50 (iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement .)
    WHILE           reduce using rule 50 (iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement .)
    DO              reduce using rule 50 (iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement .)
    FOR             reduce using rule 50 (iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement .)
    VALUE           reduce using rule 50 (iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement .)
    INT             reduce using rule 50 (iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement .)
    BOOL            reduce using rule 50 (iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement .)
    CHAR            reduce using rule 50 (iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement .)
    FLOAT           reduce using rule 50 (iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement .)
    RFPAREN         reduce using rule 50 (iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement .)
    ELSE            reduce using rule 50 (iterationStmt -> WHILE LPAREN expressionStmt RPAREN statement .)


state 105

    (51) iterationStmt -> DO statement WHILE LPAREN expressionStmt . RPAREN SCOLON
    (36) expressionStmt -> expressionStmt . PLUS VALUE
    (37) expressionStmt -> expressionStmt . MINUS VALUE
    (38) expressionStmt -> expressionStmt . TIMES VALUE
    (39) expressionStmt -> expressionStmt . DIVIDES VALUE
    (40) expressionStmt -> expressionStmt . EQUALS VALUE
    (41) expressionStmt -> expressionStmt . GREATERTHAN VALUE
    (42) expressionStmt -> expressionStmt . LESSTHAN VALUE
    (43) expressionStmt -> expressionStmt . GREATEQ VALUE
    (44) expressionStmt -> expressionStmt . LESSEQ VALUE
    (45) expressionStmt -> expressionStmt . EQUALEQUAL VALUE
    (46) expressionStmt -> expressionStmt . MODULUS VALUE

    RPAREN          shift and go to state 109
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    TIMES           shift and go to state 64
    DIVIDES         shift and go to state 65
    EQUALS          shift and go to state 66
    GREATERTHAN     shift and go to state 67
    LESSTHAN        shift and go to state 68
    GREATEQ         shift and go to state 69
    LESSEQ          shift and go to state 70
    EQUALEQUAL      shift and go to state 71
    MODULUS         shift and go to state 72


state 106

    (52) iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition . SCOLON forchange RPAREN statement

    SCOLON          shift and go to state 110


state 107

    (53) forcondition -> NAME . EQUALS NAME
    (54) forcondition -> NAME . GREATERTHAN NAME
    (55) forcondition -> NAME . LESSTHAN NAME
    (56) forcondition -> NAME . GREATEQ NAME
    (57) forcondition -> NAME . LESSEQ NAME

    EQUALS          shift and go to state 111
    GREATERTHAN     shift and go to state 112
    LESSTHAN        shift and go to state 113
    GREATEQ         shift and go to state 114
    LESSEQ          shift and go to state 115


state 108

    (48) selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE . statement
    (27) statement -> . cstatement
    (28) statement -> . selectionStmt
    (29) statement -> . iterationStmt
    (30) statement -> . NAME SCOLON
    (31) statement -> . NAME statement
    (32) statement -> . varDeclaration statement
    (33) statement -> . expressionStmt SCOLON statement
    (34) statement -> . expressionStmt SCOLON
    (35) statement -> . RETURN VALUE SCOLON
    (25) cstatement -> . LFPAREN RFPAREN
    (26) cstatement -> . LFPAREN blockitemlist RFPAREN
    (48) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement ELSE statement
    (49) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement
    (50) iterationStmt -> . WHILE LPAREN expressionStmt RPAREN statement
    (51) iterationStmt -> . DO statement WHILE LPAREN expressionStmt RPAREN SCOLON
    (52) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

    NAME            shift and go to state 33
    RETURN          shift and go to state 42
    LFPAREN         shift and go to state 34
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    VALUE           shift and go to state 43
    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

    expressionStmt                 shift and go to state 41
    statement                      shift and go to state 116
    cstatement                     shift and go to state 37
    selectionStmt                  shift and go to state 38
    iterationStmt                  shift and go to state 39
    varDeclaration                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 109

    (51) iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN . SCOLON

    SCOLON          shift and go to state 117


state 110

    (52) iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON . forchange RPAREN statement
    (58) forchange -> . NAME PLUS PLUS
    (59) forchange -> . NAME MINUS MINUS
    (60) forchange -> . expressionStmt
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE

    NAME            shift and go to state 119
    VALUE           shift and go to state 43

    forchange                      shift and go to state 118
    expressionStmt                 shift and go to state 120

state 111

    (53) forcondition -> NAME EQUALS . NAME

    NAME            shift and go to state 121


state 112

    (54) forcondition -> NAME GREATERTHAN . NAME

    NAME            shift and go to state 122


state 113

    (55) forcondition -> NAME LESSTHAN . NAME

    NAME            shift and go to state 123


state 114

    (56) forcondition -> NAME GREATEQ . NAME

    NAME            shift and go to state 124


state 115

    (57) forcondition -> NAME LESSEQ . NAME

    NAME            shift and go to state 125


state 116

    (48) selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement .

    SCOLON          reduce using rule 48 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement .)
    NAME            reduce using rule 48 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement .)
    RETURN          reduce using rule 48 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement .)
    LFPAREN         reduce using rule 48 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement .)
    IF              reduce using rule 48 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement .)
    WHILE           reduce using rule 48 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement .)
    DO              reduce using rule 48 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement .)
    FOR             reduce using rule 48 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement .)
    VALUE           reduce using rule 48 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement .)
    INT             reduce using rule 48 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement .)
    BOOL            reduce using rule 48 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement .)
    CHAR            reduce using rule 48 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 48 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement .)
    RFPAREN         reduce using rule 48 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement .)
    ELSE            reduce using rule 48 (selectionStmt -> IF LPAREN expressionStmt RPAREN statement ELSE statement .)


state 117

    (51) iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON .

    SCOLON          reduce using rule 51 (iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON .)
    NAME            reduce using rule 51 (iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON .)
    RETURN          reduce using rule 51 (iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON .)
    LFPAREN         reduce using rule 51 (iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON .)
    IF              reduce using rule 51 (iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON .)
    WHILE           reduce using rule 51 (iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON .)
    DO              reduce using rule 51 (iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON .)
    FOR             reduce using rule 51 (iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON .)
    VALUE           reduce using rule 51 (iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON .)
    INT             reduce using rule 51 (iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON .)
    BOOL            reduce using rule 51 (iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON .)
    CHAR            reduce using rule 51 (iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON .)
    FLOAT           reduce using rule 51 (iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON .)
    RFPAREN         reduce using rule 51 (iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON .)
    ELSE            reduce using rule 51 (iterationStmt -> DO statement WHILE LPAREN expressionStmt RPAREN SCOLON .)


state 118

    (52) iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange . RPAREN statement

    RPAREN          shift and go to state 126


state 119

    (58) forchange -> NAME . PLUS PLUS
    (59) forchange -> NAME . MINUS MINUS

    PLUS            shift and go to state 127
    MINUS           shift and go to state 128


state 120

    (60) forchange -> expressionStmt .
    (36) expressionStmt -> expressionStmt . PLUS VALUE
    (37) expressionStmt -> expressionStmt . MINUS VALUE
    (38) expressionStmt -> expressionStmt . TIMES VALUE
    (39) expressionStmt -> expressionStmt . DIVIDES VALUE
    (40) expressionStmt -> expressionStmt . EQUALS VALUE
    (41) expressionStmt -> expressionStmt . GREATERTHAN VALUE
    (42) expressionStmt -> expressionStmt . LESSTHAN VALUE
    (43) expressionStmt -> expressionStmt . GREATEQ VALUE
    (44) expressionStmt -> expressionStmt . LESSEQ VALUE
    (45) expressionStmt -> expressionStmt . EQUALEQUAL VALUE
    (46) expressionStmt -> expressionStmt . MODULUS VALUE

    RPAREN          reduce using rule 60 (forchange -> expressionStmt .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    TIMES           shift and go to state 64
    DIVIDES         shift and go to state 65
    EQUALS          shift and go to state 66
    GREATERTHAN     shift and go to state 67
    LESSTHAN        shift and go to state 68
    GREATEQ         shift and go to state 69
    LESSEQ          shift and go to state 70
    EQUALEQUAL      shift and go to state 71
    MODULUS         shift and go to state 72


state 121

    (53) forcondition -> NAME EQUALS NAME .

    SCOLON          reduce using rule 53 (forcondition -> NAME EQUALS NAME .)


state 122

    (54) forcondition -> NAME GREATERTHAN NAME .

    SCOLON          reduce using rule 54 (forcondition -> NAME GREATERTHAN NAME .)


state 123

    (55) forcondition -> NAME LESSTHAN NAME .

    SCOLON          reduce using rule 55 (forcondition -> NAME LESSTHAN NAME .)


state 124

    (56) forcondition -> NAME GREATEQ NAME .

    SCOLON          reduce using rule 56 (forcondition -> NAME GREATEQ NAME .)


state 125

    (57) forcondition -> NAME LESSEQ NAME .

    SCOLON          reduce using rule 57 (forcondition -> NAME LESSEQ NAME .)


state 126

    (52) iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN . statement
    (27) statement -> . cstatement
    (28) statement -> . selectionStmt
    (29) statement -> . iterationStmt
    (30) statement -> . NAME SCOLON
    (31) statement -> . NAME statement
    (32) statement -> . varDeclaration statement
    (33) statement -> . expressionStmt SCOLON statement
    (34) statement -> . expressionStmt SCOLON
    (35) statement -> . RETURN VALUE SCOLON
    (25) cstatement -> . LFPAREN RFPAREN
    (26) cstatement -> . LFPAREN blockitemlist RFPAREN
    (48) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement ELSE statement
    (49) selectionStmt -> . IF LPAREN expressionStmt RPAREN statement
    (50) iterationStmt -> . WHILE LPAREN expressionStmt RPAREN statement
    (51) iterationStmt -> . DO statement WHILE LPAREN expressionStmt RPAREN SCOLON
    (52) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (36) expressionStmt -> . expressionStmt PLUS VALUE
    (37) expressionStmt -> . expressionStmt MINUS VALUE
    (38) expressionStmt -> . expressionStmt TIMES VALUE
    (39) expressionStmt -> . expressionStmt DIVIDES VALUE
    (40) expressionStmt -> . expressionStmt EQUALS VALUE
    (41) expressionStmt -> . expressionStmt GREATERTHAN VALUE
    (42) expressionStmt -> . expressionStmt LESSTHAN VALUE
    (43) expressionStmt -> . expressionStmt GREATEQ VALUE
    (44) expressionStmt -> . expressionStmt LESSEQ VALUE
    (45) expressionStmt -> . expressionStmt EQUALEQUAL VALUE
    (46) expressionStmt -> . expressionStmt MODULUS VALUE
    (47) expressionStmt -> . VALUE
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (12) typeSpecifier -> . FLOAT

    NAME            shift and go to state 33
    RETURN          shift and go to state 42
    LFPAREN         shift and go to state 34
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    VALUE           shift and go to state 43
    INT             shift and go to state 25
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    FLOAT           shift and go to state 11

    varDeclaration                 shift and go to state 40
    statement                      shift and go to state 129
    cstatement                     shift and go to state 37
    selectionStmt                  shift and go to state 38
    iterationStmt                  shift and go to state 39
    expressionStmt                 shift and go to state 41
    typeSpecifier                  shift and go to state 6

state 127

    (58) forchange -> NAME PLUS . PLUS

    PLUS            shift and go to state 130


state 128

    (59) forchange -> NAME MINUS . MINUS

    MINUS           shift and go to state 131


state 129

    (52) iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .

    SCOLON          reduce using rule 52 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    NAME            reduce using rule 52 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    RETURN          reduce using rule 52 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    LFPAREN         reduce using rule 52 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    IF              reduce using rule 52 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    WHILE           reduce using rule 52 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    DO              reduce using rule 52 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    FOR             reduce using rule 52 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    VALUE           reduce using rule 52 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    INT             reduce using rule 52 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    BOOL            reduce using rule 52 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    CHAR            reduce using rule 52 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    FLOAT           reduce using rule 52 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    RFPAREN         reduce using rule 52 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    ELSE            reduce using rule 52 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)


state 130

    (58) forchange -> NAME PLUS PLUS .

    RPAREN          reduce using rule 58 (forchange -> NAME PLUS PLUS .)


state 131

    (59) forchange -> NAME MINUS MINUS .

    RPAREN          reduce using rule 59 (forchange -> NAME MINUS MINUS .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NAME in state 8 resolved as shift
WARNING: shift/reduce conflict for NAME in state 56 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 56 resolved as shift
WARNING: shift/reduce conflict for LFPAREN in state 56 resolved as shift
WARNING: shift/reduce conflict for IF in state 56 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 56 resolved as shift
WARNING: shift/reduce conflict for DO in state 56 resolved as shift
WARNING: shift/reduce conflict for FOR in state 56 resolved as shift
WARNING: shift/reduce conflict for VALUE in state 56 resolved as shift
WARNING: shift/reduce conflict for INT in state 56 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 56 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 56 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 56 resolved as shift
WARNING: shift/reduce conflict for NAME in state 61 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 61 resolved as shift
WARNING: shift/reduce conflict for LFPAREN in state 61 resolved as shift
WARNING: shift/reduce conflict for IF in state 61 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 61 resolved as shift
WARNING: shift/reduce conflict for DO in state 61 resolved as shift
WARNING: shift/reduce conflict for FOR in state 61 resolved as shift
WARNING: shift/reduce conflict for VALUE in state 61 resolved as shift
WARNING: shift/reduce conflict for INT in state 61 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 61 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 61 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 61 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 103 resolved as shift
