Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    EQUALEQUAL
    LSQUARE
    MODULUS
    RSQUARE
    STRING
    TAB

Grammar

Rule 0     S' -> start
Rule 1     start -> declarationList
Rule 2     declarationList -> declaration
Rule 3     declarationList -> declarationList declaration
Rule 4     declaration -> varDeclaration
Rule 5     declaration -> funcdef
Rule 6     varDeclaration -> typeSpecifier NAME SCOLON
Rule 7     varDeclaration -> typeSpecifier NAME EQUALS NAME
Rule 8     varDeclaration -> typeSpecifier NAME EQUALS NUMBER
Rule 9     typeSpecifier -> INT
Rule 10    typeSpecifier -> BOOL
Rule 11    typeSpecifier -> CHAR
Rule 12    funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN
Rule 13    funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN
Rule 14    parameters -> typeSpecifier NAME
Rule 15    parameters -> typeSpecifier NAME COMMA parameters
Rule 16    parameters -> empty
Rule 17    funcbody -> statement
Rule 18    funcbody -> statement funcbody
Rule 19    funcbody -> statement SCOLON funcbody
Rule 20    blockitemlist -> blockitem
Rule 21    blockitemlist -> blockitemlist blockitem
Rule 22    blockitem -> statement
Rule 23    blockitem -> varDeclaration
Rule 24    cstatement -> LFPAREN RFPAREN
Rule 25    cstatement -> LFPAREN blockitemlist RFPAREN
Rule 26    statement -> cstatement
Rule 27    statement -> selectionStmt
Rule 28    statement -> iterationStmt
Rule 29    statement -> NAME SCOLON
Rule 30    statement -> NAME statement
Rule 31    statement -> varDeclaration statement
Rule 32    statement -> expressionStmt SCOLON statement
Rule 33    statement -> expressionStmt SCOLON
Rule 34    expressionStmt -> NAME PLUS NAME
Rule 35    expressionStmt -> NAME MINUS NAME
Rule 36    expressionStmt -> NAME TIMES NAME
Rule 37    expressionStmt -> NAME DIVIDES NAME
Rule 38    expressionStmt -> NAME EQUALS NAME
Rule 39    expressionStmt -> NAME GREATERTHAN NAME
Rule 40    expressionStmt -> NAME LESSTHAN NAME
Rule 41    expressionStmt -> NAME GREATEQ NAME
Rule 42    expressionStmt -> NAME LESSEQ NAME
Rule 43    expressionStmt -> NAME EQUALS expressionStmt
Rule 44    selectionStmt -> IF LPAREN simpleexpression RPAREN statement ELSE statement
Rule 45    selectionStmt -> IF LPAREN simpleexpression RPAREN statement
Rule 46    iterationStmt -> WHILE LPAREN simpleexpression RPAREN statement
Rule 47    iterationStmt -> DO statement WHILE LPAREN simpleexpression RPAREN SCOLON
Rule 48    iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
Rule 49    forcondition -> NAME EQUALS NAME
Rule 50    forcondition -> NAME GREATERTHAN NAME
Rule 51    forcondition -> NAME LESSTHAN NAME
Rule 52    forcondition -> NAME GREATEQ NAME
Rule 53    forcondition -> NAME LESSEQ NAME
Rule 54    forchange -> NAME PLUS PLUS
Rule 55    forchange -> NAME MINUS MINUS
Rule 56    forchange -> expressionStmt
Rule 57    simpleexpression -> NAME
Rule 58    empty -> <empty>

Terminals, with rules where they appear

BOOL                 : 10
CHAR                 : 11
COLON                : 
COMMA                : 15
DIVIDES              : 37
DO                   : 47
ELSE                 : 44
EQUALEQUAL           : 
EQUALS               : 7 8 38 43 49
FOR                  : 48
GREATEQ              : 41 52
GREATERTHAN          : 39 50
IF                   : 44 45
INT                  : 9 13
LESSEQ               : 42 53
LESSTHAN             : 40 51
LFPAREN              : 12 13 24 25
LPAREN               : 12 13 44 45 46 47 48
LSQUARE              : 
MINUS                : 35 55 55
MODULUS              : 
NAME                 : 6 7 7 8 12 13 14 15 29 30 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 49 49 50 50 51 51 52 52 53 53 54 55 57
NUMBER               : 8
PLUS                 : 34 54 54
RFPAREN              : 12 13 24 25
RPAREN               : 12 13 44 45 46 47 48
RSQUARE              : 
SCOLON               : 6 19 29 32 33 47 48 48
STRING               : 
TAB                  : 
TIMES                : 36
VOID                 : 12
WHILE                : 46 47
error                : 

Nonterminals, with rules where they appear

blockitem            : 20 21
blockitemlist        : 21 25
cstatement           : 26
declaration          : 2 3
declarationList      : 1 3
empty                : 16
expressionStmt       : 32 33 43 56
forchange            : 48
forcondition         : 48
funcbody             : 12 13 18 19
funcdef              : 5
iterationStmt        : 28
parameters           : 12 13 15
selectionStmt        : 27
simpleexpression     : 44 45 46 47
start                : 0
statement            : 17 18 19 22 30 31 32 44 44 45 46 47 48
typeSpecifier        : 6 7 8 14 15
varDeclaration       : 4 23 31 48

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . declarationList
    (2) declarationList -> . declaration
    (3) declarationList -> . declarationList declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . funcdef
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (12) funcdef -> . VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN
    (13) funcdef -> . INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

    VOID            shift and go to state 7
    INT             shift and go to state 8
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    start                          shift and go to state 1
    declarationList                shift and go to state 2
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4
    funcdef                        shift and go to state 5
    typeSpecifier                  shift and go to state 6

state 1

    (0) S' -> start .



state 2

    (1) start -> declarationList .
    (3) declarationList -> declarationList . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . funcdef
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (12) funcdef -> . VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN
    (13) funcdef -> . INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

    $end            reduce using rule 1 (start -> declarationList .)
    VOID            shift and go to state 7
    INT             shift and go to state 8
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    declaration                    shift and go to state 11
    varDeclaration                 shift and go to state 4
    funcdef                        shift and go to state 5
    typeSpecifier                  shift and go to state 6

state 3

    (2) declarationList -> declaration .

    VOID            reduce using rule 2 (declarationList -> declaration .)
    INT             reduce using rule 2 (declarationList -> declaration .)
    BOOL            reduce using rule 2 (declarationList -> declaration .)
    CHAR            reduce using rule 2 (declarationList -> declaration .)
    $end            reduce using rule 2 (declarationList -> declaration .)


state 4

    (4) declaration -> varDeclaration .

    VOID            reduce using rule 4 (declaration -> varDeclaration .)
    INT             reduce using rule 4 (declaration -> varDeclaration .)
    BOOL            reduce using rule 4 (declaration -> varDeclaration .)
    CHAR            reduce using rule 4 (declaration -> varDeclaration .)
    $end            reduce using rule 4 (declaration -> varDeclaration .)


state 5

    (5) declaration -> funcdef .

    VOID            reduce using rule 5 (declaration -> funcdef .)
    INT             reduce using rule 5 (declaration -> funcdef .)
    BOOL            reduce using rule 5 (declaration -> funcdef .)
    CHAR            reduce using rule 5 (declaration -> funcdef .)
    $end            reduce using rule 5 (declaration -> funcdef .)


state 6

    (6) varDeclaration -> typeSpecifier . NAME SCOLON
    (7) varDeclaration -> typeSpecifier . NAME EQUALS NAME
    (8) varDeclaration -> typeSpecifier . NAME EQUALS NUMBER

    NAME            shift and go to state 12


state 7

    (12) funcdef -> VOID . NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN

    NAME            shift and go to state 13


state 8

    (13) funcdef -> INT . NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN
    (9) typeSpecifier -> INT .

  ! shift/reduce conflict for NAME resolved as shift
    NAME            shift and go to state 14

  ! NAME            [ reduce using rule 9 (typeSpecifier -> INT .) ]


state 9

    (10) typeSpecifier -> BOOL .

    NAME            reduce using rule 10 (typeSpecifier -> BOOL .)


state 10

    (11) typeSpecifier -> CHAR .

    NAME            reduce using rule 11 (typeSpecifier -> CHAR .)


state 11

    (3) declarationList -> declarationList declaration .

    VOID            reduce using rule 3 (declarationList -> declarationList declaration .)
    INT             reduce using rule 3 (declarationList -> declarationList declaration .)
    BOOL            reduce using rule 3 (declarationList -> declarationList declaration .)
    CHAR            reduce using rule 3 (declarationList -> declarationList declaration .)
    $end            reduce using rule 3 (declarationList -> declarationList declaration .)


state 12

    (6) varDeclaration -> typeSpecifier NAME . SCOLON
    (7) varDeclaration -> typeSpecifier NAME . EQUALS NAME
    (8) varDeclaration -> typeSpecifier NAME . EQUALS NUMBER

    SCOLON          shift and go to state 15
    EQUALS          shift and go to state 16


state 13

    (12) funcdef -> VOID NAME . LPAREN parameters RPAREN LFPAREN funcbody RFPAREN

    LPAREN          shift and go to state 17


state 14

    (13) funcdef -> INT NAME . LPAREN parameters RPAREN LFPAREN funcbody RFPAREN

    LPAREN          shift and go to state 18


state 15

    (6) varDeclaration -> typeSpecifier NAME SCOLON .

    VOID            reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    INT             reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    BOOL            reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    CHAR            reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    $end            reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    NAME            reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    LFPAREN         reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    IF              reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    WHILE           reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    DO              reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    FOR             reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    RFPAREN         reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)
    SCOLON          reduce using rule 6 (varDeclaration -> typeSpecifier NAME SCOLON .)


state 16

    (7) varDeclaration -> typeSpecifier NAME EQUALS . NAME
    (8) varDeclaration -> typeSpecifier NAME EQUALS . NUMBER

    NAME            shift and go to state 19
    NUMBER          shift and go to state 20


state 17

    (12) funcdef -> VOID NAME LPAREN . parameters RPAREN LFPAREN funcbody RFPAREN
    (14) parameters -> . typeSpecifier NAME
    (15) parameters -> . typeSpecifier NAME COMMA parameters
    (16) parameters -> . empty
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (58) empty -> .

    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    RPAREN          reduce using rule 58 (empty -> .)

    parameters                     shift and go to state 21
    typeSpecifier                  shift and go to state 22
    empty                          shift and go to state 23

state 18

    (13) funcdef -> INT NAME LPAREN . parameters RPAREN LFPAREN funcbody RFPAREN
    (14) parameters -> . typeSpecifier NAME
    (15) parameters -> . typeSpecifier NAME COMMA parameters
    (16) parameters -> . empty
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (58) empty -> .

    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    RPAREN          reduce using rule 58 (empty -> .)

    parameters                     shift and go to state 25
    typeSpecifier                  shift and go to state 22
    empty                          shift and go to state 23

state 19

    (7) varDeclaration -> typeSpecifier NAME EQUALS NAME .

    VOID            reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    INT             reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    BOOL            reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    CHAR            reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    $end            reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    NAME            reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    LFPAREN         reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    IF              reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    WHILE           reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    DO              reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    FOR             reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    RFPAREN         reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)
    SCOLON          reduce using rule 7 (varDeclaration -> typeSpecifier NAME EQUALS NAME .)


state 20

    (8) varDeclaration -> typeSpecifier NAME EQUALS NUMBER .

    VOID            reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    INT             reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    BOOL            reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    CHAR            reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    $end            reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    NAME            reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    LFPAREN         reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    IF              reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    WHILE           reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    DO              reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    FOR             reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    RFPAREN         reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)
    SCOLON          reduce using rule 8 (varDeclaration -> typeSpecifier NAME EQUALS NUMBER .)


state 21

    (12) funcdef -> VOID NAME LPAREN parameters . RPAREN LFPAREN funcbody RFPAREN

    RPAREN          shift and go to state 26


state 22

    (14) parameters -> typeSpecifier . NAME
    (15) parameters -> typeSpecifier . NAME COMMA parameters

    NAME            shift and go to state 27


state 23

    (16) parameters -> empty .

    RPAREN          reduce using rule 16 (parameters -> empty .)


state 24

    (9) typeSpecifier -> INT .

    NAME            reduce using rule 9 (typeSpecifier -> INT .)


state 25

    (13) funcdef -> INT NAME LPAREN parameters . RPAREN LFPAREN funcbody RFPAREN

    RPAREN          shift and go to state 28


state 26

    (12) funcdef -> VOID NAME LPAREN parameters RPAREN . LFPAREN funcbody RFPAREN

    LFPAREN         shift and go to state 29


state 27

    (14) parameters -> typeSpecifier NAME .
    (15) parameters -> typeSpecifier NAME . COMMA parameters

    RPAREN          reduce using rule 14 (parameters -> typeSpecifier NAME .)
    COMMA           shift and go to state 30


state 28

    (13) funcdef -> INT NAME LPAREN parameters RPAREN . LFPAREN funcbody RFPAREN

    LFPAREN         shift and go to state 31


state 29

    (12) funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN . funcbody RFPAREN
    (17) funcbody -> . statement
    (18) funcbody -> . statement funcbody
    (19) funcbody -> . statement SCOLON funcbody
    (26) statement -> . cstatement
    (27) statement -> . selectionStmt
    (28) statement -> . iterationStmt
    (29) statement -> . NAME SCOLON
    (30) statement -> . NAME statement
    (31) statement -> . varDeclaration statement
    (32) statement -> . expressionStmt SCOLON statement
    (33) statement -> . expressionStmt SCOLON
    (24) cstatement -> . LFPAREN RFPAREN
    (25) cstatement -> . LFPAREN blockitemlist RFPAREN
    (44) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement ELSE statement
    (45) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement
    (46) iterationStmt -> . WHILE LPAREN simpleexpression RPAREN statement
    (47) iterationStmt -> . DO statement WHILE LPAREN simpleexpression RPAREN SCOLON
    (48) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (34) expressionStmt -> . NAME PLUS NAME
    (35) expressionStmt -> . NAME MINUS NAME
    (36) expressionStmt -> . NAME TIMES NAME
    (37) expressionStmt -> . NAME DIVIDES NAME
    (38) expressionStmt -> . NAME EQUALS NAME
    (39) expressionStmt -> . NAME GREATERTHAN NAME
    (40) expressionStmt -> . NAME LESSTHAN NAME
    (41) expressionStmt -> . NAME GREATEQ NAME
    (42) expressionStmt -> . NAME LESSEQ NAME
    (43) expressionStmt -> . NAME EQUALS expressionStmt
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

    NAME            shift and go to state 32
    LFPAREN         shift and go to state 33
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    DO              shift and go to state 43
    FOR             shift and go to state 44
    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    funcbody                       shift and go to state 34
    statement                      shift and go to state 35
    cstatement                     shift and go to state 36
    selectionStmt                  shift and go to state 37
    iterationStmt                  shift and go to state 38
    varDeclaration                 shift and go to state 39
    expressionStmt                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 30

    (15) parameters -> typeSpecifier NAME COMMA . parameters
    (14) parameters -> . typeSpecifier NAME
    (15) parameters -> . typeSpecifier NAME COMMA parameters
    (16) parameters -> . empty
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR
    (58) empty -> .

    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10
    RPAREN          reduce using rule 58 (empty -> .)

    typeSpecifier                  shift and go to state 22
    parameters                     shift and go to state 45
    empty                          shift and go to state 23

state 31

    (13) funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN . funcbody RFPAREN
    (17) funcbody -> . statement
    (18) funcbody -> . statement funcbody
    (19) funcbody -> . statement SCOLON funcbody
    (26) statement -> . cstatement
    (27) statement -> . selectionStmt
    (28) statement -> . iterationStmt
    (29) statement -> . NAME SCOLON
    (30) statement -> . NAME statement
    (31) statement -> . varDeclaration statement
    (32) statement -> . expressionStmt SCOLON statement
    (33) statement -> . expressionStmt SCOLON
    (24) cstatement -> . LFPAREN RFPAREN
    (25) cstatement -> . LFPAREN blockitemlist RFPAREN
    (44) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement ELSE statement
    (45) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement
    (46) iterationStmt -> . WHILE LPAREN simpleexpression RPAREN statement
    (47) iterationStmt -> . DO statement WHILE LPAREN simpleexpression RPAREN SCOLON
    (48) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (34) expressionStmt -> . NAME PLUS NAME
    (35) expressionStmt -> . NAME MINUS NAME
    (36) expressionStmt -> . NAME TIMES NAME
    (37) expressionStmt -> . NAME DIVIDES NAME
    (38) expressionStmt -> . NAME EQUALS NAME
    (39) expressionStmt -> . NAME GREATERTHAN NAME
    (40) expressionStmt -> . NAME LESSTHAN NAME
    (41) expressionStmt -> . NAME GREATEQ NAME
    (42) expressionStmt -> . NAME LESSEQ NAME
    (43) expressionStmt -> . NAME EQUALS expressionStmt
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

    NAME            shift and go to state 32
    LFPAREN         shift and go to state 33
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    DO              shift and go to state 43
    FOR             shift and go to state 44
    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    funcbody                       shift and go to state 46
    statement                      shift and go to state 35
    cstatement                     shift and go to state 36
    selectionStmt                  shift and go to state 37
    iterationStmt                  shift and go to state 38
    varDeclaration                 shift and go to state 39
    expressionStmt                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 32

    (29) statement -> NAME . SCOLON
    (30) statement -> NAME . statement
    (34) expressionStmt -> NAME . PLUS NAME
    (35) expressionStmt -> NAME . MINUS NAME
    (36) expressionStmt -> NAME . TIMES NAME
    (37) expressionStmt -> NAME . DIVIDES NAME
    (38) expressionStmt -> NAME . EQUALS NAME
    (39) expressionStmt -> NAME . GREATERTHAN NAME
    (40) expressionStmt -> NAME . LESSTHAN NAME
    (41) expressionStmt -> NAME . GREATEQ NAME
    (42) expressionStmt -> NAME . LESSEQ NAME
    (43) expressionStmt -> NAME . EQUALS expressionStmt
    (26) statement -> . cstatement
    (27) statement -> . selectionStmt
    (28) statement -> . iterationStmt
    (29) statement -> . NAME SCOLON
    (30) statement -> . NAME statement
    (31) statement -> . varDeclaration statement
    (32) statement -> . expressionStmt SCOLON statement
    (33) statement -> . expressionStmt SCOLON
    (24) cstatement -> . LFPAREN RFPAREN
    (25) cstatement -> . LFPAREN blockitemlist RFPAREN
    (44) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement ELSE statement
    (45) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement
    (46) iterationStmt -> . WHILE LPAREN simpleexpression RPAREN statement
    (47) iterationStmt -> . DO statement WHILE LPAREN simpleexpression RPAREN SCOLON
    (48) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (34) expressionStmt -> . NAME PLUS NAME
    (35) expressionStmt -> . NAME MINUS NAME
    (36) expressionStmt -> . NAME TIMES NAME
    (37) expressionStmt -> . NAME DIVIDES NAME
    (38) expressionStmt -> . NAME EQUALS NAME
    (39) expressionStmt -> . NAME GREATERTHAN NAME
    (40) expressionStmt -> . NAME LESSTHAN NAME
    (41) expressionStmt -> . NAME GREATEQ NAME
    (42) expressionStmt -> . NAME LESSEQ NAME
    (43) expressionStmt -> . NAME EQUALS expressionStmt
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

    SCOLON          shift and go to state 47
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    TIMES           shift and go to state 51
    DIVIDES         shift and go to state 52
    EQUALS          shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSTHAN        shift and go to state 55
    GREATEQ         shift and go to state 56
    LESSEQ          shift and go to state 57
    NAME            shift and go to state 32
    LFPAREN         shift and go to state 33
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    DO              shift and go to state 43
    FOR             shift and go to state 44
    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    statement                      shift and go to state 48
    expressionStmt                 shift and go to state 40
    cstatement                     shift and go to state 36
    selectionStmt                  shift and go to state 37
    iterationStmt                  shift and go to state 38
    varDeclaration                 shift and go to state 39
    typeSpecifier                  shift and go to state 6

state 33

    (24) cstatement -> LFPAREN . RFPAREN
    (25) cstatement -> LFPAREN . blockitemlist RFPAREN
    (20) blockitemlist -> . blockitem
    (21) blockitemlist -> . blockitemlist blockitem
    (22) blockitem -> . statement
    (23) blockitem -> . varDeclaration
    (26) statement -> . cstatement
    (27) statement -> . selectionStmt
    (28) statement -> . iterationStmt
    (29) statement -> . NAME SCOLON
    (30) statement -> . NAME statement
    (31) statement -> . varDeclaration statement
    (32) statement -> . expressionStmt SCOLON statement
    (33) statement -> . expressionStmt SCOLON
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (24) cstatement -> . LFPAREN RFPAREN
    (25) cstatement -> . LFPAREN blockitemlist RFPAREN
    (44) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement ELSE statement
    (45) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement
    (46) iterationStmt -> . WHILE LPAREN simpleexpression RPAREN statement
    (47) iterationStmt -> . DO statement WHILE LPAREN simpleexpression RPAREN SCOLON
    (48) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (34) expressionStmt -> . NAME PLUS NAME
    (35) expressionStmt -> . NAME MINUS NAME
    (36) expressionStmt -> . NAME TIMES NAME
    (37) expressionStmt -> . NAME DIVIDES NAME
    (38) expressionStmt -> . NAME EQUALS NAME
    (39) expressionStmt -> . NAME GREATERTHAN NAME
    (40) expressionStmt -> . NAME LESSTHAN NAME
    (41) expressionStmt -> . NAME GREATEQ NAME
    (42) expressionStmt -> . NAME LESSEQ NAME
    (43) expressionStmt -> . NAME EQUALS expressionStmt
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

    RFPAREN         shift and go to state 58
    NAME            shift and go to state 32
    LFPAREN         shift and go to state 33
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    DO              shift and go to state 43
    FOR             shift and go to state 44
    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    blockitemlist                  shift and go to state 59
    blockitem                      shift and go to state 60
    statement                      shift and go to state 61
    varDeclaration                 shift and go to state 62
    cstatement                     shift and go to state 36
    selectionStmt                  shift and go to state 37
    iterationStmt                  shift and go to state 38
    expressionStmt                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 34

    (12) funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody . RFPAREN

    RFPAREN         shift and go to state 63


state 35

    (17) funcbody -> statement .
    (18) funcbody -> statement . funcbody
    (19) funcbody -> statement . SCOLON funcbody
    (17) funcbody -> . statement
    (18) funcbody -> . statement funcbody
    (19) funcbody -> . statement SCOLON funcbody
    (26) statement -> . cstatement
    (27) statement -> . selectionStmt
    (28) statement -> . iterationStmt
    (29) statement -> . NAME SCOLON
    (30) statement -> . NAME statement
    (31) statement -> . varDeclaration statement
    (32) statement -> . expressionStmt SCOLON statement
    (33) statement -> . expressionStmt SCOLON
    (24) cstatement -> . LFPAREN RFPAREN
    (25) cstatement -> . LFPAREN blockitemlist RFPAREN
    (44) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement ELSE statement
    (45) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement
    (46) iterationStmt -> . WHILE LPAREN simpleexpression RPAREN statement
    (47) iterationStmt -> . DO statement WHILE LPAREN simpleexpression RPAREN SCOLON
    (48) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (34) expressionStmt -> . NAME PLUS NAME
    (35) expressionStmt -> . NAME MINUS NAME
    (36) expressionStmt -> . NAME TIMES NAME
    (37) expressionStmt -> . NAME DIVIDES NAME
    (38) expressionStmt -> . NAME EQUALS NAME
    (39) expressionStmt -> . NAME GREATERTHAN NAME
    (40) expressionStmt -> . NAME LESSTHAN NAME
    (41) expressionStmt -> . NAME GREATEQ NAME
    (42) expressionStmt -> . NAME LESSEQ NAME
    (43) expressionStmt -> . NAME EQUALS expressionStmt
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

    RFPAREN         reduce using rule 17 (funcbody -> statement .)
    SCOLON          shift and go to state 65
    NAME            shift and go to state 32
    LFPAREN         shift and go to state 33
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    DO              shift and go to state 43
    FOR             shift and go to state 44
    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    statement                      shift and go to state 35
    funcbody                       shift and go to state 64
    cstatement                     shift and go to state 36
    selectionStmt                  shift and go to state 37
    iterationStmt                  shift and go to state 38
    varDeclaration                 shift and go to state 39
    expressionStmt                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 36

    (26) statement -> cstatement .

    SCOLON          reduce using rule 26 (statement -> cstatement .)
    NAME            reduce using rule 26 (statement -> cstatement .)
    LFPAREN         reduce using rule 26 (statement -> cstatement .)
    IF              reduce using rule 26 (statement -> cstatement .)
    WHILE           reduce using rule 26 (statement -> cstatement .)
    DO              reduce using rule 26 (statement -> cstatement .)
    FOR             reduce using rule 26 (statement -> cstatement .)
    INT             reduce using rule 26 (statement -> cstatement .)
    BOOL            reduce using rule 26 (statement -> cstatement .)
    CHAR            reduce using rule 26 (statement -> cstatement .)
    RFPAREN         reduce using rule 26 (statement -> cstatement .)
    ELSE            reduce using rule 26 (statement -> cstatement .)


state 37

    (27) statement -> selectionStmt .

    SCOLON          reduce using rule 27 (statement -> selectionStmt .)
    NAME            reduce using rule 27 (statement -> selectionStmt .)
    LFPAREN         reduce using rule 27 (statement -> selectionStmt .)
    IF              reduce using rule 27 (statement -> selectionStmt .)
    WHILE           reduce using rule 27 (statement -> selectionStmt .)
    DO              reduce using rule 27 (statement -> selectionStmt .)
    FOR             reduce using rule 27 (statement -> selectionStmt .)
    INT             reduce using rule 27 (statement -> selectionStmt .)
    BOOL            reduce using rule 27 (statement -> selectionStmt .)
    CHAR            reduce using rule 27 (statement -> selectionStmt .)
    RFPAREN         reduce using rule 27 (statement -> selectionStmt .)
    ELSE            reduce using rule 27 (statement -> selectionStmt .)


state 38

    (28) statement -> iterationStmt .

    SCOLON          reduce using rule 28 (statement -> iterationStmt .)
    NAME            reduce using rule 28 (statement -> iterationStmt .)
    LFPAREN         reduce using rule 28 (statement -> iterationStmt .)
    IF              reduce using rule 28 (statement -> iterationStmt .)
    WHILE           reduce using rule 28 (statement -> iterationStmt .)
    DO              reduce using rule 28 (statement -> iterationStmt .)
    FOR             reduce using rule 28 (statement -> iterationStmt .)
    INT             reduce using rule 28 (statement -> iterationStmt .)
    BOOL            reduce using rule 28 (statement -> iterationStmt .)
    CHAR            reduce using rule 28 (statement -> iterationStmt .)
    RFPAREN         reduce using rule 28 (statement -> iterationStmt .)
    ELSE            reduce using rule 28 (statement -> iterationStmt .)


state 39

    (31) statement -> varDeclaration . statement
    (26) statement -> . cstatement
    (27) statement -> . selectionStmt
    (28) statement -> . iterationStmt
    (29) statement -> . NAME SCOLON
    (30) statement -> . NAME statement
    (31) statement -> . varDeclaration statement
    (32) statement -> . expressionStmt SCOLON statement
    (33) statement -> . expressionStmt SCOLON
    (24) cstatement -> . LFPAREN RFPAREN
    (25) cstatement -> . LFPAREN blockitemlist RFPAREN
    (44) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement ELSE statement
    (45) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement
    (46) iterationStmt -> . WHILE LPAREN simpleexpression RPAREN statement
    (47) iterationStmt -> . DO statement WHILE LPAREN simpleexpression RPAREN SCOLON
    (48) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (34) expressionStmt -> . NAME PLUS NAME
    (35) expressionStmt -> . NAME MINUS NAME
    (36) expressionStmt -> . NAME TIMES NAME
    (37) expressionStmt -> . NAME DIVIDES NAME
    (38) expressionStmt -> . NAME EQUALS NAME
    (39) expressionStmt -> . NAME GREATERTHAN NAME
    (40) expressionStmt -> . NAME LESSTHAN NAME
    (41) expressionStmt -> . NAME GREATEQ NAME
    (42) expressionStmt -> . NAME LESSEQ NAME
    (43) expressionStmt -> . NAME EQUALS expressionStmt
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

    NAME            shift and go to state 32
    LFPAREN         shift and go to state 33
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    DO              shift and go to state 43
    FOR             shift and go to state 44
    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    varDeclaration                 shift and go to state 39
    statement                      shift and go to state 66
    cstatement                     shift and go to state 36
    selectionStmt                  shift and go to state 37
    iterationStmt                  shift and go to state 38
    expressionStmt                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 40

    (32) statement -> expressionStmt . SCOLON statement
    (33) statement -> expressionStmt . SCOLON

    SCOLON          shift and go to state 67


state 41

    (44) selectionStmt -> IF . LPAREN simpleexpression RPAREN statement ELSE statement
    (45) selectionStmt -> IF . LPAREN simpleexpression RPAREN statement

    LPAREN          shift and go to state 68


state 42

    (46) iterationStmt -> WHILE . LPAREN simpleexpression RPAREN statement

    LPAREN          shift and go to state 69


state 43

    (47) iterationStmt -> DO . statement WHILE LPAREN simpleexpression RPAREN SCOLON
    (26) statement -> . cstatement
    (27) statement -> . selectionStmt
    (28) statement -> . iterationStmt
    (29) statement -> . NAME SCOLON
    (30) statement -> . NAME statement
    (31) statement -> . varDeclaration statement
    (32) statement -> . expressionStmt SCOLON statement
    (33) statement -> . expressionStmt SCOLON
    (24) cstatement -> . LFPAREN RFPAREN
    (25) cstatement -> . LFPAREN blockitemlist RFPAREN
    (44) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement ELSE statement
    (45) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement
    (46) iterationStmt -> . WHILE LPAREN simpleexpression RPAREN statement
    (47) iterationStmt -> . DO statement WHILE LPAREN simpleexpression RPAREN SCOLON
    (48) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (34) expressionStmt -> . NAME PLUS NAME
    (35) expressionStmt -> . NAME MINUS NAME
    (36) expressionStmt -> . NAME TIMES NAME
    (37) expressionStmt -> . NAME DIVIDES NAME
    (38) expressionStmt -> . NAME EQUALS NAME
    (39) expressionStmt -> . NAME GREATERTHAN NAME
    (40) expressionStmt -> . NAME LESSTHAN NAME
    (41) expressionStmt -> . NAME GREATEQ NAME
    (42) expressionStmt -> . NAME LESSEQ NAME
    (43) expressionStmt -> . NAME EQUALS expressionStmt
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

    NAME            shift and go to state 32
    LFPAREN         shift and go to state 33
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    DO              shift and go to state 43
    FOR             shift and go to state 44
    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    statement                      shift and go to state 70
    cstatement                     shift and go to state 36
    selectionStmt                  shift and go to state 37
    iterationStmt                  shift and go to state 38
    varDeclaration                 shift and go to state 39
    expressionStmt                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 44

    (48) iterationStmt -> FOR . LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement

    LPAREN          shift and go to state 71


state 45

    (15) parameters -> typeSpecifier NAME COMMA parameters .

    RPAREN          reduce using rule 15 (parameters -> typeSpecifier NAME COMMA parameters .)


state 46

    (13) funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody . RFPAREN

    RFPAREN         shift and go to state 72


state 47

    (29) statement -> NAME SCOLON .

    SCOLON          reduce using rule 29 (statement -> NAME SCOLON .)
    NAME            reduce using rule 29 (statement -> NAME SCOLON .)
    LFPAREN         reduce using rule 29 (statement -> NAME SCOLON .)
    IF              reduce using rule 29 (statement -> NAME SCOLON .)
    WHILE           reduce using rule 29 (statement -> NAME SCOLON .)
    DO              reduce using rule 29 (statement -> NAME SCOLON .)
    FOR             reduce using rule 29 (statement -> NAME SCOLON .)
    INT             reduce using rule 29 (statement -> NAME SCOLON .)
    BOOL            reduce using rule 29 (statement -> NAME SCOLON .)
    CHAR            reduce using rule 29 (statement -> NAME SCOLON .)
    RFPAREN         reduce using rule 29 (statement -> NAME SCOLON .)
    ELSE            reduce using rule 29 (statement -> NAME SCOLON .)


state 48

    (30) statement -> NAME statement .

    SCOLON          reduce using rule 30 (statement -> NAME statement .)
    NAME            reduce using rule 30 (statement -> NAME statement .)
    LFPAREN         reduce using rule 30 (statement -> NAME statement .)
    IF              reduce using rule 30 (statement -> NAME statement .)
    WHILE           reduce using rule 30 (statement -> NAME statement .)
    DO              reduce using rule 30 (statement -> NAME statement .)
    FOR             reduce using rule 30 (statement -> NAME statement .)
    INT             reduce using rule 30 (statement -> NAME statement .)
    BOOL            reduce using rule 30 (statement -> NAME statement .)
    CHAR            reduce using rule 30 (statement -> NAME statement .)
    RFPAREN         reduce using rule 30 (statement -> NAME statement .)
    ELSE            reduce using rule 30 (statement -> NAME statement .)


state 49

    (34) expressionStmt -> NAME PLUS . NAME

    NAME            shift and go to state 73


state 50

    (35) expressionStmt -> NAME MINUS . NAME

    NAME            shift and go to state 74


state 51

    (36) expressionStmt -> NAME TIMES . NAME

    NAME            shift and go to state 75


state 52

    (37) expressionStmt -> NAME DIVIDES . NAME

    NAME            shift and go to state 76


state 53

    (38) expressionStmt -> NAME EQUALS . NAME
    (43) expressionStmt -> NAME EQUALS . expressionStmt
    (34) expressionStmt -> . NAME PLUS NAME
    (35) expressionStmt -> . NAME MINUS NAME
    (36) expressionStmt -> . NAME TIMES NAME
    (37) expressionStmt -> . NAME DIVIDES NAME
    (38) expressionStmt -> . NAME EQUALS NAME
    (39) expressionStmt -> . NAME GREATERTHAN NAME
    (40) expressionStmt -> . NAME LESSTHAN NAME
    (41) expressionStmt -> . NAME GREATEQ NAME
    (42) expressionStmt -> . NAME LESSEQ NAME
    (43) expressionStmt -> . NAME EQUALS expressionStmt

    NAME            shift and go to state 77

    expressionStmt                 shift and go to state 78

state 54

    (39) expressionStmt -> NAME GREATERTHAN . NAME

    NAME            shift and go to state 79


state 55

    (40) expressionStmt -> NAME LESSTHAN . NAME

    NAME            shift and go to state 80


state 56

    (41) expressionStmt -> NAME GREATEQ . NAME

    NAME            shift and go to state 81


state 57

    (42) expressionStmt -> NAME LESSEQ . NAME

    NAME            shift and go to state 82


state 58

    (24) cstatement -> LFPAREN RFPAREN .

    SCOLON          reduce using rule 24 (cstatement -> LFPAREN RFPAREN .)
    NAME            reduce using rule 24 (cstatement -> LFPAREN RFPAREN .)
    LFPAREN         reduce using rule 24 (cstatement -> LFPAREN RFPAREN .)
    IF              reduce using rule 24 (cstatement -> LFPAREN RFPAREN .)
    WHILE           reduce using rule 24 (cstatement -> LFPAREN RFPAREN .)
    DO              reduce using rule 24 (cstatement -> LFPAREN RFPAREN .)
    FOR             reduce using rule 24 (cstatement -> LFPAREN RFPAREN .)
    INT             reduce using rule 24 (cstatement -> LFPAREN RFPAREN .)
    BOOL            reduce using rule 24 (cstatement -> LFPAREN RFPAREN .)
    CHAR            reduce using rule 24 (cstatement -> LFPAREN RFPAREN .)
    RFPAREN         reduce using rule 24 (cstatement -> LFPAREN RFPAREN .)
    ELSE            reduce using rule 24 (cstatement -> LFPAREN RFPAREN .)


state 59

    (25) cstatement -> LFPAREN blockitemlist . RFPAREN
    (21) blockitemlist -> blockitemlist . blockitem
    (22) blockitem -> . statement
    (23) blockitem -> . varDeclaration
    (26) statement -> . cstatement
    (27) statement -> . selectionStmt
    (28) statement -> . iterationStmt
    (29) statement -> . NAME SCOLON
    (30) statement -> . NAME statement
    (31) statement -> . varDeclaration statement
    (32) statement -> . expressionStmt SCOLON statement
    (33) statement -> . expressionStmt SCOLON
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (24) cstatement -> . LFPAREN RFPAREN
    (25) cstatement -> . LFPAREN blockitemlist RFPAREN
    (44) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement ELSE statement
    (45) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement
    (46) iterationStmt -> . WHILE LPAREN simpleexpression RPAREN statement
    (47) iterationStmt -> . DO statement WHILE LPAREN simpleexpression RPAREN SCOLON
    (48) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (34) expressionStmt -> . NAME PLUS NAME
    (35) expressionStmt -> . NAME MINUS NAME
    (36) expressionStmt -> . NAME TIMES NAME
    (37) expressionStmt -> . NAME DIVIDES NAME
    (38) expressionStmt -> . NAME EQUALS NAME
    (39) expressionStmt -> . NAME GREATERTHAN NAME
    (40) expressionStmt -> . NAME LESSTHAN NAME
    (41) expressionStmt -> . NAME GREATEQ NAME
    (42) expressionStmt -> . NAME LESSEQ NAME
    (43) expressionStmt -> . NAME EQUALS expressionStmt
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

    RFPAREN         shift and go to state 83
    NAME            shift and go to state 32
    LFPAREN         shift and go to state 33
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    DO              shift and go to state 43
    FOR             shift and go to state 44
    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    blockitem                      shift and go to state 84
    statement                      shift and go to state 61
    varDeclaration                 shift and go to state 62
    cstatement                     shift and go to state 36
    selectionStmt                  shift and go to state 37
    iterationStmt                  shift and go to state 38
    expressionStmt                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 60

    (20) blockitemlist -> blockitem .

    RFPAREN         reduce using rule 20 (blockitemlist -> blockitem .)
    NAME            reduce using rule 20 (blockitemlist -> blockitem .)
    LFPAREN         reduce using rule 20 (blockitemlist -> blockitem .)
    IF              reduce using rule 20 (blockitemlist -> blockitem .)
    WHILE           reduce using rule 20 (blockitemlist -> blockitem .)
    DO              reduce using rule 20 (blockitemlist -> blockitem .)
    FOR             reduce using rule 20 (blockitemlist -> blockitem .)
    INT             reduce using rule 20 (blockitemlist -> blockitem .)
    BOOL            reduce using rule 20 (blockitemlist -> blockitem .)
    CHAR            reduce using rule 20 (blockitemlist -> blockitem .)


state 61

    (22) blockitem -> statement .

    RFPAREN         reduce using rule 22 (blockitem -> statement .)
    NAME            reduce using rule 22 (blockitem -> statement .)
    LFPAREN         reduce using rule 22 (blockitem -> statement .)
    IF              reduce using rule 22 (blockitem -> statement .)
    WHILE           reduce using rule 22 (blockitem -> statement .)
    DO              reduce using rule 22 (blockitem -> statement .)
    FOR             reduce using rule 22 (blockitem -> statement .)
    INT             reduce using rule 22 (blockitem -> statement .)
    BOOL            reduce using rule 22 (blockitem -> statement .)
    CHAR            reduce using rule 22 (blockitem -> statement .)


state 62

    (23) blockitem -> varDeclaration .
    (31) statement -> varDeclaration . statement
    (26) statement -> . cstatement
    (27) statement -> . selectionStmt
    (28) statement -> . iterationStmt
    (29) statement -> . NAME SCOLON
    (30) statement -> . NAME statement
    (31) statement -> . varDeclaration statement
    (32) statement -> . expressionStmt SCOLON statement
    (33) statement -> . expressionStmt SCOLON
    (24) cstatement -> . LFPAREN RFPAREN
    (25) cstatement -> . LFPAREN blockitemlist RFPAREN
    (44) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement ELSE statement
    (45) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement
    (46) iterationStmt -> . WHILE LPAREN simpleexpression RPAREN statement
    (47) iterationStmt -> . DO statement WHILE LPAREN simpleexpression RPAREN SCOLON
    (48) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (34) expressionStmt -> . NAME PLUS NAME
    (35) expressionStmt -> . NAME MINUS NAME
    (36) expressionStmt -> . NAME TIMES NAME
    (37) expressionStmt -> . NAME DIVIDES NAME
    (38) expressionStmt -> . NAME EQUALS NAME
    (39) expressionStmt -> . NAME GREATERTHAN NAME
    (40) expressionStmt -> . NAME LESSTHAN NAME
    (41) expressionStmt -> . NAME GREATEQ NAME
    (42) expressionStmt -> . NAME LESSEQ NAME
    (43) expressionStmt -> . NAME EQUALS expressionStmt
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for LFPAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    RFPAREN         reduce using rule 23 (blockitem -> varDeclaration .)
    NAME            shift and go to state 32
    LFPAREN         shift and go to state 33
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    DO              shift and go to state 43
    FOR             shift and go to state 44
    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

  ! NAME            [ reduce using rule 23 (blockitem -> varDeclaration .) ]
  ! LFPAREN         [ reduce using rule 23 (blockitem -> varDeclaration .) ]
  ! IF              [ reduce using rule 23 (blockitem -> varDeclaration .) ]
  ! WHILE           [ reduce using rule 23 (blockitem -> varDeclaration .) ]
  ! DO              [ reduce using rule 23 (blockitem -> varDeclaration .) ]
  ! FOR             [ reduce using rule 23 (blockitem -> varDeclaration .) ]
  ! INT             [ reduce using rule 23 (blockitem -> varDeclaration .) ]
  ! BOOL            [ reduce using rule 23 (blockitem -> varDeclaration .) ]
  ! CHAR            [ reduce using rule 23 (blockitem -> varDeclaration .) ]

    varDeclaration                 shift and go to state 39
    statement                      shift and go to state 66
    cstatement                     shift and go to state 36
    selectionStmt                  shift and go to state 37
    iterationStmt                  shift and go to state 38
    expressionStmt                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 63

    (12) funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .

    VOID            reduce using rule 12 (funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    INT             reduce using rule 12 (funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    BOOL            reduce using rule 12 (funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    CHAR            reduce using rule 12 (funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    $end            reduce using rule 12 (funcdef -> VOID NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)


state 64

    (18) funcbody -> statement funcbody .

    RFPAREN         reduce using rule 18 (funcbody -> statement funcbody .)


state 65

    (19) funcbody -> statement SCOLON . funcbody
    (17) funcbody -> . statement
    (18) funcbody -> . statement funcbody
    (19) funcbody -> . statement SCOLON funcbody
    (26) statement -> . cstatement
    (27) statement -> . selectionStmt
    (28) statement -> . iterationStmt
    (29) statement -> . NAME SCOLON
    (30) statement -> . NAME statement
    (31) statement -> . varDeclaration statement
    (32) statement -> . expressionStmt SCOLON statement
    (33) statement -> . expressionStmt SCOLON
    (24) cstatement -> . LFPAREN RFPAREN
    (25) cstatement -> . LFPAREN blockitemlist RFPAREN
    (44) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement ELSE statement
    (45) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement
    (46) iterationStmt -> . WHILE LPAREN simpleexpression RPAREN statement
    (47) iterationStmt -> . DO statement WHILE LPAREN simpleexpression RPAREN SCOLON
    (48) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (34) expressionStmt -> . NAME PLUS NAME
    (35) expressionStmt -> . NAME MINUS NAME
    (36) expressionStmt -> . NAME TIMES NAME
    (37) expressionStmt -> . NAME DIVIDES NAME
    (38) expressionStmt -> . NAME EQUALS NAME
    (39) expressionStmt -> . NAME GREATERTHAN NAME
    (40) expressionStmt -> . NAME LESSTHAN NAME
    (41) expressionStmt -> . NAME GREATEQ NAME
    (42) expressionStmt -> . NAME LESSEQ NAME
    (43) expressionStmt -> . NAME EQUALS expressionStmt
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

    NAME            shift and go to state 32
    LFPAREN         shift and go to state 33
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    DO              shift and go to state 43
    FOR             shift and go to state 44
    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    statement                      shift and go to state 35
    funcbody                       shift and go to state 85
    cstatement                     shift and go to state 36
    selectionStmt                  shift and go to state 37
    iterationStmt                  shift and go to state 38
    varDeclaration                 shift and go to state 39
    expressionStmt                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 66

    (31) statement -> varDeclaration statement .

    SCOLON          reduce using rule 31 (statement -> varDeclaration statement .)
    NAME            reduce using rule 31 (statement -> varDeclaration statement .)
    LFPAREN         reduce using rule 31 (statement -> varDeclaration statement .)
    IF              reduce using rule 31 (statement -> varDeclaration statement .)
    WHILE           reduce using rule 31 (statement -> varDeclaration statement .)
    DO              reduce using rule 31 (statement -> varDeclaration statement .)
    FOR             reduce using rule 31 (statement -> varDeclaration statement .)
    INT             reduce using rule 31 (statement -> varDeclaration statement .)
    BOOL            reduce using rule 31 (statement -> varDeclaration statement .)
    CHAR            reduce using rule 31 (statement -> varDeclaration statement .)
    RFPAREN         reduce using rule 31 (statement -> varDeclaration statement .)
    ELSE            reduce using rule 31 (statement -> varDeclaration statement .)


state 67

    (32) statement -> expressionStmt SCOLON . statement
    (33) statement -> expressionStmt SCOLON .
    (26) statement -> . cstatement
    (27) statement -> . selectionStmt
    (28) statement -> . iterationStmt
    (29) statement -> . NAME SCOLON
    (30) statement -> . NAME statement
    (31) statement -> . varDeclaration statement
    (32) statement -> . expressionStmt SCOLON statement
    (33) statement -> . expressionStmt SCOLON
    (24) cstatement -> . LFPAREN RFPAREN
    (25) cstatement -> . LFPAREN blockitemlist RFPAREN
    (44) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement ELSE statement
    (45) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement
    (46) iterationStmt -> . WHILE LPAREN simpleexpression RPAREN statement
    (47) iterationStmt -> . DO statement WHILE LPAREN simpleexpression RPAREN SCOLON
    (48) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (34) expressionStmt -> . NAME PLUS NAME
    (35) expressionStmt -> . NAME MINUS NAME
    (36) expressionStmt -> . NAME TIMES NAME
    (37) expressionStmt -> . NAME DIVIDES NAME
    (38) expressionStmt -> . NAME EQUALS NAME
    (39) expressionStmt -> . NAME GREATERTHAN NAME
    (40) expressionStmt -> . NAME LESSTHAN NAME
    (41) expressionStmt -> . NAME GREATEQ NAME
    (42) expressionStmt -> . NAME LESSEQ NAME
    (43) expressionStmt -> . NAME EQUALS expressionStmt
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for LFPAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    SCOLON          reduce using rule 33 (statement -> expressionStmt SCOLON .)
    RFPAREN         reduce using rule 33 (statement -> expressionStmt SCOLON .)
    ELSE            reduce using rule 33 (statement -> expressionStmt SCOLON .)
    NAME            shift and go to state 32
    LFPAREN         shift and go to state 33
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    DO              shift and go to state 43
    FOR             shift and go to state 44
    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

  ! NAME            [ reduce using rule 33 (statement -> expressionStmt SCOLON .) ]
  ! LFPAREN         [ reduce using rule 33 (statement -> expressionStmt SCOLON .) ]
  ! IF              [ reduce using rule 33 (statement -> expressionStmt SCOLON .) ]
  ! WHILE           [ reduce using rule 33 (statement -> expressionStmt SCOLON .) ]
  ! DO              [ reduce using rule 33 (statement -> expressionStmt SCOLON .) ]
  ! FOR             [ reduce using rule 33 (statement -> expressionStmt SCOLON .) ]
  ! INT             [ reduce using rule 33 (statement -> expressionStmt SCOLON .) ]
  ! BOOL            [ reduce using rule 33 (statement -> expressionStmt SCOLON .) ]
  ! CHAR            [ reduce using rule 33 (statement -> expressionStmt SCOLON .) ]

    expressionStmt                 shift and go to state 40
    statement                      shift and go to state 86
    cstatement                     shift and go to state 36
    selectionStmt                  shift and go to state 37
    iterationStmt                  shift and go to state 38
    varDeclaration                 shift and go to state 39
    typeSpecifier                  shift and go to state 6

state 68

    (44) selectionStmt -> IF LPAREN . simpleexpression RPAREN statement ELSE statement
    (45) selectionStmt -> IF LPAREN . simpleexpression RPAREN statement
    (57) simpleexpression -> . NAME

    NAME            shift and go to state 88

    simpleexpression               shift and go to state 87

state 69

    (46) iterationStmt -> WHILE LPAREN . simpleexpression RPAREN statement
    (57) simpleexpression -> . NAME

    NAME            shift and go to state 88

    simpleexpression               shift and go to state 89

state 70

    (47) iterationStmt -> DO statement . WHILE LPAREN simpleexpression RPAREN SCOLON

    WHILE           shift and go to state 90


state 71

    (48) iterationStmt -> FOR LPAREN . varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    varDeclaration                 shift and go to state 91
    typeSpecifier                  shift and go to state 6

state 72

    (13) funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .

    VOID            reduce using rule 13 (funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    INT             reduce using rule 13 (funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    BOOL            reduce using rule 13 (funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    CHAR            reduce using rule 13 (funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)
    $end            reduce using rule 13 (funcdef -> INT NAME LPAREN parameters RPAREN LFPAREN funcbody RFPAREN .)


state 73

    (34) expressionStmt -> NAME PLUS NAME .

    SCOLON          reduce using rule 34 (expressionStmt -> NAME PLUS NAME .)
    RPAREN          reduce using rule 34 (expressionStmt -> NAME PLUS NAME .)


state 74

    (35) expressionStmt -> NAME MINUS NAME .

    SCOLON          reduce using rule 35 (expressionStmt -> NAME MINUS NAME .)
    RPAREN          reduce using rule 35 (expressionStmt -> NAME MINUS NAME .)


state 75

    (36) expressionStmt -> NAME TIMES NAME .

    SCOLON          reduce using rule 36 (expressionStmt -> NAME TIMES NAME .)
    RPAREN          reduce using rule 36 (expressionStmt -> NAME TIMES NAME .)


state 76

    (37) expressionStmt -> NAME DIVIDES NAME .

    SCOLON          reduce using rule 37 (expressionStmt -> NAME DIVIDES NAME .)
    RPAREN          reduce using rule 37 (expressionStmt -> NAME DIVIDES NAME .)


state 77

    (38) expressionStmt -> NAME EQUALS NAME .
    (34) expressionStmt -> NAME . PLUS NAME
    (35) expressionStmt -> NAME . MINUS NAME
    (36) expressionStmt -> NAME . TIMES NAME
    (37) expressionStmt -> NAME . DIVIDES NAME
    (38) expressionStmt -> NAME . EQUALS NAME
    (39) expressionStmt -> NAME . GREATERTHAN NAME
    (40) expressionStmt -> NAME . LESSTHAN NAME
    (41) expressionStmt -> NAME . GREATEQ NAME
    (42) expressionStmt -> NAME . LESSEQ NAME
    (43) expressionStmt -> NAME . EQUALS expressionStmt

    SCOLON          reduce using rule 38 (expressionStmt -> NAME EQUALS NAME .)
    RPAREN          reduce using rule 38 (expressionStmt -> NAME EQUALS NAME .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    TIMES           shift and go to state 51
    DIVIDES         shift and go to state 52
    EQUALS          shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSTHAN        shift and go to state 55
    GREATEQ         shift and go to state 56
    LESSEQ          shift and go to state 57


state 78

    (43) expressionStmt -> NAME EQUALS expressionStmt .

    SCOLON          reduce using rule 43 (expressionStmt -> NAME EQUALS expressionStmt .)
    RPAREN          reduce using rule 43 (expressionStmt -> NAME EQUALS expressionStmt .)


state 79

    (39) expressionStmt -> NAME GREATERTHAN NAME .

    SCOLON          reduce using rule 39 (expressionStmt -> NAME GREATERTHAN NAME .)
    RPAREN          reduce using rule 39 (expressionStmt -> NAME GREATERTHAN NAME .)


state 80

    (40) expressionStmt -> NAME LESSTHAN NAME .

    SCOLON          reduce using rule 40 (expressionStmt -> NAME LESSTHAN NAME .)
    RPAREN          reduce using rule 40 (expressionStmt -> NAME LESSTHAN NAME .)


state 81

    (41) expressionStmt -> NAME GREATEQ NAME .

    SCOLON          reduce using rule 41 (expressionStmt -> NAME GREATEQ NAME .)
    RPAREN          reduce using rule 41 (expressionStmt -> NAME GREATEQ NAME .)


state 82

    (42) expressionStmt -> NAME LESSEQ NAME .

    SCOLON          reduce using rule 42 (expressionStmt -> NAME LESSEQ NAME .)
    RPAREN          reduce using rule 42 (expressionStmt -> NAME LESSEQ NAME .)


state 83

    (25) cstatement -> LFPAREN blockitemlist RFPAREN .

    SCOLON          reduce using rule 25 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    NAME            reduce using rule 25 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    LFPAREN         reduce using rule 25 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    IF              reduce using rule 25 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    WHILE           reduce using rule 25 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    DO              reduce using rule 25 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    FOR             reduce using rule 25 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    INT             reduce using rule 25 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    BOOL            reduce using rule 25 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    CHAR            reduce using rule 25 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    RFPAREN         reduce using rule 25 (cstatement -> LFPAREN blockitemlist RFPAREN .)
    ELSE            reduce using rule 25 (cstatement -> LFPAREN blockitemlist RFPAREN .)


state 84

    (21) blockitemlist -> blockitemlist blockitem .

    RFPAREN         reduce using rule 21 (blockitemlist -> blockitemlist blockitem .)
    NAME            reduce using rule 21 (blockitemlist -> blockitemlist blockitem .)
    LFPAREN         reduce using rule 21 (blockitemlist -> blockitemlist blockitem .)
    IF              reduce using rule 21 (blockitemlist -> blockitemlist blockitem .)
    WHILE           reduce using rule 21 (blockitemlist -> blockitemlist blockitem .)
    DO              reduce using rule 21 (blockitemlist -> blockitemlist blockitem .)
    FOR             reduce using rule 21 (blockitemlist -> blockitemlist blockitem .)
    INT             reduce using rule 21 (blockitemlist -> blockitemlist blockitem .)
    BOOL            reduce using rule 21 (blockitemlist -> blockitemlist blockitem .)
    CHAR            reduce using rule 21 (blockitemlist -> blockitemlist blockitem .)


state 85

    (19) funcbody -> statement SCOLON funcbody .

    RFPAREN         reduce using rule 19 (funcbody -> statement SCOLON funcbody .)


state 86

    (32) statement -> expressionStmt SCOLON statement .

    SCOLON          reduce using rule 32 (statement -> expressionStmt SCOLON statement .)
    NAME            reduce using rule 32 (statement -> expressionStmt SCOLON statement .)
    LFPAREN         reduce using rule 32 (statement -> expressionStmt SCOLON statement .)
    IF              reduce using rule 32 (statement -> expressionStmt SCOLON statement .)
    WHILE           reduce using rule 32 (statement -> expressionStmt SCOLON statement .)
    DO              reduce using rule 32 (statement -> expressionStmt SCOLON statement .)
    FOR             reduce using rule 32 (statement -> expressionStmt SCOLON statement .)
    INT             reduce using rule 32 (statement -> expressionStmt SCOLON statement .)
    BOOL            reduce using rule 32 (statement -> expressionStmt SCOLON statement .)
    CHAR            reduce using rule 32 (statement -> expressionStmt SCOLON statement .)
    RFPAREN         reduce using rule 32 (statement -> expressionStmt SCOLON statement .)
    ELSE            reduce using rule 32 (statement -> expressionStmt SCOLON statement .)


state 87

    (44) selectionStmt -> IF LPAREN simpleexpression . RPAREN statement ELSE statement
    (45) selectionStmt -> IF LPAREN simpleexpression . RPAREN statement

    RPAREN          shift and go to state 92


state 88

    (57) simpleexpression -> NAME .

    RPAREN          reduce using rule 57 (simpleexpression -> NAME .)


state 89

    (46) iterationStmt -> WHILE LPAREN simpleexpression . RPAREN statement

    RPAREN          shift and go to state 93


state 90

    (47) iterationStmt -> DO statement WHILE . LPAREN simpleexpression RPAREN SCOLON

    LPAREN          shift and go to state 94


state 91

    (48) iterationStmt -> FOR LPAREN varDeclaration . SCOLON forcondition SCOLON forchange RPAREN statement

    SCOLON          shift and go to state 95


state 92

    (44) selectionStmt -> IF LPAREN simpleexpression RPAREN . statement ELSE statement
    (45) selectionStmt -> IF LPAREN simpleexpression RPAREN . statement
    (26) statement -> . cstatement
    (27) statement -> . selectionStmt
    (28) statement -> . iterationStmt
    (29) statement -> . NAME SCOLON
    (30) statement -> . NAME statement
    (31) statement -> . varDeclaration statement
    (32) statement -> . expressionStmt SCOLON statement
    (33) statement -> . expressionStmt SCOLON
    (24) cstatement -> . LFPAREN RFPAREN
    (25) cstatement -> . LFPAREN blockitemlist RFPAREN
    (44) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement ELSE statement
    (45) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement
    (46) iterationStmt -> . WHILE LPAREN simpleexpression RPAREN statement
    (47) iterationStmt -> . DO statement WHILE LPAREN simpleexpression RPAREN SCOLON
    (48) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (34) expressionStmt -> . NAME PLUS NAME
    (35) expressionStmt -> . NAME MINUS NAME
    (36) expressionStmt -> . NAME TIMES NAME
    (37) expressionStmt -> . NAME DIVIDES NAME
    (38) expressionStmt -> . NAME EQUALS NAME
    (39) expressionStmt -> . NAME GREATERTHAN NAME
    (40) expressionStmt -> . NAME LESSTHAN NAME
    (41) expressionStmt -> . NAME GREATEQ NAME
    (42) expressionStmt -> . NAME LESSEQ NAME
    (43) expressionStmt -> . NAME EQUALS expressionStmt
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

    NAME            shift and go to state 32
    LFPAREN         shift and go to state 33
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    DO              shift and go to state 43
    FOR             shift and go to state 44
    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    statement                      shift and go to state 96
    cstatement                     shift and go to state 36
    selectionStmt                  shift and go to state 37
    iterationStmt                  shift and go to state 38
    varDeclaration                 shift and go to state 39
    expressionStmt                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 93

    (46) iterationStmt -> WHILE LPAREN simpleexpression RPAREN . statement
    (26) statement -> . cstatement
    (27) statement -> . selectionStmt
    (28) statement -> . iterationStmt
    (29) statement -> . NAME SCOLON
    (30) statement -> . NAME statement
    (31) statement -> . varDeclaration statement
    (32) statement -> . expressionStmt SCOLON statement
    (33) statement -> . expressionStmt SCOLON
    (24) cstatement -> . LFPAREN RFPAREN
    (25) cstatement -> . LFPAREN blockitemlist RFPAREN
    (44) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement ELSE statement
    (45) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement
    (46) iterationStmt -> . WHILE LPAREN simpleexpression RPAREN statement
    (47) iterationStmt -> . DO statement WHILE LPAREN simpleexpression RPAREN SCOLON
    (48) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (34) expressionStmt -> . NAME PLUS NAME
    (35) expressionStmt -> . NAME MINUS NAME
    (36) expressionStmt -> . NAME TIMES NAME
    (37) expressionStmt -> . NAME DIVIDES NAME
    (38) expressionStmt -> . NAME EQUALS NAME
    (39) expressionStmt -> . NAME GREATERTHAN NAME
    (40) expressionStmt -> . NAME LESSTHAN NAME
    (41) expressionStmt -> . NAME GREATEQ NAME
    (42) expressionStmt -> . NAME LESSEQ NAME
    (43) expressionStmt -> . NAME EQUALS expressionStmt
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

    NAME            shift and go to state 32
    LFPAREN         shift and go to state 33
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    DO              shift and go to state 43
    FOR             shift and go to state 44
    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    statement                      shift and go to state 97
    cstatement                     shift and go to state 36
    selectionStmt                  shift and go to state 37
    iterationStmt                  shift and go to state 38
    varDeclaration                 shift and go to state 39
    expressionStmt                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 94

    (47) iterationStmt -> DO statement WHILE LPAREN . simpleexpression RPAREN SCOLON
    (57) simpleexpression -> . NAME

    NAME            shift and go to state 88

    simpleexpression               shift and go to state 98

state 95

    (48) iterationStmt -> FOR LPAREN varDeclaration SCOLON . forcondition SCOLON forchange RPAREN statement
    (49) forcondition -> . NAME EQUALS NAME
    (50) forcondition -> . NAME GREATERTHAN NAME
    (51) forcondition -> . NAME LESSTHAN NAME
    (52) forcondition -> . NAME GREATEQ NAME
    (53) forcondition -> . NAME LESSEQ NAME

    NAME            shift and go to state 100

    forcondition                   shift and go to state 99

state 96

    (44) selectionStmt -> IF LPAREN simpleexpression RPAREN statement . ELSE statement
    (45) selectionStmt -> IF LPAREN simpleexpression RPAREN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 101
    SCOLON          reduce using rule 45 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement .)
    NAME            reduce using rule 45 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement .)
    LFPAREN         reduce using rule 45 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement .)
    IF              reduce using rule 45 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement .)
    WHILE           reduce using rule 45 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement .)
    DO              reduce using rule 45 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement .)
    FOR             reduce using rule 45 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement .)
    INT             reduce using rule 45 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement .)
    BOOL            reduce using rule 45 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement .)
    CHAR            reduce using rule 45 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement .)
    RFPAREN         reduce using rule 45 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement .)

  ! ELSE            [ reduce using rule 45 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement .) ]


state 97

    (46) iterationStmt -> WHILE LPAREN simpleexpression RPAREN statement .

    SCOLON          reduce using rule 46 (iterationStmt -> WHILE LPAREN simpleexpression RPAREN statement .)
    NAME            reduce using rule 46 (iterationStmt -> WHILE LPAREN simpleexpression RPAREN statement .)
    LFPAREN         reduce using rule 46 (iterationStmt -> WHILE LPAREN simpleexpression RPAREN statement .)
    IF              reduce using rule 46 (iterationStmt -> WHILE LPAREN simpleexpression RPAREN statement .)
    WHILE           reduce using rule 46 (iterationStmt -> WHILE LPAREN simpleexpression RPAREN statement .)
    DO              reduce using rule 46 (iterationStmt -> WHILE LPAREN simpleexpression RPAREN statement .)
    FOR             reduce using rule 46 (iterationStmt -> WHILE LPAREN simpleexpression RPAREN statement .)
    INT             reduce using rule 46 (iterationStmt -> WHILE LPAREN simpleexpression RPAREN statement .)
    BOOL            reduce using rule 46 (iterationStmt -> WHILE LPAREN simpleexpression RPAREN statement .)
    CHAR            reduce using rule 46 (iterationStmt -> WHILE LPAREN simpleexpression RPAREN statement .)
    RFPAREN         reduce using rule 46 (iterationStmt -> WHILE LPAREN simpleexpression RPAREN statement .)
    ELSE            reduce using rule 46 (iterationStmt -> WHILE LPAREN simpleexpression RPAREN statement .)


state 98

    (47) iterationStmt -> DO statement WHILE LPAREN simpleexpression . RPAREN SCOLON

    RPAREN          shift and go to state 102


state 99

    (48) iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition . SCOLON forchange RPAREN statement

    SCOLON          shift and go to state 103


state 100

    (49) forcondition -> NAME . EQUALS NAME
    (50) forcondition -> NAME . GREATERTHAN NAME
    (51) forcondition -> NAME . LESSTHAN NAME
    (52) forcondition -> NAME . GREATEQ NAME
    (53) forcondition -> NAME . LESSEQ NAME

    EQUALS          shift and go to state 104
    GREATERTHAN     shift and go to state 105
    LESSTHAN        shift and go to state 106
    GREATEQ         shift and go to state 107
    LESSEQ          shift and go to state 108


state 101

    (44) selectionStmt -> IF LPAREN simpleexpression RPAREN statement ELSE . statement
    (26) statement -> . cstatement
    (27) statement -> . selectionStmt
    (28) statement -> . iterationStmt
    (29) statement -> . NAME SCOLON
    (30) statement -> . NAME statement
    (31) statement -> . varDeclaration statement
    (32) statement -> . expressionStmt SCOLON statement
    (33) statement -> . expressionStmt SCOLON
    (24) cstatement -> . LFPAREN RFPAREN
    (25) cstatement -> . LFPAREN blockitemlist RFPAREN
    (44) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement ELSE statement
    (45) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement
    (46) iterationStmt -> . WHILE LPAREN simpleexpression RPAREN statement
    (47) iterationStmt -> . DO statement WHILE LPAREN simpleexpression RPAREN SCOLON
    (48) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (34) expressionStmt -> . NAME PLUS NAME
    (35) expressionStmt -> . NAME MINUS NAME
    (36) expressionStmt -> . NAME TIMES NAME
    (37) expressionStmt -> . NAME DIVIDES NAME
    (38) expressionStmt -> . NAME EQUALS NAME
    (39) expressionStmt -> . NAME GREATERTHAN NAME
    (40) expressionStmt -> . NAME LESSTHAN NAME
    (41) expressionStmt -> . NAME GREATEQ NAME
    (42) expressionStmt -> . NAME LESSEQ NAME
    (43) expressionStmt -> . NAME EQUALS expressionStmt
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

    NAME            shift and go to state 32
    LFPAREN         shift and go to state 33
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    DO              shift and go to state 43
    FOR             shift and go to state 44
    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    statement                      shift and go to state 109
    cstatement                     shift and go to state 36
    selectionStmt                  shift and go to state 37
    iterationStmt                  shift and go to state 38
    varDeclaration                 shift and go to state 39
    expressionStmt                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 102

    (47) iterationStmt -> DO statement WHILE LPAREN simpleexpression RPAREN . SCOLON

    SCOLON          shift and go to state 110


state 103

    (48) iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON . forchange RPAREN statement
    (54) forchange -> . NAME PLUS PLUS
    (55) forchange -> . NAME MINUS MINUS
    (56) forchange -> . expressionStmt
    (34) expressionStmt -> . NAME PLUS NAME
    (35) expressionStmt -> . NAME MINUS NAME
    (36) expressionStmt -> . NAME TIMES NAME
    (37) expressionStmt -> . NAME DIVIDES NAME
    (38) expressionStmt -> . NAME EQUALS NAME
    (39) expressionStmt -> . NAME GREATERTHAN NAME
    (40) expressionStmt -> . NAME LESSTHAN NAME
    (41) expressionStmt -> . NAME GREATEQ NAME
    (42) expressionStmt -> . NAME LESSEQ NAME
    (43) expressionStmt -> . NAME EQUALS expressionStmt

    NAME            shift and go to state 112

    forchange                      shift and go to state 111
    expressionStmt                 shift and go to state 113

state 104

    (49) forcondition -> NAME EQUALS . NAME

    NAME            shift and go to state 114


state 105

    (50) forcondition -> NAME GREATERTHAN . NAME

    NAME            shift and go to state 115


state 106

    (51) forcondition -> NAME LESSTHAN . NAME

    NAME            shift and go to state 116


state 107

    (52) forcondition -> NAME GREATEQ . NAME

    NAME            shift and go to state 117


state 108

    (53) forcondition -> NAME LESSEQ . NAME

    NAME            shift and go to state 118


state 109

    (44) selectionStmt -> IF LPAREN simpleexpression RPAREN statement ELSE statement .

    SCOLON          reduce using rule 44 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement ELSE statement .)
    NAME            reduce using rule 44 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement ELSE statement .)
    LFPAREN         reduce using rule 44 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement ELSE statement .)
    IF              reduce using rule 44 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 44 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement ELSE statement .)
    DO              reduce using rule 44 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement ELSE statement .)
    FOR             reduce using rule 44 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement ELSE statement .)
    INT             reduce using rule 44 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement ELSE statement .)
    BOOL            reduce using rule 44 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 44 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement ELSE statement .)
    RFPAREN         reduce using rule 44 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 44 (selectionStmt -> IF LPAREN simpleexpression RPAREN statement ELSE statement .)


state 110

    (47) iterationStmt -> DO statement WHILE LPAREN simpleexpression RPAREN SCOLON .

    SCOLON          reduce using rule 47 (iterationStmt -> DO statement WHILE LPAREN simpleexpression RPAREN SCOLON .)
    NAME            reduce using rule 47 (iterationStmt -> DO statement WHILE LPAREN simpleexpression RPAREN SCOLON .)
    LFPAREN         reduce using rule 47 (iterationStmt -> DO statement WHILE LPAREN simpleexpression RPAREN SCOLON .)
    IF              reduce using rule 47 (iterationStmt -> DO statement WHILE LPAREN simpleexpression RPAREN SCOLON .)
    WHILE           reduce using rule 47 (iterationStmt -> DO statement WHILE LPAREN simpleexpression RPAREN SCOLON .)
    DO              reduce using rule 47 (iterationStmt -> DO statement WHILE LPAREN simpleexpression RPAREN SCOLON .)
    FOR             reduce using rule 47 (iterationStmt -> DO statement WHILE LPAREN simpleexpression RPAREN SCOLON .)
    INT             reduce using rule 47 (iterationStmt -> DO statement WHILE LPAREN simpleexpression RPAREN SCOLON .)
    BOOL            reduce using rule 47 (iterationStmt -> DO statement WHILE LPAREN simpleexpression RPAREN SCOLON .)
    CHAR            reduce using rule 47 (iterationStmt -> DO statement WHILE LPAREN simpleexpression RPAREN SCOLON .)
    RFPAREN         reduce using rule 47 (iterationStmt -> DO statement WHILE LPAREN simpleexpression RPAREN SCOLON .)
    ELSE            reduce using rule 47 (iterationStmt -> DO statement WHILE LPAREN simpleexpression RPAREN SCOLON .)


state 111

    (48) iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange . RPAREN statement

    RPAREN          shift and go to state 119


state 112

    (54) forchange -> NAME . PLUS PLUS
    (55) forchange -> NAME . MINUS MINUS
    (34) expressionStmt -> NAME . PLUS NAME
    (35) expressionStmt -> NAME . MINUS NAME
    (36) expressionStmt -> NAME . TIMES NAME
    (37) expressionStmt -> NAME . DIVIDES NAME
    (38) expressionStmt -> NAME . EQUALS NAME
    (39) expressionStmt -> NAME . GREATERTHAN NAME
    (40) expressionStmt -> NAME . LESSTHAN NAME
    (41) expressionStmt -> NAME . GREATEQ NAME
    (42) expressionStmt -> NAME . LESSEQ NAME
    (43) expressionStmt -> NAME . EQUALS expressionStmt

    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    TIMES           shift and go to state 51
    DIVIDES         shift and go to state 52
    EQUALS          shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSTHAN        shift and go to state 55
    GREATEQ         shift and go to state 56
    LESSEQ          shift and go to state 57


state 113

    (56) forchange -> expressionStmt .

    RPAREN          reduce using rule 56 (forchange -> expressionStmt .)


state 114

    (49) forcondition -> NAME EQUALS NAME .

    SCOLON          reduce using rule 49 (forcondition -> NAME EQUALS NAME .)


state 115

    (50) forcondition -> NAME GREATERTHAN NAME .

    SCOLON          reduce using rule 50 (forcondition -> NAME GREATERTHAN NAME .)


state 116

    (51) forcondition -> NAME LESSTHAN NAME .

    SCOLON          reduce using rule 51 (forcondition -> NAME LESSTHAN NAME .)


state 117

    (52) forcondition -> NAME GREATEQ NAME .

    SCOLON          reduce using rule 52 (forcondition -> NAME GREATEQ NAME .)


state 118

    (53) forcondition -> NAME LESSEQ NAME .

    SCOLON          reduce using rule 53 (forcondition -> NAME LESSEQ NAME .)


state 119

    (48) iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN . statement
    (26) statement -> . cstatement
    (27) statement -> . selectionStmt
    (28) statement -> . iterationStmt
    (29) statement -> . NAME SCOLON
    (30) statement -> . NAME statement
    (31) statement -> . varDeclaration statement
    (32) statement -> . expressionStmt SCOLON statement
    (33) statement -> . expressionStmt SCOLON
    (24) cstatement -> . LFPAREN RFPAREN
    (25) cstatement -> . LFPAREN blockitemlist RFPAREN
    (44) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement ELSE statement
    (45) selectionStmt -> . IF LPAREN simpleexpression RPAREN statement
    (46) iterationStmt -> . WHILE LPAREN simpleexpression RPAREN statement
    (47) iterationStmt -> . DO statement WHILE LPAREN simpleexpression RPAREN SCOLON
    (48) iterationStmt -> . FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement
    (6) varDeclaration -> . typeSpecifier NAME SCOLON
    (7) varDeclaration -> . typeSpecifier NAME EQUALS NAME
    (8) varDeclaration -> . typeSpecifier NAME EQUALS NUMBER
    (34) expressionStmt -> . NAME PLUS NAME
    (35) expressionStmt -> . NAME MINUS NAME
    (36) expressionStmt -> . NAME TIMES NAME
    (37) expressionStmt -> . NAME DIVIDES NAME
    (38) expressionStmt -> . NAME EQUALS NAME
    (39) expressionStmt -> . NAME GREATERTHAN NAME
    (40) expressionStmt -> . NAME LESSTHAN NAME
    (41) expressionStmt -> . NAME GREATEQ NAME
    (42) expressionStmt -> . NAME LESSEQ NAME
    (43) expressionStmt -> . NAME EQUALS expressionStmt
    (9) typeSpecifier -> . INT
    (10) typeSpecifier -> . BOOL
    (11) typeSpecifier -> . CHAR

    NAME            shift and go to state 32
    LFPAREN         shift and go to state 33
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    DO              shift and go to state 43
    FOR             shift and go to state 44
    INT             shift and go to state 24
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    varDeclaration                 shift and go to state 39
    statement                      shift and go to state 122
    cstatement                     shift and go to state 36
    selectionStmt                  shift and go to state 37
    iterationStmt                  shift and go to state 38
    expressionStmt                 shift and go to state 40
    typeSpecifier                  shift and go to state 6

state 120

    (54) forchange -> NAME PLUS . PLUS
    (34) expressionStmt -> NAME PLUS . NAME

    PLUS            shift and go to state 123
    NAME            shift and go to state 73


state 121

    (55) forchange -> NAME MINUS . MINUS
    (35) expressionStmt -> NAME MINUS . NAME

    MINUS           shift and go to state 124
    NAME            shift and go to state 74


state 122

    (48) iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .

    SCOLON          reduce using rule 48 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    NAME            reduce using rule 48 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    LFPAREN         reduce using rule 48 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    IF              reduce using rule 48 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    WHILE           reduce using rule 48 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    DO              reduce using rule 48 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    FOR             reduce using rule 48 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    INT             reduce using rule 48 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    BOOL            reduce using rule 48 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    CHAR            reduce using rule 48 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    RFPAREN         reduce using rule 48 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)
    ELSE            reduce using rule 48 (iterationStmt -> FOR LPAREN varDeclaration SCOLON forcondition SCOLON forchange RPAREN statement .)


state 123

    (54) forchange -> NAME PLUS PLUS .

    RPAREN          reduce using rule 54 (forchange -> NAME PLUS PLUS .)


state 124

    (55) forchange -> NAME MINUS MINUS .

    RPAREN          reduce using rule 55 (forchange -> NAME MINUS MINUS .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NAME in state 8 resolved as shift
WARNING: shift/reduce conflict for NAME in state 62 resolved as shift
WARNING: shift/reduce conflict for LFPAREN in state 62 resolved as shift
WARNING: shift/reduce conflict for IF in state 62 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 62 resolved as shift
WARNING: shift/reduce conflict for DO in state 62 resolved as shift
WARNING: shift/reduce conflict for FOR in state 62 resolved as shift
WARNING: shift/reduce conflict for INT in state 62 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 62 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 62 resolved as shift
WARNING: shift/reduce conflict for NAME in state 67 resolved as shift
WARNING: shift/reduce conflict for LFPAREN in state 67 resolved as shift
WARNING: shift/reduce conflict for IF in state 67 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 67 resolved as shift
WARNING: shift/reduce conflict for DO in state 67 resolved as shift
WARNING: shift/reduce conflict for FOR in state 67 resolved as shift
WARNING: shift/reduce conflict for INT in state 67 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 67 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 67 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 96 resolved as shift
