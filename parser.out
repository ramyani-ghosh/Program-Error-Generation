Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     empty -> <empty>
Rule 2     start -> if_stmt
Rule 3     start -> funcdef
Rule 4     if_stmt -> IF statement COLON funcbody
Rule 5     funcdef -> DEF NAME LPAREN parameters RPAREN COLON funcbody
Rule 6     parameters -> NAME
Rule 7     parameters -> NAME COMMA parameters
Rule 8     parameters -> empty
Rule 9     funcbody -> TAB statement
Rule 10    funcbody -> TAB statement funcbody
Rule 11    statement -> NAME
Rule 12    statement -> NAME statement
Rule 13    statement -> if_stmt
Rule 14    statement -> funcdef

Terminals, with rules where they appear

COLON                : 4 5
COMMA                : 7
DEF                  : 5
IF                   : 4
LPAREN               : 5
NAME                 : 5 6 7 11 12
RPAREN               : 5
TAB                  : 9 10
error                : 

Nonterminals, with rules where they appear

empty                : 8
funcbody             : 4 5 10
funcdef              : 3 14
if_stmt              : 2 13
parameters           : 5 7
start                : 0
statement            : 4 9 10 12

Parsing method: LALR

state 0

    (0) S' -> . start
    (2) start -> . if_stmt
    (3) start -> . funcdef
    (4) if_stmt -> . IF statement COLON funcbody
    (5) funcdef -> . DEF NAME LPAREN parameters RPAREN COLON funcbody

    IF              shift and go to state 4
    DEF             shift and go to state 5

    start                          shift and go to state 1
    if_stmt                        shift and go to state 2
    funcdef                        shift and go to state 3

state 1

    (0) S' -> start .



state 2

    (2) start -> if_stmt .

    $end            reduce using rule 2 (start -> if_stmt .)


state 3

    (3) start -> funcdef .

    $end            reduce using rule 3 (start -> funcdef .)


state 4

    (4) if_stmt -> IF . statement COLON funcbody
    (11) statement -> . NAME
    (12) statement -> . NAME statement
    (13) statement -> . if_stmt
    (14) statement -> . funcdef
    (4) if_stmt -> . IF statement COLON funcbody
    (5) funcdef -> . DEF NAME LPAREN parameters RPAREN COLON funcbody

    NAME            shift and go to state 7
    IF              shift and go to state 4
    DEF             shift and go to state 5

    statement                      shift and go to state 6
    if_stmt                        shift and go to state 8
    funcdef                        shift and go to state 9

state 5

    (5) funcdef -> DEF . NAME LPAREN parameters RPAREN COLON funcbody

    NAME            shift and go to state 10


state 6

    (4) if_stmt -> IF statement . COLON funcbody

    COLON           shift and go to state 11


state 7

    (11) statement -> NAME .
    (12) statement -> NAME . statement
    (11) statement -> . NAME
    (12) statement -> . NAME statement
    (13) statement -> . if_stmt
    (14) statement -> . funcdef
    (4) if_stmt -> . IF statement COLON funcbody
    (5) funcdef -> . DEF NAME LPAREN parameters RPAREN COLON funcbody

    COLON           reduce using rule 11 (statement -> NAME .)
    TAB             reduce using rule 11 (statement -> NAME .)
    $end            reduce using rule 11 (statement -> NAME .)
    NAME            shift and go to state 7
    IF              shift and go to state 4
    DEF             shift and go to state 5

    statement                      shift and go to state 12
    if_stmt                        shift and go to state 8
    funcdef                        shift and go to state 9

state 8

    (13) statement -> if_stmt .

    COLON           reduce using rule 13 (statement -> if_stmt .)
    TAB             reduce using rule 13 (statement -> if_stmt .)
    $end            reduce using rule 13 (statement -> if_stmt .)


state 9

    (14) statement -> funcdef .

    COLON           reduce using rule 14 (statement -> funcdef .)
    TAB             reduce using rule 14 (statement -> funcdef .)
    $end            reduce using rule 14 (statement -> funcdef .)


state 10

    (5) funcdef -> DEF NAME . LPAREN parameters RPAREN COLON funcbody

    LPAREN          shift and go to state 13


state 11

    (4) if_stmt -> IF statement COLON . funcbody
    (9) funcbody -> . TAB statement
    (10) funcbody -> . TAB statement funcbody

    TAB             shift and go to state 15

    funcbody                       shift and go to state 14

state 12

    (12) statement -> NAME statement .

    COLON           reduce using rule 12 (statement -> NAME statement .)
    TAB             reduce using rule 12 (statement -> NAME statement .)
    $end            reduce using rule 12 (statement -> NAME statement .)


state 13

    (5) funcdef -> DEF NAME LPAREN . parameters RPAREN COLON funcbody
    (6) parameters -> . NAME
    (7) parameters -> . NAME COMMA parameters
    (8) parameters -> . empty
    (1) empty -> .

    NAME            shift and go to state 16
    RPAREN          reduce using rule 1 (empty -> .)

    parameters                     shift and go to state 17
    empty                          shift and go to state 18

state 14

    (4) if_stmt -> IF statement COLON funcbody .

    $end            reduce using rule 4 (if_stmt -> IF statement COLON funcbody .)
    COLON           reduce using rule 4 (if_stmt -> IF statement COLON funcbody .)
    TAB             reduce using rule 4 (if_stmt -> IF statement COLON funcbody .)


state 15

    (9) funcbody -> TAB . statement
    (10) funcbody -> TAB . statement funcbody
    (11) statement -> . NAME
    (12) statement -> . NAME statement
    (13) statement -> . if_stmt
    (14) statement -> . funcdef
    (4) if_stmt -> . IF statement COLON funcbody
    (5) funcdef -> . DEF NAME LPAREN parameters RPAREN COLON funcbody

    NAME            shift and go to state 7
    IF              shift and go to state 4
    DEF             shift and go to state 5

    statement                      shift and go to state 19
    if_stmt                        shift and go to state 8
    funcdef                        shift and go to state 9

state 16

    (6) parameters -> NAME .
    (7) parameters -> NAME . COMMA parameters

    RPAREN          reduce using rule 6 (parameters -> NAME .)
    COMMA           shift and go to state 20


state 17

    (5) funcdef -> DEF NAME LPAREN parameters . RPAREN COLON funcbody

    RPAREN          shift and go to state 21


state 18

    (8) parameters -> empty .

    RPAREN          reduce using rule 8 (parameters -> empty .)


state 19

    (9) funcbody -> TAB statement .
    (10) funcbody -> TAB statement . funcbody
    (9) funcbody -> . TAB statement
    (10) funcbody -> . TAB statement funcbody

  ! shift/reduce conflict for TAB resolved as shift
    COLON           reduce using rule 9 (funcbody -> TAB statement .)
    $end            reduce using rule 9 (funcbody -> TAB statement .)
    TAB             shift and go to state 15

  ! TAB             [ reduce using rule 9 (funcbody -> TAB statement .) ]

    funcbody                       shift and go to state 22

state 20

    (7) parameters -> NAME COMMA . parameters
    (6) parameters -> . NAME
    (7) parameters -> . NAME COMMA parameters
    (8) parameters -> . empty
    (1) empty -> .

    NAME            shift and go to state 16
    RPAREN          reduce using rule 1 (empty -> .)

    parameters                     shift and go to state 23
    empty                          shift and go to state 18

state 21

    (5) funcdef -> DEF NAME LPAREN parameters RPAREN . COLON funcbody

    COLON           shift and go to state 24


state 22

    (10) funcbody -> TAB statement funcbody .

    COLON           reduce using rule 10 (funcbody -> TAB statement funcbody .)
    TAB             reduce using rule 10 (funcbody -> TAB statement funcbody .)
    $end            reduce using rule 10 (funcbody -> TAB statement funcbody .)


state 23

    (7) parameters -> NAME COMMA parameters .

    RPAREN          reduce using rule 7 (parameters -> NAME COMMA parameters .)


state 24

    (5) funcdef -> DEF NAME LPAREN parameters RPAREN COLON . funcbody
    (9) funcbody -> . TAB statement
    (10) funcbody -> . TAB statement funcbody

    TAB             shift and go to state 15

    funcbody                       shift and go to state 25

state 25

    (5) funcdef -> DEF NAME LPAREN parameters RPAREN COLON funcbody .

    $end            reduce using rule 5 (funcdef -> DEF NAME LPAREN parameters RPAREN COLON funcbody .)
    COLON           reduce using rule 5 (funcdef -> DEF NAME LPAREN parameters RPAREN COLON funcbody .)
    TAB             reduce using rule 5 (funcdef -> DEF NAME LPAREN parameters RPAREN COLON funcbody .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TAB in state 19 resolved as shift
